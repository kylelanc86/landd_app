const express = require('express');
const router = express.Router();
const fetch = require('node-fetch');

// Simple HTML template for testing
const generateSimpleClearanceHTML = (data) => {
  return `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Simple Asbestos Clearance Report</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      line-height: 1.6;
    }
    .header {
      text-align: center;
      margin-bottom: 30px;
      border-bottom: 2px solid #16b12b;
      padding-bottom: 20px;
    }
    .title {
      font-size: 24px;
      font-weight: bold;
      color: #333;
      margin-bottom: 10px;
    }
    .subtitle {
      font-size: 18px;
      color: #666;
    }
    .section {
      margin-bottom: 20px;
    }
    .section-title {
      font-size: 16px;
      font-weight: bold;
      color: #333;
      margin-bottom: 10px;
    }
    .content {
      font-size: 14px;
      color: #555;
    }
    .table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 10px;
    }
    .table th, .table td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
    }
    .table th {
      background-color: #f5f5f5;
      font-weight: bold;
    }
    .footer {
      margin-top: 40px;
      text-align: center;
      font-size: 12px;
      color: #999;
    }
  </style>
</head>
<body>
  <div class="header">
    <div class="title">ASBESTOS REMOVAL CLEARANCE CERTIFICATE</div>
    <div class="subtitle">${data.projectId?.name || 'Unknown Site'}</div>
  </div>

  <div class="section">
    <div class="section-title">Project Details</div>
    <div class="content">
      <strong>Project ID:</strong> ${data.projectId?.projectID || 'Unknown'}<br>
      <strong>Client:</strong> ${data.projectId?.client?.name || 'Unknown Client'}<br>
      <strong>Clearance Date:</strong> ${data.clearanceDate ? new Date(data.clearanceDate).toLocaleDateString('en-GB') : 'Unknown Date'}<br>
      <strong>Clearance Type:</strong> ${data.clearanceType || 'Non-friable'}<br>
      <strong>LAA:</strong> ${data.LAA || 'Unknown LAA'}
    </div>
  </div>

  <div class="section">
    <div class="section-title">Clearance Items</div>
    <div class="content">
      ${data.clearanceItems && data.clearanceItems.length > 0 ? `
        <table class="table">
          <thead>
            <tr>
              <th>Item</th>
              <th>Location</th>
              <th>Material Description</th>
              <th>Asbestos Type</th>
            </tr>
          </thead>
          <tbody>
            ${data.clearanceItems.map(item => `
              <tr>
                <td>${item.itemDescription || 'N/A'}</td>
                <td>${item.locationDescription || 'N/A'}</td>
                <td>${item.materialDescription || 'N/A'}</td>
                <td>${item.asbestosType || 'non-friable'}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      ` : '<p>No clearance items found.</p>'}
    </div>
  </div>

  <div class="section">
    <div class="section-title">Clearance Certification</div>
    <div class="content">
      <p>This certificate confirms that the asbestos removal work has been completed satisfactorily and the area is safe for re-occupation.</p>
      <p><strong>Certified by:</strong> ${data.LAA || 'Unknown LAA'}</p>
      <p><strong>Date:</strong> ${data.clearanceDate ? new Date(data.clearanceDate).toLocaleDateString('en-GB') : 'Unknown Date'}</p>
    </div>
  </div>

  <div class="footer">
    <p>Generated by Lancaster & Dickenson Consulting Pty Ltd</p>
    <p>This is a simplified clearance report for testing purposes.</p>
  </div>
</body>
</html>`;
};

// Simple PDF generation function
const generateSimplePDFWithBrowserless = async (htmlContent) => {
  try {
    console.log('[SIMPLE BROWSERLESS] Starting simple PDF generation...');
    
    // Get API key from environment variable
    const apiKey = process.env.BROWSERLESS_API_KEY;
    if (!apiKey) {
      throw new Error('BROWSERLESS_API_KEY environment variable not set');
    }
    
    // Browserless API endpoint
    const browserlessUrl = 'https://production-sfo.browserless.io/pdf?token=' + apiKey;
    
    console.log('[SIMPLE BROWSERLESS] Sending HTML to Browserless API...');
    console.log('[SIMPLE BROWSERLESS] HTML content length:', htmlContent.length);
    
    // Prepare the request to Browserless
    const response = await fetch(browserlessUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache'
      },
      body: JSON.stringify({
        html: htmlContent,
        options: {
          format: 'A4',
          margin: {
            top: '20mm',
            bottom: '20mm',
            left: '20mm',
            right: '20mm'
          },
          printBackground: true,
          displayHeaderFooter: false
        }
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('[SIMPLE BROWSERLESS] API Error:', response.status, errorText);
      throw new Error(`Browserless API error: ${response.status} - ${errorText}`);
    }
    
    const arrayBuffer = await response.arrayBuffer();
    const pdfBuffer = Buffer.from(arrayBuffer);
    console.log('[SIMPLE BROWSERLESS] PDF generated successfully, size:', pdfBuffer.length);
    
    return pdfBuffer;
    
  } catch (error) {
    console.error('[SIMPLE BROWSERLESS] Error generating PDF:', error);
    throw error;
  }
};

// Simple clearance route
router.post('/generate-simple-clearance', async (req, res) => {
  try {
    console.log('=== SIMPLE BROWSERLESS CLEARANCE ROUTE HIT ===');
    
    const { clearanceData } = req.body;
    
    if (!clearanceData) {
      return res.status(400).json({ error: 'Clearance data is required' });
    }

    console.log('Simple clearance data received for: ' + (clearanceData.projectId?.name || 'Unknown project'));
    
    // Generate simple HTML
    const htmlContent = generateSimpleClearanceHTML(clearanceData);
    console.log('Simple HTML generated, length:', htmlContent.length);
    
    // Generate PDF
    const pdfBuffer = await generateSimplePDFWithBrowserless(htmlContent);
    
    // Generate filename
    const fileName = `simple-clearance-${clearanceData.projectId?.name || 'report'}-${new Date().toISOString().split('T')[0]}.pdf`;
    
    // Set response headers
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
    res.setHeader('Content-Length', pdfBuffer.length);
    
    console.log('Simple PDF generated successfully, sending response...');
    res.send(pdfBuffer);
    
  } catch (error) {
    console.error('Error generating simple clearance PDF:', error);
    res.status(500).json({ error: error.message });
  }
});

// Test endpoint
router.get('/test-simple', (req, res) => {
  res.json({ 
    message: 'Simple Browserless route is working',
    timestamp: new Date().toISOString(),
    apiKey: process.env.BROWSERLESS_API_KEY ? 'Set' : 'Not set'
  });
});

module.exports = router; 