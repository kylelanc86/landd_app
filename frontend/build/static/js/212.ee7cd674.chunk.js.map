{"version":3,"file":"static/js/212.ee7cd674.chunk.js","mappings":"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","sources":["components/TruncatedCell.jsx","scenes/projects/index.jsx","hooks/useJobStatus.js"],"sourcesContent":["import React from 'react';\r\nimport { Box, Typography, Tooltip } from '@mui/material';\r\n\r\nconst TruncatedCell = ({ value, tooltip = true }) => {\r\n  if (!value) return null;\r\n\r\n  const content = (\r\n    <Box\r\n      sx={{\r\n        width: '100%',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        whiteSpace: 'nowrap',\r\n      }}\r\n    >\r\n      <Typography variant=\"body2\" noWrap>\r\n        {value}\r\n      </Typography>\r\n    </Box>\r\n  );\r\n\r\n  if (tooltip) {\r\n    return (\r\n      <Tooltip title={value} placement=\"top\">\r\n        {content}\r\n      </Tooltip>\r\n    );\r\n  }\r\n\r\n  return content;\r\n};\r\n\r\nexport default TruncatedCell; ","import React, {\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n  useMemo,\r\n  useRef,\r\n} from \"react\";\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  FormControl,\r\n  Chip,\r\n  Stack,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  DialogContentText,\r\n  Menu,\r\n  Divider,\r\n  Checkbox,\r\n  ListItemText,\r\n  InputAdornment,\r\n  Switch,\r\n  FormControlLabel,\r\n  Autocomplete,\r\n  Grid,\r\n  Avatar,\r\n  Tooltip,\r\n  Alert,\r\n  LinearProgress,\r\n  CircularProgress,\r\n  Popover,\r\n  List,\r\n  ListItem,\r\n  ListItemButton,\r\n  ListItemIcon,\r\n} from \"@mui/material\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport TableSortLabel from \"@mui/material/TableSortLabel\";\r\nimport {\r\n  JOB_STATUS,\r\n  ACTIVE_STATUSES,\r\n  INACTIVE_STATUSES,\r\n  StatusChip,\r\n  UserAvatar,\r\n} from \"../../components/JobStatus\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { useTheme } from \"@mui/material\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport {\r\n  projectService,\r\n  clientService,\r\n  userService,\r\n  userPreferencesService,\r\n} from \"../../services/api\";\r\nimport Header from \"../../components/Header\";\r\nimport { tokens } from \"../../theme\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { useJobStatus } from \"../../hooks/useJobStatus\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport PersonIcon from \"@mui/icons-material/Person\";\r\nimport { usePermissions } from \"../../hooks/usePermissions\";\r\nimport TruncatedCell from \"../../components/TruncatedCell\";\r\nimport { Visibility, MoreVert } from \"@mui/icons-material\";\r\nimport VisibilityIcon from \"@mui/icons-material/Visibility\";\r\nimport performanceMonitor from \"../../utils/performanceMonitor\";\r\nimport { debounce } from \"lodash\";\r\nimport DownloadIcon from \"@mui/icons-material/Download\";\r\nimport ViewColumnIcon from \"@mui/icons-material/ViewColumn\";\r\nimport loadGoogleMapsApi from \"../../utils/loadGoogleMapsApi\";\r\n\r\nconst PROJECTS_KEY = \"ldc_projects\";\r\nconst USERS_KEY = \"ldc_users\";\r\n\r\nconst PROJECT_TYPES = [\r\n  \"air_quality\",\r\n  \"water_quality\",\r\n  \"soil_analysis\",\r\n  \"other\",\r\n];\r\n\r\nconst DEPARTMENTS = [\r\n  \"Asbestos & HAZMAT\",\r\n  \"Occupational Hygiene\",\r\n  \"Client Supplied\",\r\n];\r\n\r\nconst CATEGORIES = [\r\n  \"Asbestos Materials Assessment\",\r\n  \"Asbestos & Lead Paint Assessment\",\r\n  \"Lead Paint/Dust Assessment\",\r\n  \"Air Monitoring and Clearance\",\r\n  \"Clearance Certificate\",\r\n  \"Commercial Asbestos Management Plan\",\r\n  \"Hazardous Materials Management Plan\",\r\n  \"Residential Asbestos Survey\",\r\n  \"Silica Air Monitoring\",\r\n  \"Mould/Moisture Assessment\",\r\n  \"Other\",\r\n];\r\n\r\nconst emptyForm = {\r\n  name: \"\",\r\n  client: \"\",\r\n  department: DEPARTMENTS[0],\r\n  categories: [],\r\n  address: \"\",\r\n  d_Date: \"\",\r\n  workOrder: \"\",\r\n  users: [],\r\n  status: ACTIVE_STATUSES[0],\r\n  notes: \"\",\r\n  projectContact: {\r\n    name: \"\",\r\n    number: \"\",\r\n    email: \"\",\r\n  },\r\n};\r\n\r\nconst EditableStatusCell = ({ project, onStatusChange }) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const handleStatusSelect = (newStatus) => {\r\n    onStatusChange(project.id, newStatus);\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <TableCell>\r\n      <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 1 }}>\r\n        <Box\r\n          onClick={handleClick}\r\n          sx={{\r\n            cursor: \"pointer\",\r\n            \"&:hover\": {\r\n              opacity: 0.8,\r\n            },\r\n          }}\r\n        >\r\n          <StatusChip status={project.status} />\r\n        </Box>\r\n        <Menu\r\n          anchorEl={anchorEl}\r\n          open={isEditing}\r\n          onClose={handleClose}\r\n          PaperProps={{\r\n            sx: {\r\n              maxHeight: 300,\r\n              width: 250,\r\n            },\r\n          }}\r\n        >\r\n          <MenuItem disabled>\r\n            <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n              Active Jobs\r\n            </Typography>\r\n          </MenuItem>\r\n          {ACTIVE_STATUSES.map((status) => (\r\n            <MenuItem\r\n              key={status}\r\n              onClick={() => handleStatusSelect(status)}\r\n              selected={project.status === status}\r\n            >\r\n              <StatusChip status={status} />\r\n            </MenuItem>\r\n          ))}\r\n          <Divider />\r\n          <MenuItem disabled>\r\n            <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n              Inactive Jobs\r\n            </Typography>\r\n          </MenuItem>\r\n          {INACTIVE_STATUSES.map((status) => (\r\n            <MenuItem\r\n              key={status}\r\n              onClick={() => handleStatusSelect(status)}\r\n              selected={project.status === status}\r\n            >\r\n              <StatusChip status={status} />\r\n            </MenuItem>\r\n          ))}\r\n        </Menu>\r\n      </Box>\r\n    </TableCell>\r\n  );\r\n};\r\n\r\n// Update the ProjectIdDisplay component to ensure proper formatting\r\nconst ProjectIdDisplay = ({ projectId }) => {\r\n  // Ensure projectId is a number and format it\r\n  const formattedId =\r\n    typeof projectId === \"number\" ? projectId : parseInt(projectId);\r\n  return (\r\n    <Typography\r\n      variant=\"body1\"\r\n      sx={{\r\n        color: \"text.secondary\",\r\n        mb: 2,\r\n        fontFamily: \"monospace\",\r\n        fontSize: \"1.1rem\",\r\n      }}\r\n    >\r\n      Project ID: {`LDJ${String(formattedId).padStart(5, \"0\")}`}\r\n    </Typography>\r\n  );\r\n};\r\n\r\n// Helper functions outside the component\r\nconst generateProjectId = (projects) => {\r\n  if (projects.length === 0) return 1;\r\n\r\n  // Find the highest existing project ID\r\n  const highestId = Math.max(\r\n    ...projects.map((project) => {\r\n      // Convert any existing IDs to numbers and get the numeric part\r\n      const idStr = String(project.id);\r\n      const numericPart = parseInt(idStr.replace(/\\D/g, \"\"));\r\n      return isNaN(numericPart) ? 0 : numericPart;\r\n    })\r\n  );\r\n  return highestId + 1;\r\n};\r\n\r\nconst resetProjectIds = (projects) => {\r\n  return projects.map((project, index) => ({\r\n    ...project,\r\n    id: index + 1, // Start fresh from 1\r\n  }));\r\n};\r\n\r\nconst StatusCell = ({ params, onStatusChange }) => {\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const { can } = usePermissions();\r\n\r\n  const handleClick = (event) => {\r\n    if (!can(\"projects.change_status\")) {\r\n      return;\r\n    }\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleStatusSelect = async (newStatus) => {\r\n    if (!can(\"projects.change_status\")) {\r\n      return;\r\n    }\r\n    await onStatusChange(params.row.id, newStatus);\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 1 }}>\r\n      <Box\r\n        onClick={handleClick}\r\n        sx={{\r\n          cursor: can(\"projects.change_status\") ? \"pointer\" : \"default\",\r\n          opacity: can(\"projects.change_status\") ? 1 : 0.7,\r\n          \"&:hover\": {\r\n            opacity: can(\"projects.change_status\") ? 0.8 : 0.7,\r\n          },\r\n        }}\r\n      >\r\n        <StatusChip status={params.row.status} />\r\n      </Box>\r\n      <Menu\r\n        anchorEl={anchorEl}\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n        PaperProps={{\r\n          sx: {\r\n            maxHeight: 300,\r\n            width: 250,\r\n          },\r\n        }}\r\n      >\r\n        <MenuItem disabled>\r\n          <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n            Active Jobs\r\n          </Typography>\r\n        </MenuItem>\r\n        {ACTIVE_STATUSES.map((status) => (\r\n          <MenuItem\r\n            key={status}\r\n            onClick={() => handleStatusSelect(status)}\r\n            selected={params.row.status === status}\r\n          >\r\n            <StatusChip status={status} />\r\n          </MenuItem>\r\n        ))}\r\n        <Divider />\r\n        <MenuItem disabled>\r\n          <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n            Inactive Jobs\r\n          </Typography>\r\n        </MenuItem>\r\n        {INACTIVE_STATUSES.map((status) => (\r\n          <MenuItem\r\n            key={status}\r\n            onClick={() => handleStatusSelect(status)}\r\n            selected={params.row.status === status}\r\n          >\r\n            <StatusChip status={status} />\r\n          </MenuItem>\r\n        ))}\r\n      </Menu>\r\n    </Box>\r\n  );\r\n};\r\n\r\n// Update the getInitials function\r\nconst getInitials = (user) => {\r\n  if (!user) return \"\";\r\n\r\n  let name = \"\";\r\n  if (user.firstName && user.lastName) {\r\n    name = `${user.firstName} ${user.lastName}`;\r\n  } else if (user.name) {\r\n    name = user.name;\r\n  } else {\r\n    return \"\";\r\n  }\r\n\r\n  return name\r\n    .split(\" \")\r\n    .map((word) => word[0])\r\n    .join(\"\")\r\n    .toUpperCase();\r\n};\r\n\r\n// Update the getRandomColor function to be more robust\r\nconst getRandomColor = (user) => {\r\n  // A more diverse and visually pleasing color palette\r\n  const colors = [\r\n    \"#FF6B6B\", // coral red\r\n    \"#4ECDC4\", // turquoise\r\n    \"#45B7D1\", // sky blue\r\n    \"#96CEB4\", // sage green\r\n    \"#FFD93D\", // golden yellow\r\n    \"#FF8B94\", // soft pink\r\n    \"#6C5CE7\", // purple\r\n    \"#00B894\", // mint green\r\n    \"#FDCB6E\", // amber\r\n    \"#E17055\", // terracotta\r\n    \"#0984E3\", // ocean blue\r\n    \"#6C5CE7\", // royal purple\r\n    \"#00B894\", // emerald\r\n    \"#FDCB6E\", // marigold\r\n    \"#E17055\", // rust\r\n    \"#00CEC9\", // teal\r\n    \"#FF7675\", // salmon\r\n    \"#74B9FF\", // light blue\r\n    \"#A29BFE\", // lavender\r\n    \"#55EFC4\", // mint\r\n  ];\r\n\r\n  // Create a consistent hash from the user's name or ID\r\n  let identifier;\r\n  if (user.name) {\r\n    identifier = user.name;\r\n  } else if (user.firstName && user.lastName) {\r\n    identifier = `${user.firstName} ${user.lastName}`;\r\n  } else if (user._id) {\r\n    identifier = user._id;\r\n  } else {\r\n    identifier = Math.random().toString();\r\n  }\r\n\r\n  // Create a hash from the identifier\r\n  const hash = identifier.split(\"\").reduce((acc, char) => {\r\n    return char.charCodeAt(0) + ((acc << 5) - acc);\r\n  }, 0);\r\n\r\n  // Use the hash to select a color\r\n  const index = Math.abs(hash) % 20;\r\n  return colors[index];\r\n};\r\n\r\n// Helper to get a color for a given status\r\nconst getStatusColor = (status) => {\r\n  switch (status) {\r\n    case \"Assigned\":\r\n      return \"#1976d2\"; // Blue\r\n    case \"In progress\":\r\n      return \"#ed6c02\"; // Orange\r\n    case \"Samples submitted\":\r\n      return \"#9c27b0\"; // Purple\r\n    case \"Lab Analysis Complete\":\r\n      return \"#2e7d32\"; // Green\r\n    case \"Report sent for review\":\r\n      return \"#d32f2f\"; // Red\r\n    case \"Ready for invoicing\":\r\n      return \"#7b1fa2\"; // Deep Purple\r\n    case \"Invoice sent\":\r\n      return \"#388e3c\"; // Dark Green\r\n    case \"Job complete\":\r\n      return \"#424242\"; // Grey\r\n    case \"On hold\":\r\n      return \"#f57c00\"; // Dark Orange\r\n    case \"Quote sent\":\r\n      return \"#1976d2\"; // Blue\r\n    case \"Cancelled\":\r\n      return \"#d32f2f\"; // Red\r\n    default:\r\n      return \"#757575\"; // Default grey\r\n  }\r\n};\r\n\r\n// Helper function to calculate days difference\r\nconst calculateDaysDifference = (dueDate) => {\r\n  if (!dueDate) return null;\r\n\r\n  const today = new Date();\r\n  today.setHours(0, 0, 0, 0); // Reset time to start of day\r\n\r\n  const due = new Date(dueDate);\r\n  due.setHours(0, 0, 0, 0); // Reset time to start of day\r\n\r\n  const diffTime = due.getTime() - today.getTime();\r\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n  return diffDays;\r\n};\r\n\r\n// Main Projects component\r\nconst Projects = () => {\r\n  const theme = useTheme();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { renderStatusCell, renderStatusSelect, renderEditStatusCell } =\r\n    useJobStatus() || {};\r\n  const [projects, setProjects] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchLoading, setSearchLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n  const [selectedProject, setSelectedProject] = useState(null);\r\n  const [form, setForm] = useState(emptyForm);\r\n  const [clients, setClients] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [loadingUsers, setLoadingUsers] = useState(true);\r\n  const [pagination, setPagination] = useState({\r\n    page: 1,\r\n    limit: 100,\r\n    total: 0,\r\n    pages: 0,\r\n  });\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [departmentFilter, setDepartmentFilter] = useState(\"all\");\r\n  const [statusFilter, setStatusFilter] = useState(\"all\");\r\n  const [sortModel, setSortModel] = useState([\r\n    { field: \"projectID\", sort: \"desc\" },\r\n  ]);\r\n  const [newClient, setNewClient] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    address: \"\",\r\n    invoiceEmail: \"\",\r\n    contact1Name: \"\",\r\n    contact1Number: \"\",\r\n    contact1Email: \"\",\r\n    contact2Name: \"\",\r\n    contact2Number: \"\",\r\n    contact2Email: \"\",\r\n  });\r\n  const [clientDialogOpen, setClientDialogOpen] = useState(false);\r\n  const [menuAnchor, setMenuAnchor] = useState(null);\r\n  const [columnVisibilityModel, setColumnVisibilityModel] = useState({\r\n    projectID: true,\r\n    name: true,\r\n    client: true,\r\n    d_Date: true,\r\n    status: true,\r\n    department: false, // Hide department column by default\r\n    workOrder: false, // Hide work order column by default\r\n    users: true,\r\n    createdAt: false, // Hide by default\r\n    updatedAt: false,\r\n  });\r\n  const [showInactive, setShowInactive] = useState(false);\r\n  const [selectedDepartment, setSelectedDepartment] = useState(() => {\r\n    // Load selected department from filters\r\n    const savedFilters = localStorage.getItem(\"projects-filters\");\r\n    if (savedFilters) {\r\n      try {\r\n        const parsedFilters = JSON.parse(savedFilters);\r\n        if (\r\n          parsedFilters.departmentFilter &&\r\n          parsedFilters.departmentFilter !== \"all\"\r\n        ) {\r\n          return parsedFilters.departmentFilter;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error parsing saved department filter:\", error);\r\n      }\r\n    }\r\n    return \"All\";\r\n  });\r\n  const [paginationModel, setPaginationModel] = useState({\r\n    pageSize: 50,\r\n    page: 0,\r\n  });\r\n\r\n  // Add state for column visibility dropdown\r\n  const [columnVisibilityAnchor, setColumnVisibilityAnchor] = useState(null);\r\n\r\n  // Use refs to track component state\r\n  const isInitialLoadRef = useRef(true);\r\n  const hasFetchedRef = useRef(false);\r\n  const pageLoadTimerRef = useRef(null);\r\n  const renderStartTimeRef = useRef(null);\r\n\r\n  // Add ref to track current search term to prevent unnecessary API calls\r\n  const searchTermRef = useRef(searchTerm);\r\n  searchTermRef.current = searchTerm;\r\n\r\n  // Add ref to track search input focus\r\n  const searchInputRef = useRef(null);\r\n  const [searchFocused, setSearchFocused] = useState(false);\r\n\r\n  // Google Places Autocomplete state\r\n  const [addressInput, setAddressInput] = useState(\"\");\r\n  const [addressOptions, setAddressOptions] = useState([]);\r\n  const [isAddressLoading, setIsAddressLoading] = useState(false);\r\n  const [autocompleteService, setAutocompleteService] = useState(null);\r\n  const [placesService, setPlacesService] = useState(null);\r\n  const [googleMaps, setGoogleMaps] = useState(null);\r\n\r\n  const [clientInputValue, setClientInputValue] = useState(\"\");\r\n\r\n  // Start page load monitoring only on initial load\r\n  useEffect(() => {\r\n    if (isInitialLoadRef.current) {\r\n      pageLoadTimerRef.current =\r\n        performanceMonitor.startPageLoad(\"projects-page\");\r\n      isInitialLoadRef.current = false;\r\n    }\r\n  }, []);\r\n\r\n  // Initialize Google Places Autocomplete\r\n  useEffect(() => {\r\n    const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\r\n    console.log(\"Projects - Environment variables:\", {\r\n      REACT_APP_GOOGLE_MAPS_API_KEY: apiKey\r\n        ? \"API Key Found\"\r\n        : \"API Key Missing\",\r\n      NODE_ENV: process.env.NODE_ENV,\r\n    });\r\n\r\n    if (!apiKey) {\r\n      console.error(\r\n        \"Google Maps API key is missing. Please check your .env file.\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    loadGoogleMapsApi(apiKey)\r\n      .then((google) => {\r\n        console.log(\"Projects - Google Maps loaded successfully\");\r\n        setGoogleMaps(google);\r\n        // Initialize the autocomplete service\r\n        const autocompleteService =\r\n          new google.maps.places.AutocompleteService();\r\n        const placesService = new google.maps.places.PlacesService(\r\n          document.createElement(\"div\")\r\n        );\r\n        setAutocompleteService(autocompleteService);\r\n        setPlacesService(placesService);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Projects - Error loading Google Maps script:\", error);\r\n      });\r\n  }, []);\r\n\r\n  // Google Places Autocomplete handlers\r\n  const handleAddressInputChange = async (value) => {\r\n    setAddressInput(value);\r\n\r\n    if (!value || value.length < 3 || !autocompleteService || !googleMaps) {\r\n      setAddressOptions([]);\r\n      return;\r\n    }\r\n\r\n    setIsAddressLoading(true);\r\n    try {\r\n      autocompleteService.getPlacePredictions(\r\n        {\r\n          input: value,\r\n          componentRestrictions: { country: \"au\" },\r\n          types: [\"address\"],\r\n        },\r\n        (predictions, status) => {\r\n          console.log(\r\n            \"Projects - Address predictions:\",\r\n            predictions,\r\n            \"Status:\",\r\n            status\r\n          );\r\n          if (\r\n            status === googleMaps.maps.places.PlacesServiceStatus.OK &&\r\n            predictions\r\n          ) {\r\n            setAddressOptions(predictions);\r\n          } else {\r\n            console.log(\"Projects - No predictions found or error:\", status);\r\n            setAddressOptions([]);\r\n          }\r\n          setIsAddressLoading(false);\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Projects - Error fetching address predictions:\", error);\r\n      setAddressOptions([]);\r\n      setIsAddressLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAddressSelect = async (placeId) => {\r\n    if (!placeId || !placesService || !googleMaps) return;\r\n\r\n    try {\r\n      placesService.getDetails(\r\n        {\r\n          placeId: placeId,\r\n          fields: [\"formatted_address\", \"geometry\", \"address_components\"],\r\n        },\r\n        (place, status) => {\r\n          console.log(\"Projects - Selected place:\", place, \"Status:\", status);\r\n          if (\r\n            status === googleMaps.maps.places.PlacesServiceStatus.OK &&\r\n            place\r\n          ) {\r\n            setForm((prev) => ({\r\n              ...prev,\r\n              address: place.formatted_address,\r\n            }));\r\n            setAddressInput(place.formatted_address);\r\n          } else {\r\n            console.error(\"Projects - Error getting place details:\", status);\r\n          }\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Projects - Error getting place details:\", error);\r\n    }\r\n  };\r\n\r\n  // Monitor data rendering\r\n  useEffect(() => {\r\n    if (!loading && projects.length > 0) {\r\n      renderStartTimeRef.current = performance.now();\r\n      performanceMonitor.startTimer(\"data-render\");\r\n    }\r\n  }, [loading, projects]);\r\n\r\n  const handleRenderComplete = useCallback(() => {\r\n    if (renderStartTimeRef.current) {\r\n      performanceMonitor.endTimer(\"data-render\");\r\n      renderStartTimeRef.current = null;\r\n    }\r\n  }, []);\r\n\r\n  // Combine all filters into a single state object to prevent multiple useEffect triggers\r\n  const [filters, setFilters] = useState(() => {\r\n    // Load filters from localStorage and URL parameters\r\n    const savedFilters = localStorage.getItem(\"projects-filters\");\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n\r\n    const defaultFilters = {\r\n      searchTerm: \"\",\r\n      departmentFilter: \"all\",\r\n      statusFilter: \"all\",\r\n      sortModel: [{ field: \"projectID\", sort: \"desc\" }],\r\n    };\r\n\r\n    // Read status and active from URL\r\n    const urlStatus = urlParams.get(\"status\");\r\n    const urlActive = urlParams.get(\"active\");\r\n\r\n    if (savedFilters) {\r\n      try {\r\n        const parsedFilters = JSON.parse(savedFilters);\r\n        return {\r\n          ...defaultFilters,\r\n          ...parsedFilters,\r\n          // Override with URL parameters if they exist\r\n          searchTerm: urlParams.get(\"search\") || parsedFilters.searchTerm || \"\",\r\n          departmentFilter:\r\n            urlParams.get(\"department\") ||\r\n            parsedFilters.departmentFilter ||\r\n            \"all\",\r\n          statusFilter:\r\n            urlStatus ||\r\n            urlParams.get(\"status\") ||\r\n            parsedFilters.statusFilter ||\r\n            \"all\",\r\n        };\r\n      } catch (error) {\r\n        console.error(\"Error parsing saved filters:\", error);\r\n        return {\r\n          ...defaultFilters,\r\n          statusFilter: urlStatus || defaultFilters.statusFilter,\r\n        };\r\n      }\r\n    }\r\n    return {\r\n      ...defaultFilters,\r\n      statusFilter: urlStatus || defaultFilters.statusFilter,\r\n    };\r\n  });\r\n\r\n  // Add ref to track current filters state to avoid stale closures\r\n  const filtersRef = useRef(filters);\r\n  filtersRef.current = filters;\r\n\r\n  // Function to save filters to localStorage and update URL\r\n  const saveFilters = useCallback((newFilters) => {\r\n    localStorage.setItem(\"projects-filters\", JSON.stringify(newFilters));\r\n\r\n    // Update URL parameters\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    if (newFilters.searchTerm) {\r\n      urlParams.set(\"search\", newFilters.searchTerm);\r\n    } else {\r\n      urlParams.delete(\"search\");\r\n    }\r\n    if (newFilters.departmentFilter !== \"all\") {\r\n      urlParams.set(\"department\", newFilters.departmentFilter);\r\n    } else {\r\n      urlParams.delete(\"department\");\r\n    }\r\n    if (newFilters.statusFilter !== \"all\") {\r\n      urlParams.set(\"status\", newFilters.statusFilter);\r\n    } else {\r\n      urlParams.delete(\"status\");\r\n    }\r\n\r\n    // Update URL without reloading the page\r\n    window.history.replaceState(\r\n      {},\r\n      \"\",\r\n      `${window.location.pathname}${\r\n        urlParams.toString() ? \"?\" + urlParams.toString() : \"\"\r\n      }`\r\n    );\r\n  }, []);\r\n\r\n  // Update individual filter functions to use the combined state\r\n  const updateFilter = useCallback(\r\n    (filterType, value) => {\r\n      console.log(\"🔍 updateFilter called with:\", filterType, value);\r\n      setFilters((prev) => {\r\n        const newFilters = {\r\n          ...prev,\r\n          [filterType]: value,\r\n        };\r\n        console.log(\"🔍 New filters state:\", newFilters);\r\n        // Save filters whenever they change\r\n        saveFilters(newFilters);\r\n        return newFilters;\r\n      });\r\n    },\r\n    [saveFilters]\r\n  );\r\n\r\n  // Function to fetch projects with pagination\r\n  const fetchProjectsWithPagination = useCallback(\r\n    async (\r\n      paginationModel,\r\n      searchValue = filtersRef.current.searchTerm,\r\n      isSearch = false,\r\n      currentFilters = null\r\n    ) => {\r\n      console.log(\"🔍 fetchProjectsWithPagination called with:\");\r\n      console.log(\"  - searchValue:\", searchValue);\r\n      console.log(\"  - isSearch:\", isSearch);\r\n      console.log(\"  - currentFilters:\", currentFilters);\r\n      console.log(\"  - current filters state:\", filtersRef.current);\r\n\r\n      // Use current filters state if currentFilters is null (for search operations)\r\n      const filtersToUse = currentFilters || filtersRef.current;\r\n      console.log(\"🔍 filtersToUse:\", filtersToUse);\r\n      try {\r\n        if (isSearch) {\r\n          setSearchLoading(true);\r\n        } else {\r\n          setLoading(true);\r\n        }\r\n\r\n        const params = {\r\n          page: paginationModel.page + 1,\r\n          limit: paginationModel.pageSize,\r\n          sortBy: filtersToUse.sortModel[0]?.field || \"createdAt\",\r\n          sortOrder: filtersToUse.sortModel[0]?.sort || \"desc\",\r\n        };\r\n\r\n        // Add search term if provided\r\n        if (searchValue) {\r\n          params.search = searchValue;\r\n          console.log(\"🔍 Added search param:\", searchValue);\r\n        }\r\n\r\n        // Add department filter\r\n        if (filtersToUse.departmentFilter !== \"all\") {\r\n          params.department = filtersToUse.departmentFilter;\r\n        }\r\n\r\n        // Add status filter\r\n        if (filtersToUse.statusFilter !== \"all\") {\r\n          params.status = filtersToUse.statusFilter;\r\n        }\r\n\r\n        console.log(\"🔍 API call params:\", params);\r\n        const response = await projectService.getAll(params);\r\n        console.log(\"🔍 API response:\", response);\r\n\r\n        const projectsData = Array.isArray(response.data)\r\n          ? response.data\r\n          : response.data?.data || [];\r\n        console.log(\"🔍 Processed projectsData length:\", projectsData.length);\r\n\r\n        setProjects(projectsData);\r\n        setPagination({\r\n          total: response.data.pagination?.total || 0,\r\n          pages: response.data.pagination?.pages || 0,\r\n          page: paginationModel.page,\r\n          limit: paginationModel.pageSize,\r\n        });\r\n      } catch (err) {\r\n        console.error(\"Error fetching projects:\", err);\r\n        setError(err.message);\r\n        setProjects([]);\r\n      } finally {\r\n        setLoading(false);\r\n        setSearchLoading(false);\r\n      }\r\n    },\r\n    [] // Remove filters dependency since we now use ref to get current state\r\n  );\r\n\r\n  // Move fetchProjects here so it is defined after fetchProjectsWithPagination\r\n  const fetchProjects = useCallback(\r\n    async (isSearch = false) => {\r\n      // Use fetchProjectsWithPagination with current pagination model\r\n      return fetchProjectsWithPagination(\r\n        paginationModel,\r\n        filtersRef.current.searchTerm,\r\n        isSearch,\r\n        filtersRef.current\r\n      );\r\n    },\r\n    [fetchProjectsWithPagination, paginationModel]\r\n  );\r\n\r\n  // Debounced search handler\r\n  const debouncedSearch = useCallback(\r\n    debounce((value) => {\r\n      console.log(\"🔍 debouncedSearch triggered with value:\", value);\r\n      console.log(\"🔍 Current paginationModel:\", paginationModel);\r\n\r\n      setPaginationModel((prev) => ({ ...prev, page: 0 }));\r\n      // Use the new function with reset pagination\r\n      fetchProjectsWithPagination(\r\n        { page: 0, pageSize: paginationModel.pageSize },\r\n        value,\r\n        true,\r\n        null // Pass null to use current filters state inside fetchProjectsWithPagination\r\n      );\r\n    }, 150), // Reduced from 300ms to 150ms for better responsiveness\r\n    [fetchProjectsWithPagination, paginationModel.pageSize]\r\n  );\r\n\r\n  // Handle filter changes\r\n  const handleFilterChange = useCallback(\r\n    (filterType, value) => {\r\n      // Create a new function to fetch with updated filter values\r\n      const fetchWithUpdatedFilters = async () => {\r\n        try {\r\n          performanceMonitor.startTimer(\"fetch-projects\");\r\n          setSearchLoading(true);\r\n\r\n          // Create updated filters object with the new value\r\n          const updatedFilters = { ...filters };\r\n          switch (filterType) {\r\n            case \"department\":\r\n              updatedFilters.departmentFilter = value;\r\n              break;\r\n            case \"status\":\r\n              updatedFilters.statusFilter = value;\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n\r\n          const params = {\r\n            page: 1, // Reset to first page\r\n            limit: paginationModel.pageSize,\r\n            sortBy: updatedFilters.sortModel[0]?.field || \"createdAt\",\r\n            sortOrder: updatedFilters.sortModel[0]?.sort || \"desc\",\r\n          };\r\n\r\n          // Add search term if provided\r\n          if (updatedFilters.searchTerm) {\r\n            params.search = updatedFilters.searchTerm;\r\n          }\r\n\r\n          // Add department filter\r\n          if (updatedFilters.departmentFilter !== \"all\") {\r\n            params.department = updatedFilters.departmentFilter;\r\n          }\r\n\r\n          // Add status filter\r\n          if (updatedFilters.statusFilter !== \"all\") {\r\n            params.status = updatedFilters.statusFilter;\r\n          }\r\n\r\n          const response = await projectService.getAll(params);\r\n\r\n          const projectsData = Array.isArray(response.data)\r\n            ? response.data\r\n            : response.data?.data || [];\r\n\r\n          setProjects(projectsData);\r\n          setPagination((prev) => ({\r\n            ...prev,\r\n            total: response.data.pagination?.total || 0,\r\n            pages: response.data.pagination?.pages || 0,\r\n          }));\r\n        } catch (err) {\r\n          console.error(\"Error fetching projects:\", err);\r\n          setError(err.message);\r\n          setProjects([]);\r\n        } finally {\r\n          setSearchLoading(false);\r\n          performanceMonitor.endTimer(\"fetch-projects\");\r\n        }\r\n      };\r\n\r\n      // Update the appropriate filter\r\n      switch (filterType) {\r\n        case \"department\":\r\n          updateFilter(\"departmentFilter\", value);\r\n          break;\r\n        case \"status\":\r\n          updateFilter(\"statusFilter\", value);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      setPaginationModel((prev) => ({ ...prev, page: 0 }));\r\n\r\n      // Use the new function with updated filters\r\n      fetchWithUpdatedFilters();\r\n    },\r\n    [updateFilter, filters, paginationModel, fetchProjectsWithPagination]\r\n  );\r\n\r\n  // Function to clear all filters\r\n  const clearFilters = useCallback(() => {\r\n    const defaultFilters = {\r\n      searchTerm: \"\",\r\n      departmentFilter: \"all\",\r\n      statusFilter: \"all\",\r\n      sortModel: [{ field: \"projectID\", sort: \"desc\" }],\r\n    };\r\n\r\n    setFilters(defaultFilters);\r\n    setSelectedDepartment(\"All\");\r\n    setPaginationModel((prev) => ({ ...prev, page: 0 }));\r\n\r\n    // Clear localStorage and URL parameters\r\n    localStorage.removeItem(\"projects-filters\");\r\n    localStorage.removeItem(\"projects-column-visibility\");\r\n    window.history.replaceState({}, \"\", window.location.pathname);\r\n\r\n    // Reset column visibility to default\r\n    const defaultColumnVisibility = {\r\n      projectID: true,\r\n      name: true,\r\n      client: true,\r\n      d_Date: true,\r\n      status: true,\r\n      department: true,\r\n      users: true,\r\n      createdAt: false, // Hide by default\r\n      updatedAt: false,\r\n    };\r\n    setColumnVisibilityModel(defaultColumnVisibility);\r\n\r\n    // Trigger fetch with cleared filters\r\n    fetchProjectsWithPagination(\r\n      { page: 0, pageSize: paginationModel.pageSize },\r\n      \"\",\r\n      false,\r\n      defaultFilters\r\n    );\r\n  }, [fetchProjectsWithPagination, paginationModel.pageSize]);\r\n\r\n  // Handle search input change\r\n  const handleSearchChange = useCallback(\r\n    (event) => {\r\n      const value = event.target.value;\r\n      console.log(\"🔍 handleSearchChange called with value:\", value);\r\n\r\n      // Immediately update the search term in state for better UX\r\n      updateFilter(\"searchTerm\", value);\r\n      console.log(\r\n        \"🔍 After updateFilter, calling debouncedSearch with:\",\r\n        value\r\n      );\r\n\r\n      // Then trigger the debounced search with the current value\r\n      debouncedSearch(value);\r\n    },\r\n    [debouncedSearch, updateFilter]\r\n  );\r\n\r\n  // Fetch projects when pagination changes only\r\n  useEffect(() => {\r\n    // Removed automatic fetch to prevent double API calls\r\n    // All fetches are now triggered manually in search and filter handlers\r\n  }, [paginationModel]);\r\n\r\n  // Clear search term when component unmounts or when navigating away\r\n  useEffect(() => {\r\n    const handleBeforeUnload = () => {\r\n      // Clear search term from localStorage when leaving the page\r\n      const currentFilters = localStorage.getItem(\"projects-filters\");\r\n      if (currentFilters) {\r\n        try {\r\n          const parsedFilters = JSON.parse(currentFilters);\r\n          if (parsedFilters.searchTerm) {\r\n            parsedFilters.searchTerm = \"\";\r\n            localStorage.setItem(\r\n              \"projects-filters\",\r\n              JSON.stringify(parsedFilters)\r\n            );\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error clearing search term:\", error);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Listen for page unload/refresh\r\n    window.addEventListener(\"beforeunload\", handleBeforeUnload);\r\n\r\n    // Cleanup function to clear search term when component unmounts\r\n    return () => {\r\n      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\r\n\r\n      // Clear search term from state and localStorage\r\n      const currentFilters = localStorage.getItem(\"projects-filters\");\r\n      if (currentFilters) {\r\n        try {\r\n          const parsedFilters = JSON.parse(currentFilters);\r\n          if (parsedFilters.searchTerm) {\r\n            parsedFilters.searchTerm = \"\";\r\n            localStorage.setItem(\r\n              \"projects-filters\",\r\n              JSON.stringify(parsedFilters)\r\n            );\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error clearing search term on unmount:\", error);\r\n        }\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Restore focus to search input when search loading completes\r\n  useEffect(() => {\r\n    if (!searchLoading && searchFocused && searchInputRef.current) {\r\n      // Small delay to ensure the component has re-rendered\r\n      setTimeout(() => {\r\n        searchInputRef.current?.focus();\r\n      }, 50);\r\n    }\r\n  }, [searchLoading, searchFocused]);\r\n\r\n  // Handle page change\r\n  const handlePageChange = useCallback((newPage) => {\r\n    setPagination((prev) => ({ ...prev, page: newPage }));\r\n  }, []);\r\n\r\n  // Handle page size change\r\n  const handlePageSizeChange = useCallback((newPageSize) => {\r\n    setPagination((prev) => ({\r\n      ...prev,\r\n      limit: newPageSize,\r\n      page: 1, // Reset to first page when changing page size\r\n    }));\r\n  }, []);\r\n\r\n  // Handle sort change\r\n  const handleSortModelChange = useCallback(\r\n    (newSortModel) => {\r\n      updateFilter(\"sortModel\", newSortModel);\r\n    },\r\n    [updateFilter]\r\n  );\r\n\r\n  // Fetch clients and users when component mounts\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const clientsResponse = await clientService.getAll();\r\n        console.log(\"Clients response:\", clientsResponse);\r\n        console.log(\"Clients data:\", clientsResponse.data);\r\n        const clientsData =\r\n          clientsResponse.data.clients || clientsResponse.data;\r\n        console.log(\"Final clients array:\", clientsData);\r\n        console.log(\"Number of clients fetched:\", clientsData.length);\r\n        setClients(clientsData);\r\n      } catch (err) {\r\n        console.error(\"Error fetching clients:\", err);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Add useEffect to fetch users\r\n  useEffect(() => {\r\n    const fetchUsers = async () => {\r\n      try {\r\n        const token = localStorage.getItem(\"token\");\r\n        if (!token) {\r\n          console.error(\"No authentication token found\");\r\n          setLoadingUsers(false);\r\n          return;\r\n        }\r\n\r\n        const response = await userService.getAll();\r\n\r\n        // Filter out inactive users and transform the data\r\n        const activeUsers = response.data.filter(\r\n          (user) => user.isActive === true\r\n        );\r\n\r\n        const transformedUsers = activeUsers.map((user) => ({\r\n          ...user,\r\n          name: `${user.firstName} ${user.lastName}`,\r\n        }));\r\n\r\n        setUsers(transformedUsers);\r\n        setLoadingUsers(false);\r\n      } catch (err) {\r\n        console.error(\"Error fetching users:\", err);\r\n        setLoadingUsers(false);\r\n      }\r\n    };\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  // Initial fetch for projects when component mounts\r\n  useEffect(() => {\r\n    fetchProjects(false);\r\n  }, []); // Empty dependency array for initial load only\r\n\r\n  const handleEditSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const projectId = selectedProject?._id || selectedProject?.id;\r\n      if (!projectId) {\r\n        console.error(\"No project ID found for update\");\r\n        setError(\"Cannot update project: No project ID found\");\r\n        return;\r\n      }\r\n\r\n      const response = await projectService.update(projectId, form);\r\n      setProjects(\r\n        projects.map((p) => ((p._id || p.id) === projectId ? response.data : p))\r\n      );\r\n      setDialogOpen(false);\r\n      setSelectedProject(null);\r\n      setForm(emptyForm);\r\n    } catch (error) {\r\n      console.error(\"Error updating project:\", error);\r\n      setError(\"Failed to update project\");\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      console.log(\"=== SUBMITTING PROJECT FORM ===\");\r\n      console.log(\"Form data being sent:\", form);\r\n      console.log(\"Form data type:\", typeof form);\r\n      console.log(\"Client value:\", form.client);\r\n      console.log(\"Department value:\", form.department);\r\n      console.log(\"Users value:\", form.users);\r\n      console.log(\"===============================\");\r\n\r\n      const response = await projectService.create(form);\r\n      setProjects([...projects, response.data]);\r\n      setDialogOpen(false);\r\n      setForm(emptyForm);\r\n    } catch (error) {\r\n      console.error(\"Error creating project:\", error);\r\n      console.error(\"Error response:\", error.response?.data);\r\n      setError(\"Failed to create project\");\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setForm((prev) => {\r\n      if (name.includes(\"projectContact\")) {\r\n        const [_, field] = name.split(\".\");\r\n        return {\r\n          ...prev,\r\n          projectContact: {\r\n            ...prev.projectContact,\r\n            [field]: value,\r\n          },\r\n        };\r\n      }\r\n      return {\r\n        ...prev,\r\n        [name]: value,\r\n      };\r\n    });\r\n  };\r\n\r\n  const handleUsersChange = (event, newValue) => {\r\n    setForm((prev) => ({\r\n      ...prev,\r\n      users: newValue,\r\n    }));\r\n  };\r\n\r\n  const handleClientChange = (event, newValue) => {\r\n    setForm((prev) => ({\r\n      ...prev,\r\n      client: newValue ? newValue._id : \"\",\r\n    }));\r\n  };\r\n\r\n  const handleStatusChange = async (projectId, newStatus) => {\r\n    try {\r\n      const project = projects.find((p) => (p._id || p.id) === projectId);\r\n      if (!project) return;\r\n\r\n      const response = await projectService.update(projectId, {\r\n        ...project,\r\n        status: newStatus,\r\n      });\r\n\r\n      setProjects(\r\n        projects.map((p) => ((p._id || p.id) === projectId ? response.data : p))\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error updating project status:\", error);\r\n      setError(\"Failed to update project status\");\r\n    }\r\n  };\r\n\r\n  const handleRemoveUser = async (projectId, userId) => {\r\n    try {\r\n      const project = projects.find((p) => (p._id || p.id) === projectId);\r\n      if (!project) {\r\n        console.error(\"Project not found:\", projectId);\r\n        return;\r\n      }\r\n\r\n      const updatedUsers = project.users.filter((id) => id !== userId);\r\n      const response = await projectService.update(projectId, {\r\n        ...project,\r\n        users: updatedUsers,\r\n      });\r\n\r\n      setProjects(\r\n        projects.map((p) => ((p._id || p.id) === projectId ? response.data : p))\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error removing user:\", error);\r\n      setError(\"Failed to remove user from project\");\r\n    }\r\n  };\r\n\r\n  const handleDeleteProject = async () => {\r\n    try {\r\n      console.log(\"=== DELETING PROJECT ===\");\r\n      console.log(\"Selected project:\", selectedProject);\r\n      console.log(\r\n        \"Project ID to delete:\",\r\n        selectedProject?._id || selectedProject?.id\r\n      );\r\n      console.log(\"=========================\");\r\n\r\n      const projectId = selectedProject?._id || selectedProject?.id;\r\n      if (!projectId) {\r\n        console.error(\"No project ID found for deletion\");\r\n        setError(\"Cannot delete project: No project ID found\");\r\n        return;\r\n      }\r\n\r\n      await projectService.delete(projectId);\r\n      setProjects(projects.filter((p) => (p._id || p.id) !== projectId));\r\n      setDeleteDialogOpen(false);\r\n      setSelectedProject(null);\r\n    } catch (error) {\r\n      console.error(\"Error deleting project:\", error);\r\n      console.error(\"Error response:\", error.response?.data);\r\n      setError(\"Failed to delete project\");\r\n    }\r\n  };\r\n\r\n  // UsersCell component for rendering user avatars\r\n  const UsersCell = ({ users }) => {\r\n    if (!users || users.length === 0) {\r\n      return <span>-</span>;\r\n    }\r\n\r\n    return (\r\n      <Box sx={{ display: \"flex\", gap: 0.5 }}>\r\n        {users.map((user, index) => (\r\n          <Tooltip\r\n            key={user._id || index}\r\n            title={`${user.firstName} ${user.lastName}`}\r\n          >\r\n            <Avatar\r\n              sx={{\r\n                width: 24,\r\n                height: 24,\r\n                fontSize: \"0.75rem\",\r\n                bgcolor: getRandomColor(user),\r\n              }}\r\n            >\r\n              {getInitials(user)}\r\n            </Avatar>\r\n          </Tooltip>\r\n        ))}\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  // Update the renderUsersSelect function\r\n  const renderUsersSelect = (value, onChange, name) => {\r\n    // console.log(\"Rendering users select with:\", { value, users });\r\n\r\n    // Ensure value is always an array of user IDs\r\n    const selectedUserIds = Array.isArray(value) ? value : [];\r\n\r\n    // Filter out any inactive users from the selected values\r\n    const activeSelectedIds = selectedUserIds.filter((userId) =>\r\n      users.some((user) => user._id === userId && user.isActive === true)\r\n    );\r\n\r\n    return (\r\n      <FormControl fullWidth>\r\n        <InputLabel>Assigned Users</InputLabel>\r\n        <Select\r\n          multiple\r\n          name={name}\r\n          value={activeSelectedIds}\r\n          onChange={onChange}\r\n          label=\"Assigned Users\"\r\n          disabled={loadingUsers}\r\n          renderValue={(selected) => (\r\n            <Box sx={{ display: \"flex\", flexWrap: \"wrap\", gap: 0.5 }}>\r\n              {selected.map((userId) => {\r\n                const user = users.find((u) => u._id === userId);\r\n                if (!user) return null;\r\n                const displayName =\r\n                  user.name || `${user.firstName} ${user.lastName}`.trim();\r\n                return <Chip key={userId} label={displayName} size=\"small\" />;\r\n              })}\r\n            </Box>\r\n          )}\r\n        >\r\n          {users.map((user) => {\r\n            const displayName =\r\n              user.name || `${user.firstName} ${user.lastName}`.trim();\r\n            return (\r\n              <MenuItem key={user._id} value={user._id}>\r\n                {displayName}\r\n              </MenuItem>\r\n            );\r\n          })}\r\n        </Select>\r\n      </FormControl>\r\n    );\r\n  };\r\n\r\n  // Add function to handle new client creation\r\n  const handleNewClientSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await clientService.create(newClient);\r\n      setClients([...clients, response.data]);\r\n      setForm({ ...form, client: response.data._id });\r\n      setClientDialogOpen(false);\r\n      setNewClient({\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        address: \"\",\r\n        invoiceEmail: \"\",\r\n        contact1Name: \"\",\r\n        contact1Number: \"\",\r\n        contact1Email: \"\",\r\n        contact2Name: \"\",\r\n        contact2Number: \"\",\r\n        contact2Email: \"\",\r\n      });\r\n    } catch (err) {\r\n      if (err.response) {\r\n        alert(\r\n          `Error creating client: ${\r\n            err.response.data.message || \"Unknown error\"\r\n          }`\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMenuOpen = (event, data) => {\r\n    setMenuAnchor(event.currentTarget);\r\n    setSelectedProject(data);\r\n  };\r\n\r\n  // Handler for edit action\r\n  const handleEditClick = (project) => {\r\n    setSelectedProject(project);\r\n    setDialogOpen(true);\r\n  };\r\n\r\n  // Handler for delete action\r\n  const handleDeleteClick = (project) => {\r\n    setSelectedProject(project);\r\n    setDeleteDialogOpen(true);\r\n  };\r\n\r\n  const handleColumnVisibilityModelChange = useCallback((newModel) => {\r\n    setColumnVisibilityModel(newModel);\r\n  }, []);\r\n\r\n  // Add handlers for column visibility dropdown\r\n  const handleColumnVisibilityClick = (event) => {\r\n    setColumnVisibilityAnchor(event.currentTarget);\r\n  };\r\n\r\n  const handleColumnVisibilityClose = () => {\r\n    setColumnVisibilityAnchor(null);\r\n  };\r\n\r\n  const handleColumnToggle = async (field) => {\r\n    const newModel = {\r\n      ...columnVisibilityModel,\r\n      [field]: !columnVisibilityModel[field],\r\n    };\r\n\r\n    setColumnVisibilityModel(newModel);\r\n\r\n    try {\r\n      // Save to database\r\n      await userPreferencesService.updatePreferences({\r\n        columnVisibility: {\r\n          projects: newModel,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error saving column visibility preferences:\", error);\r\n      // Fallback to localStorage if API fails\r\n      localStorage.setItem(\r\n        \"projects-column-visibility\",\r\n        JSON.stringify(newModel)\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleDepartmentClick = (department) => {\r\n    // console.log(\"Department filter clicked:\", department);\r\n    setSelectedDepartment(department);\r\n\r\n    // Convert department name to filter value\r\n    const departmentValue = department === \"All\" ? \"all\" : department;\r\n\r\n    // Update the department filter using the existing filter update mechanism\r\n    updateFilter(\"departmentFilter\", departmentValue);\r\n    setPaginationModel((prev) => ({ ...prev, page: 0 }));\r\n\r\n    // Use the new function with reset pagination and updated department filter\r\n    // We need to create a temporary filters object with the new department value\r\n    const tempFilters = {\r\n      ...filters,\r\n      departmentFilter: departmentValue,\r\n    };\r\n\r\n    // Create a temporary fetch function that uses the updated department\r\n    const fetchWithUpdatedDepartment = async () => {\r\n      try {\r\n        performanceMonitor.startTimer(\"fetch-projects\");\r\n        setSearchLoading(true);\r\n\r\n        const params = {\r\n          page: 1, // Reset to first page\r\n          limit: paginationModel.pageSize,\r\n          sortBy: tempFilters.sortModel[0]?.field || \"createdAt\",\r\n          sortOrder: tempFilters.sortModel[0]?.sort || \"desc\",\r\n        };\r\n\r\n        // Add search term if provided\r\n        if (tempFilters.searchTerm) {\r\n          params.search = tempFilters.searchTerm;\r\n        }\r\n\r\n        // Add department filter\r\n        if (departmentValue !== \"all\") {\r\n          params.department = departmentValue;\r\n        }\r\n\r\n        // Handle status filters\r\n        if (tempFilters.statusFilter !== \"all\") {\r\n          params.status = tempFilters.statusFilter;\r\n        }\r\n\r\n        const response = await projectService.getAll(params);\r\n\r\n        const projectsData = Array.isArray(response.data)\r\n          ? response.data\r\n          : response.data?.data || [];\r\n\r\n        setProjects(projectsData);\r\n        setPagination((prev) => ({\r\n          ...prev,\r\n          total: response.data?.pagination?.total || 0,\r\n          pages: response.data?.pagination?.pages || 0,\r\n        }));\r\n      } catch (err) {\r\n        console.error(\"Error fetching projects:\", err);\r\n        setError(err.message);\r\n        setProjects([]);\r\n      } finally {\r\n        setSearchLoading(false);\r\n        performanceMonitor.endTimer(\"fetch-projects\");\r\n      }\r\n    };\r\n\r\n    // Execute the fetch immediately\r\n    fetchWithUpdatedDepartment();\r\n  };\r\n\r\n  // Handle pagination model change\r\n  const handlePaginationModelChange = useCallback(\r\n    (newModel) => {\r\n      setPaginationModel(newModel);\r\n      // Use the new function with the updated pagination model\r\n      fetchProjectsWithPagination(newModel, filters.searchTerm, false);\r\n    },\r\n    [fetchProjectsWithPagination, filters.searchTerm]\r\n  );\r\n\r\n  // Load user preferences from database\r\n  useEffect(() => {\r\n    const loadUserPreferences = async () => {\r\n      try {\r\n        const response = await userPreferencesService.getPreferences();\r\n        if (response.data?.columnVisibility?.projects) {\r\n          setColumnVisibilityModel(response.data.columnVisibility.projects);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error loading user preferences:\", error);\r\n        // Fallback to localStorage if API fails\r\n        const savedColumnVisibility = localStorage.getItem(\r\n          \"projects-column-visibility\"\r\n        );\r\n        if (savedColumnVisibility) {\r\n          try {\r\n            const parsed = JSON.parse(savedColumnVisibility);\r\n            setColumnVisibilityModel(parsed);\r\n          } catch (parseError) {\r\n            console.error(\"Error parsing saved column visibility:\", parseError);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    loadUserPreferences();\r\n  }, []);\r\n\r\n  // Memoize columns configuration\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        field: \"projectID\",\r\n        headerName: \"Project ID\",\r\n        flex: 0,\r\n        width: 105,\r\n        minWidth: 105,\r\n        maxWidth: 105,\r\n        renderCell: (params) => (\r\n          <Box\r\n            onClick={() => navigate(`/projects/${params.row._id}`)}\r\n            sx={{ cursor: \"pointer\" }}\r\n          >\r\n            {params.value}\r\n          </Box>\r\n        ),\r\n      },\r\n      {\r\n        field: \"name\",\r\n        headerName: \"Project Name\",\r\n        flex: 2,\r\n        minWidth: 190,\r\n        maxWidth: 400,\r\n\r\n        renderCell: ({ row }) => (\r\n          <Box\r\n            onClick={() => navigate(`/projects/${row._id}`)}\r\n            sx={{\r\n              cursor: \"pointer\",\r\n              \"&:hover\": { color: theme.palette.primary.main },\r\n              whiteSpace: \"normal\",\r\n              wordWrap: \"break-word\",\r\n              lineHeight: 1.2,\r\n              height: \"100%\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            {row.name}\r\n          </Box>\r\n        ),\r\n      },\r\n      {\r\n        field: \"workOrder\",\r\n        headerName: \"Work Order/Job Reference\",\r\n        flex: 1,\r\n        minWidth: 150,\r\n        hide: true, // Hidden by default\r\n      },\r\n      {\r\n        field: \"client\",\r\n        headerName: \"Client\",\r\n        flex: 1,\r\n        minWidth: 140,\r\n        maxWidth: 220,\r\n        renderCell: ({ row }) => (\r\n          <Typography\r\n            variant=\"body2\"\r\n            sx={{\r\n              whiteSpace: \"normal\",\r\n              wordWrap: \"break-word\",\r\n              lineHeight: 1.2,\r\n              maxHeight: \"2.4em\", // 2 lines * 1.2 line height\r\n              overflow: \"hidden\",\r\n              display: \"-webkit-box\",\r\n              WebkitLineClamp: 2,\r\n              WebkitBoxOrient: \"vertical\",\r\n              width: \"100%\",\r\n            }}\r\n          >\r\n            {row.client?.name || row.client || \"\"}\r\n          </Typography>\r\n        ),\r\n      },\r\n      {\r\n        field: \"d_Date\",\r\n        headerName: \"Due Date\",\r\n        flex: 1,\r\n        minWidth: 100,\r\n        maxWidth: 120,\r\n        renderCell: ({ row }) => {\r\n          const daysDiff = calculateDaysDifference(row.d_Date);\r\n\r\n          if (!row.d_Date) {\r\n            return (\r\n              <Typography\r\n                variant=\"body2\"\r\n                color=\"text.secondary\"\r\n                sx={{\r\n                  whiteSpace: \"normal\",\r\n                  wordWrap: \"break-word\",\r\n                  lineHeight: 1.2,\r\n                  maxHeight: \"2.4em\", // 2 lines * 1.2 line height\r\n                  overflow: \"hidden\",\r\n                  display: \"-webkit-box\",\r\n                  WebkitLineClamp: 2,\r\n                  WebkitBoxOrient: \"vertical\",\r\n                  width: \"100%\",\r\n                }}\r\n              >\r\n                No due date\r\n              </Typography>\r\n            );\r\n          }\r\n\r\n          if (daysDiff === 0) {\r\n            return (\r\n              <Typography\r\n                variant=\"body2\"\r\n                sx={{\r\n                  color: \"#f57c00\",\r\n                  fontWeight: \"bold\",\r\n                  whiteSpace: \"normal\",\r\n                  wordWrap: \"break-word\",\r\n                  lineHeight: 1.2,\r\n                  maxHeight: \"2.4em\",\r\n                  overflow: \"hidden\",\r\n                  display: \"-webkit-box\",\r\n                  WebkitLineClamp: 2,\r\n                  WebkitBoxOrient: \"vertical\",\r\n                  width: \"100%\",\r\n                }}\r\n              >\r\n                Due today\r\n              </Typography>\r\n            );\r\n          } else if (daysDiff < 0) {\r\n            return (\r\n              <Typography\r\n                variant=\"body2\"\r\n                sx={{\r\n                  color: \"#d32f2f\",\r\n                  fontWeight: \"bold\",\r\n                  whiteSpace: \"normal\",\r\n                  wordWrap: \"break-word\",\r\n                  lineHeight: 1.2,\r\n                  maxHeight: \"2.4em\",\r\n                  overflow: \"hidden\",\r\n                  display: \"-webkit-box\",\r\n                  WebkitLineClamp: 2,\r\n                  WebkitBoxOrient: \"vertical\",\r\n                  width: \"100%\",\r\n                }}\r\n              >\r\n                {Math.abs(daysDiff)} days overdue\r\n              </Typography>\r\n            );\r\n          } else {\r\n            return (\r\n              <Typography\r\n                variant=\"body2\"\r\n                sx={{\r\n                  color: \"#2e7d32\",\r\n                  whiteSpace: \"normal\",\r\n                  wordWrap: \"break-word\",\r\n                  lineHeight: 1.2,\r\n                  maxHeight: \"2.4em\",\r\n                  overflow: \"hidden\",\r\n                  display: \"-webkit-box\",\r\n                  WebkitLineClamp: 2,\r\n                  WebkitBoxOrient: \"vertical\",\r\n                  width: \"100%\",\r\n                }}\r\n              >\r\n                {daysDiff} days left\r\n              </Typography>\r\n            );\r\n          }\r\n        },\r\n      },\r\n      {\r\n        field: \"department\",\r\n        headerName: \"Department\",\r\n        flex: 1,\r\n      },\r\n      {\r\n        field: \"status\",\r\n        headerName: \"Status\",\r\n        flex: 1,\r\n        minWidth: 60,\r\n        maxWidth: 165,\r\n        renderCell: (params) => (\r\n          <Box\r\n            sx={{\r\n              backgroundColor: getStatusColor(params.value),\r\n              color: \"white\",\r\n              padding: \"4px 8px\",\r\n              borderRadius: \"4px\",\r\n              fontSize: \"0.75rem\",\r\n            }}\r\n          >\r\n            {params.value}\r\n          </Box>\r\n        ),\r\n      },\r\n      {\r\n        field: \"users\",\r\n        headerName: \"Users\",\r\n        flex: 1,\r\n        minWidth: 60,\r\n        maxWidth: 120,\r\n        renderCell: (params) => {\r\n          // Safety check to ensure UsersCell component is available\r\n          if (typeof UsersCell !== \"function\") {\r\n            return <span>-</span>;\r\n          }\r\n          return <UsersCell users={params.row.users} />;\r\n        },\r\n      },\r\n      {\r\n        field: \"actions\",\r\n        headerName: \"Actions\",\r\n        flex: 1,\r\n        minWidth: 120,\r\n        maxWidth: 160,\r\n        renderCell: (params) => (\r\n          <Box>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              startIcon={<VisibilityIcon />}\r\n              onClick={() => navigate(`/projects/${params.row._id}`)}\r\n              sx={{ mr: 1 }}\r\n            >\r\n              Details\r\n            </Button>\r\n            <IconButton\r\n              onClick={() => handleDeleteClick(params.row)}\r\n              size=\"small\"\r\n              color=\"error\"\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Box>\r\n        ),\r\n      },\r\n    ],\r\n    [navigate]\r\n  );\r\n\r\n  // Fallback renderStatusSelect function in case the hook doesn't return it\r\n  const safeRenderStatusSelect =\r\n    renderStatusSelect ||\r\n    ((value, onChange, label = \"Status\") => (\r\n      <FormControl fullWidth required>\r\n        <InputLabel>{label}</InputLabel>\r\n        <Select name=\"status\" value={value} onChange={onChange} label={label}>\r\n          <MenuItem disabled>\r\n            <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n              Active Jobs\r\n            </Typography>\r\n          </MenuItem>\r\n          {ACTIVE_STATUSES.map((status) => (\r\n            <MenuItem key={status} value={status}>\r\n              {status}\r\n            </MenuItem>\r\n          ))}\r\n          <Divider />\r\n          <MenuItem disabled>\r\n            <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n              Inactive Jobs\r\n            </Typography>\r\n          </MenuItem>\r\n          {INACTIVE_STATUSES.map((status) => (\r\n            <MenuItem key={status} value={status}>\r\n              {status}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    ));\r\n\r\n  // Fallback renderStatusCell function\r\n  const safeRenderStatusCell =\r\n    renderStatusCell ||\r\n    ((params) => (\r\n      <Box\r\n        sx={{\r\n          backgroundColor: getStatusColor(params.value),\r\n          color: \"white\",\r\n          padding: \"4px 8px\",\r\n          borderRadius: \"4px\",\r\n          fontSize: \"0.75rem\",\r\n        }}\r\n      >\r\n        {params.value}\r\n      </Box>\r\n    ));\r\n\r\n  // Fallback renderEditStatusCell function\r\n  const safeRenderEditStatusCell =\r\n    renderEditStatusCell ||\r\n    ((params) => (\r\n      <Box sx={{ width: \"100%\" }}>\r\n        <Select\r\n          value={params.value}\r\n          onChange={(e) => {\r\n            params.api.setEditCellValue(\r\n              {\r\n                id: params.id,\r\n                field: params.field,\r\n                value: e.target.value,\r\n              },\r\n              true\r\n            );\r\n          }}\r\n          sx={{ width: \"100%\" }}\r\n          size=\"small\"\r\n        >\r\n          {ACTIVE_STATUSES.map((status) => (\r\n            <MenuItem key={status} value={status}>\r\n              {status}\r\n            </MenuItem>\r\n          ))}\r\n          {INACTIVE_STATUSES.map((status) => (\r\n            <MenuItem key={status} value={status}>\r\n              {status}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </Box>\r\n    ));\r\n\r\n  if (loading) return <Typography>Loading projects...</Typography>;\r\n  if (error) return <Typography color=\"error\">{error}</Typography>;\r\n\r\n  // Ensure columns are properly defined before rendering\r\n  if (!columns || columns.length === 0) {\r\n    return <Typography>Loading columns...</Typography>;\r\n  }\r\n\r\n  return (\r\n    <Box m=\"5px 0px 20px 20px\">\r\n      {/* Search Loading Animation - Only shows during searches */}\r\n      {searchLoading && (\r\n        <Box sx={{ width: \"100%\", mb: 2 }}>\r\n          <LinearProgress\r\n            sx={{\r\n              height: 3,\r\n              borderRadius: 1.5,\r\n              backgroundColor: \"rgba(25, 118, 210, 0.1)\",\r\n              \"& .MuiLinearProgress-bar\": {\r\n                backgroundColor: \"#1976d2\",\r\n              },\r\n            }}\r\n          />\r\n        </Box>\r\n      )}\r\n\r\n      {/* Search and Filter Section */}\r\n      {/* Add Project Button - Full Width */}\r\n\r\n      <Box sx={{ mb: 2 }}>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={() => setDialogOpen(true)}\r\n          fullWidth\r\n          sx={{\r\n            backgroundColor: theme.palette.primary.main,\r\n            \"&:hover\": { backgroundColor: theme.palette.primary.dark },\r\n            height: 60,\r\n            fontSize: \"1.2rem\",\r\n            fontWeight: \"bold\",\r\n            border: \"2px solid rgb(83, 84, 85)\",\r\n            py: 2,\r\n          }}\r\n        >\r\n          <AddIcon sx={{ mr: 1 }} />\r\n          ADD PROJECT\r\n        </Button>\r\n      </Box>\r\n      <Box\r\n        mt=\"5px\"\r\n        mb=\"20px\"\r\n        sx={{\r\n          backgroundColor: \"background.paper\",\r\n          borderRadius: \"4px\",\r\n          boxShadow: \"0px 4px 8px rgba(0, 0, 0, 0.1)\",\r\n          p: 2,\r\n        }}\r\n      >\r\n        <Stack\r\n          direction=\"row\"\r\n          spacing={2}\r\n          alignItems=\"center\"\r\n          justifyContent=\"space-between\"\r\n        >\r\n          <Stack direction=\"row\" spacing={2} alignItems=\"center\">\r\n            {/* Search Input */}\r\n            <TextField\r\n              label=\"Search Projects\"\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              placeholder=\"Enter search term\"\r\n              value={filters.searchTerm}\r\n              onChange={handleSearchChange}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              sx={{ minWidth: 300 }}\r\n              ref={searchInputRef}\r\n              onFocus={() => {\r\n                setSearchFocused(true);\r\n              }}\r\n              onBlur={() => {\r\n                setSearchFocused(false);\r\n              }}\r\n            />\r\n\r\n            <FormControl size=\"small\" sx={{ minWidth: 200 }}>\r\n              <InputLabel>Status</InputLabel>\r\n              <Select\r\n                value={filters.statusFilter}\r\n                label=\"Status\"\r\n                onChange={(e) => handleFilterChange(\"status\", e.target.value)}\r\n              >\r\n                <MenuItem value=\"all\">All Statuses</MenuItem>\r\n                <MenuItem value=\"all_active\">Active</MenuItem>\r\n                <MenuItem value=\"all_inactive\">Inactive</MenuItem>\r\n                <Divider />\r\n                <MenuItem disabled>\r\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n                    Active Statuses\r\n                  </Typography>\r\n                </MenuItem>\r\n                {ACTIVE_STATUSES.map((status) => (\r\n                  <MenuItem key={status} value={status}>\r\n                    {status}\r\n                  </MenuItem>\r\n                ))}\r\n                <Divider />\r\n                <MenuItem disabled>\r\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n                    Inactive Statuses\r\n                  </Typography>\r\n                </MenuItem>\r\n                {INACTIVE_STATUSES.map((status) => (\r\n                  <MenuItem key={status} value={status}>\r\n                    {status}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n            {/* Column Visibility Button */}\r\n            <Button\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              startIcon={<ViewColumnIcon />}\r\n              onClick={handleColumnVisibilityClick}\r\n              sx={{\r\n                height: 40, // Match the height of other components\r\n                minWidth: 140,\r\n                color: theme.palette.primary.main,\r\n                borderColor: theme.palette.primary.main,\r\n                \"&:hover\": {\r\n                  backgroundColor: theme.palette.primary.main,\r\n                  color: \"white\",\r\n                  borderColor: theme.palette.primary.main,\r\n                },\r\n              }}\r\n            >\r\n              Columns\r\n            </Button>\r\n          </Stack>\r\n        </Stack>\r\n      </Box>\r\n\r\n      {/* Column Visibility Dropdown */}\r\n      <Popover\r\n        open={Boolean(columnVisibilityAnchor)}\r\n        anchorEl={columnVisibilityAnchor}\r\n        onClose={handleColumnVisibilityClose}\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"left\",\r\n        }}\r\n        transformOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"left\",\r\n        }}\r\n        PaperProps={{\r\n          sx: {\r\n            minWidth: 200,\r\n            maxHeight: 400,\r\n          },\r\n        }}\r\n      >\r\n        <Box sx={{ p: 1 }}>\r\n          <Typography variant=\"subtitle2\" sx={{ p: 1, fontWeight: \"bold\" }}>\r\n            Show/Hide Columns\r\n          </Typography>\r\n          <Divider sx={{ mb: 1 }} />\r\n          <List dense>\r\n            {columns.map((column) => (\r\n              <ListItem key={column.field} disablePadding>\r\n                <ListItemButton\r\n                  dense\r\n                  onClick={() => handleColumnToggle(column.field)}\r\n                >\r\n                  <ListItemIcon sx={{ minWidth: 36 }}>\r\n                    <Checkbox\r\n                      edge=\"start\"\r\n                      checked={columnVisibilityModel[column.field] !== false}\r\n                      tabIndex={-1}\r\n                      disableRipple\r\n                      size=\"small\"\r\n                    />\r\n                  </ListItemIcon>\r\n                  <ListItemText\r\n                    primary={column.headerName}\r\n                    primaryTypographyProps={{ fontSize: \"0.875rem\" }}\r\n                  />\r\n                </ListItemButton>\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Box>\r\n      </Popover>\r\n\r\n      {/* Department Filter Buttons */}\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"flex-start\"\r\n        alignItems=\"center\"\r\n        gap={1}\r\n        mb={2}\r\n      >\r\n        <Button\r\n          variant={selectedDepartment === \"All\" ? \"contained\" : \"outlined\"}\r\n          onClick={() => handleDepartmentClick(\"All\")}\r\n          sx={{\r\n            backgroundColor:\r\n              selectedDepartment === \"All\" ? \"#1976d2\" : \"transparent\",\r\n            color: selectedDepartment === \"All\" ? \"#fff\" : \"#1976d2\",\r\n            borderColor: \"#1976d2\",\r\n            \"&:hover\": {\r\n              backgroundColor: \"#1976d2\",\r\n              color: \"#fff\",\r\n            },\r\n          }}\r\n        >\r\n          All Departments\r\n        </Button>\r\n        {DEPARTMENTS.map((department) => (\r\n          <Button\r\n            key={department}\r\n            variant={\r\n              selectedDepartment === department ? \"contained\" : \"outlined\"\r\n            }\r\n            onClick={() => handleDepartmentClick(department)}\r\n            sx={{\r\n              backgroundColor:\r\n                selectedDepartment === department\r\n                  ? department === \"Asbestos & HAZMAT\"\r\n                    ? \"#2e7d32\"\r\n                    : department === \"Occupational Hygiene\"\r\n                    ? \"#ed6c02\"\r\n                    : \"#9c27b0\"\r\n                  : \"transparent\",\r\n              color:\r\n                selectedDepartment === department\r\n                  ? \"#fff\"\r\n                  : department === \"Asbestos & HAZMAT\"\r\n                  ? \"#2e7d32\"\r\n                  : department === \"Occupational Hygiene\"\r\n                  ? \"#ed6c02\"\r\n                  : \"#9c27b0\",\r\n              borderColor:\r\n                department === \"Asbestos & HAZMAT\"\r\n                  ? \"#2e7d32\"\r\n                  : department === \"Occupational Hygiene\"\r\n                  ? \"#ed6c02\"\r\n                  : \"#9c27b0\",\r\n              \"&:hover\": {\r\n                backgroundColor:\r\n                  department === \"Asbestos & HAZMAT\"\r\n                    ? \"#2e7d32\"\r\n                    : department === \"Occupational Hygiene\"\r\n                    ? \"#ed6c02\"\r\n                    : \"#9c27b0\",\r\n                color: \"#fff\",\r\n              },\r\n            }}\r\n          >\r\n            {department}\r\n          </Button>\r\n        ))}\r\n      </Box>\r\n\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      <Box\r\n        m=\"40px 0 0 0\"\r\n        sx={{\r\n          \"& .MuiDataGrid-root\": {\r\n            border: \"none\",\r\n          },\r\n          \"& .MuiDataGrid-cell\": {\r\n            borderBottom: `1px solid ${theme.palette.divider}`,\r\n            color: \"#000000\",\r\n          },\r\n          \"& .MuiDataGrid-columnHeaders\": {\r\n            backgroundColor: theme.palette.primary.main,\r\n            borderBottom: \"none\",\r\n            color: \"#FFFFFF\",\r\n          },\r\n          \"& .MuiDataGrid-columnHeader\": {\r\n            color: \"#FFFFFF\",\r\n            fontWeight: 600,\r\n          },\r\n          \"& .MuiDataGrid-virtualScroller\": {\r\n            backgroundColor: \"#FFFFFF\",\r\n          },\r\n          \"& .MuiDataGrid-footerContainer\": {\r\n            borderTop: \"none\",\r\n            backgroundColor: theme.palette.primary.main,\r\n            color: \"#FFFFFF\",\r\n          },\r\n          \"& .MuiCheckbox-root\": {\r\n            color: `${theme.palette.secondary.main} !important`,\r\n          },\r\n        }}\r\n      >\r\n        <DataGrid\r\n          rows={projects}\r\n          columns={columns}\r\n          getRowId={(row) => row._id || row.id}\r\n          loading={loading && !searchLoading}\r\n          error={error}\r\n          checkboxSelection\r\n          disableRowSelectionOnClick\r\n          columnVisibilityModel={columnVisibilityModel}\r\n          onColumnVisibilityModelChange={handleColumnVisibilityModelChange}\r\n          paginationMode=\"server\"\r\n          rowCount={pagination.total}\r\n          paginationModel={paginationModel}\r\n          onPaginationModelChange={(newModel) => {\r\n            setPaginationModel(newModel);\r\n            fetchProjectsWithPagination(newModel);\r\n          }}\r\n          pageSizeOptions={[25, 50, 100]}\r\n          onSortModelChange={handleSortModelChange}\r\n          sortModel={filters.sortModel}\r\n          autoHeight\r\n          disableColumnMenu={false}\r\n          disableSelectionOnClick\r\n          disableColumnFilter={false}\r\n          disableMultipleColumnsFiltering={true}\r\n          disableColumnSelector={false}\r\n          disableDensitySelector={false}\r\n          disableColumnReorder={false}\r\n          disableMultipleColumnsSorting={true}\r\n          initialState={{\r\n            pagination: {\r\n              paginationModel: { pageSize: 50, page: 0 },\r\n            },\r\n          }}\r\n          sx={{\r\n            \"& .MuiDataGrid-row:nth-of-type(even)\": {\r\n              backgroundColor: \"#f8f9fa\",\r\n            },\r\n            \"& .MuiDataGrid-row:nth-of-type(odd)\": {\r\n              backgroundColor: \"#ffffff\",\r\n            },\r\n            \"& .MuiDataGrid-row:hover\": {\r\n              backgroundColor: \"#e3f2fd\",\r\n            },\r\n          }}\r\n        />\r\n      </Box>\r\n\r\n      {/* Project Details Dialog */}\r\n      <Dialog\r\n        open={dialogOpen}\r\n        onClose={() => {\r\n          setDialogOpen(false);\r\n          setForm(emptyForm);\r\n        }}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>\r\n          {selectedProject ? \"Edit Project\" : \"Add New Project\"}\r\n        </DialogTitle>\r\n        <form onSubmit={handleSubmit}>\r\n          <DialogContent>\r\n            <Box sx={{ mt: 2 }}>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Project ID\"\r\n                    value=\"Will be auto-generated\"\r\n                    disabled\r\n                    fullWidth\r\n                    sx={{\r\n                      \"& .MuiInputBase-input.Mui-disabled\": {\r\n                        WebkitTextFillColor: \"#666\",\r\n                        fontStyle: \"italic\",\r\n                      },\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Project Name\"\r\n                    name=\"name\"\r\n                    value={form.name}\r\n                    onChange={handleChange}\r\n                    required\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Box>\r\n                    <Autocomplete\r\n                      options={clients}\r\n                      getOptionLabel={(option) => option.name || \"\"}\r\n                      value={\r\n                        clients.find((client) => client._id === form.client) ||\r\n                        null\r\n                      }\r\n                      onChange={handleClientChange}\r\n                      inputValue={clientInputValue}\r\n                      onInputChange={(event, newInputValue) =>\r\n                        setClientInputValue(newInputValue)\r\n                      }\r\n                      filterOptions={(options, { inputValue }) => {\r\n                        if (inputValue.length < 3) return [];\r\n                        const filterValue = inputValue.toLowerCase();\r\n                        return options.filter((option) =>\r\n                          option.name.toLowerCase().includes(filterValue)\r\n                        );\r\n                      }}\r\n                      includeInputInList\r\n                      filterSelectedOptions\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          label=\"Client\"\r\n                          required\r\n                          fullWidth\r\n                          helperText={\r\n                            clientInputValue.length < 3\r\n                              ? \"Type at least 3 characters to search clients\"\r\n                              : \"\"\r\n                          }\r\n                        />\r\n                      )}\r\n                      isOptionEqualToValue={(option, value) =>\r\n                        option._id === value._id\r\n                      }\r\n                    />\r\n                    <Button\r\n                      startIcon={<AddIcon />}\r\n                      onClick={() => setClientDialogOpen(true)}\r\n                      sx={{ mt: 1 }}\r\n                    >\r\n                      Add New Client\r\n                    </Button>\r\n                  </Box>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <FormControl fullWidth required>\r\n                    <InputLabel>Department</InputLabel>\r\n                    <Select\r\n                      name=\"department\"\r\n                      value={form.department}\r\n                      onChange={handleChange}\r\n                      label=\"Department\"\r\n                    >\r\n                      {DEPARTMENTS.map((type) => (\r\n                        <MenuItem key={type} value={type}>\r\n                          {type}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <FormControl fullWidth>\r\n                    <Autocomplete\r\n                      multiple\r\n                      options={CATEGORIES}\r\n                      value={form.categories}\r\n                      onChange={(event, newValue) => {\r\n                        setForm((prev) => ({ ...prev, categories: newValue }));\r\n                      }}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          label=\"Categories\"\r\n                          placeholder=\"Select categories\"\r\n                        />\r\n                      )}\r\n                      renderTags={(value, getTagProps) =>\r\n                        value.map((option, index) => (\r\n                          <Chip label={option} {...getTagProps({ index })} />\r\n                        ))\r\n                      }\r\n                    />\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <FormControl fullWidth required>\r\n                    {safeRenderStatusSelect(form.status, handleChange)}\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Autocomplete\r\n                    freeSolo\r\n                    options={addressOptions}\r\n                    getOptionLabel={(option) =>\r\n                      typeof option === \"string\" ? option : option.description\r\n                    }\r\n                    inputValue={addressInput}\r\n                    onInputChange={(_, value) =>\r\n                      handleAddressInputChange(value)\r\n                    }\r\n                    onChange={(_, value) => {\r\n                      if (value && value.place_id) {\r\n                        handleAddressSelect(value.place_id);\r\n                      } else if (typeof value === \"string\") {\r\n                        // Handle manual text input\r\n                        setForm((prev) => ({ ...prev, address: value }));\r\n                        setAddressInput(value);\r\n                      }\r\n                    }}\r\n                    loading={isAddressLoading}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        fullWidth\r\n                        label=\"Address (Optional)\"\r\n                        name=\"address\"\r\n                        InputProps={{\r\n                          ...params.InputProps,\r\n                          endAdornment: (\r\n                            <>\r\n                              {isAddressLoading ? (\r\n                                <CircularProgress color=\"inherit\" size={20} />\r\n                              ) : null}\r\n                              {params.InputProps.endAdornment}\r\n                            </>\r\n                          ),\r\n                        }}\r\n                      />\r\n                    )}\r\n                    renderOption={(props, option) => (\r\n                      <li {...props}>\r\n                        <Typography>{option.description}</Typography>\r\n                      </li>\r\n                    )}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Due Date\"\r\n                    name=\"d_Date\"\r\n                    type=\"date\"\r\n                    value={form.d_Date || \"\"}\r\n                    onChange={handleChange}\r\n                    fullWidth\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Work Order/Job Reference\"\r\n                    name=\"workOrder\"\r\n                    value={form.workOrder}\r\n                    onChange={handleChange}\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    placeholder=\"Enter work order or job reference number\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Notes\"\r\n                    name=\"notes\"\r\n                    value={form.notes}\r\n                    onChange={handleChange}\r\n                    fullWidth\r\n                    multiline\r\n                    rows={4}\r\n                    placeholder=\"Enter any additional notes about the project\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Typography\r\n                    variant=\"subtitle1\"\r\n                    sx={{ mt: 2, mb: 1, fontWeight: \"bold\" }}\r\n                  >\r\n                    Project Team\r\n                  </Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <Autocomplete\r\n                    multiple\r\n                    options={users}\r\n                    getOptionLabel={(option) =>\r\n                      `${option.firstName} ${option.lastName}`\r\n                    }\r\n                    value={form.users}\r\n                    onChange={handleUsersChange}\r\n                    isOptionEqualToValue={(option, value) =>\r\n                      option._id === value._id\r\n                    }\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label=\"Users (Optional)\"\r\n                        fullWidth\r\n                      />\r\n                    )}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => setDialogOpen(false)}>Cancel</Button>\r\n            <Button type=\"submit\">Save</Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n\r\n      {/* Delete Confirmation Dialog */}\r\n      <Dialog\r\n        open={deleteDialogOpen}\r\n        onClose={() => setDeleteDialogOpen(false)}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Confirm Delete</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Are you sure you want to delete the project \"{selectedProject?.name}\r\n            \"? This action cannot be undone.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>\r\n          <Button\r\n            onClick={handleDeleteProject}\r\n            color=\"error\"\r\n            variant=\"contained\"\r\n          >\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* New Client Dialog */}\r\n      <Dialog\r\n        open={clientDialogOpen}\r\n        onClose={() => setClientDialogOpen(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Add New Client</DialogTitle>\r\n        <form onSubmit={handleNewClientSubmit}>\r\n          <DialogContent>\r\n            <Box sx={{ mt: 2 }}>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Client Name\"\r\n                    name=\"name\"\r\n                    value={newClient.name}\r\n                    onChange={(e) =>\r\n                      setNewClient({ ...newClient, name: e.target.value })\r\n                    }\r\n                    required\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    value={newClient.email}\r\n                    onChange={(e) =>\r\n                      setNewClient({ ...newClient, email: e.target.value })\r\n                    }\r\n                    required\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Phone\"\r\n                    name=\"phone\"\r\n                    value={newClient.phone}\r\n                    onChange={(e) =>\r\n                      setNewClient({ ...newClient, phone: e.target.value })\r\n                    }\r\n                    required\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Address\"\r\n                    name=\"address\"\r\n                    value={newClient.address}\r\n                    onChange={(e) =>\r\n                      setNewClient({ ...newClient, address: e.target.value })\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Invoice Email\"\r\n                    name=\"invoiceEmail\"\r\n                    value={newClient.invoiceEmail}\r\n                    onChange={(e) =>\r\n                      setNewClient({\r\n                        ...newClient,\r\n                        invoiceEmail: e.target.value,\r\n                      })\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Typography variant=\"subtitle1\" sx={{ mt: 2, mb: 1 }}>\r\n                    Primary Contact\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} md={4}>\r\n                  <TextField\r\n                    label=\"Name\"\r\n                    name=\"contact1Name\"\r\n                    value={newClient.contact1Name}\r\n                    onChange={(e) =>\r\n                      setNewClient({\r\n                        ...newClient,\r\n                        contact1Name: e.target.value,\r\n                      })\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} md={4}>\r\n                  <TextField\r\n                    label=\"Phone\"\r\n                    name=\"contact1Number\"\r\n                    value={newClient.contact1Number}\r\n                    onChange={(e) =>\r\n                      setNewClient({\r\n                        ...newClient,\r\n                        contact1Number: e.target.value,\r\n                      })\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} md={4}>\r\n                  <TextField\r\n                    label=\"Email\"\r\n                    name=\"contact1Email\"\r\n                    value={newClient.contact1Email}\r\n                    onChange={(e) =>\r\n                      setNewClient({\r\n                        ...newClient,\r\n                        contact1Email: e.target.value,\r\n                      })\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Typography variant=\"subtitle1\" sx={{ mt: 2, mb: 1 }}>\r\n                    Secondary Contact (Optional)\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} md={4}>\r\n                  <TextField\r\n                    label=\"Name\"\r\n                    name=\"contact2Name\"\r\n                    value={newClient.contact2Name}\r\n                    onChange={(e) =>\r\n                      setNewClient({\r\n                        ...newClient,\r\n                        contact2Name: e.target.value,\r\n                      })\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} md={4}>\r\n                  <TextField\r\n                    label=\"Phone\"\r\n                    name=\"contact2Number\"\r\n                    value={newClient.contact2Number}\r\n                    onChange={(e) =>\r\n                      setNewClient({\r\n                        ...newClient,\r\n                        contact2Number: e.target.value,\r\n                      })\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} md={4}>\r\n                  <TextField\r\n                    label=\"Email\"\r\n                    name=\"contact2Email\"\r\n                    value={newClient.contact2Email}\r\n                    onChange={(e) =>\r\n                      setNewClient({\r\n                        ...newClient,\r\n                        contact2Email: e.target.value,\r\n                      })\r\n                    }\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => setClientDialogOpen(false)}>Cancel</Button>\r\n            <Button type=\"submit\" variant=\"contained\">\r\n              Add Client\r\n            </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Projects;\r\n","import { useState, useCallback } from 'react';\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Typography,\r\n  Divider,\r\n  Box,\r\n} from '@mui/material';\r\nimport {\r\n  JOB_STATUS,\r\n  ACTIVE_STATUSES,\r\n  INACTIVE_STATUSES,\r\n  StatusChip,\r\n} from '../components/JobStatus';\r\n\r\nexport const useJobStatus = () => {\r\n  const [selectedStatus, setSelectedStatus] = useState(ACTIVE_STATUSES[0]);\r\n\r\n  const handleStatusChange = useCallback((newStatus) => {\r\n    setSelectedStatus(newStatus);\r\n  }, []);\r\n\r\n  const renderStatusSelect = (value, onChange, label = \"Status\") => {\r\n    return (\r\n      <FormControl fullWidth required>\r\n        <InputLabel>{label}</InputLabel>\r\n        <Select\r\n          name=\"status\"\r\n          value={value}\r\n          onChange={onChange}\r\n          label={label}\r\n        >\r\n          <MenuItem disabled>\r\n            <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n              Active Jobs\r\n            </Typography>\r\n          </MenuItem>\r\n          {ACTIVE_STATUSES.map((status) => (\r\n            <MenuItem key={status} value={status}>\r\n              <StatusChip status={status} />\r\n            </MenuItem>\r\n          ))}\r\n          <Divider />\r\n          <MenuItem disabled>\r\n            <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n              Inactive Jobs\r\n            </Typography>\r\n          </MenuItem>\r\n          {INACTIVE_STATUSES.map((status) => (\r\n            <MenuItem key={status} value={status}>\r\n              <StatusChip status={status} />\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    );\r\n  };\r\n\r\n  const renderStatusCell = (params) => {\r\n    return <StatusChip status={params.value} />;\r\n  };\r\n\r\n  const renderEditStatusCell = (params) => {\r\n    return (\r\n      <Box sx={{ width: '100%' }}>\r\n        <Select\r\n          value={params.value}\r\n          onChange={(e) => {\r\n            console.log(\"Status change in cell:\", e.target.value);\r\n            params.api.setEditCellValue({ \r\n              id: params.id, \r\n              field: params.field, \r\n              value: e.target.value \r\n            }, true); // Add true to commit the change immediately\r\n          }}\r\n          sx={{ width: '100%' }}\r\n          size=\"small\"\r\n        >\r\n          <MenuItem disabled>\r\n            <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n              Active Jobs\r\n            </Typography>\r\n          </MenuItem>\r\n          {ACTIVE_STATUSES.map((status) => (\r\n            <MenuItem key={status} value={status}>\r\n              <StatusChip status={status} />\r\n            </MenuItem>\r\n          ))}\r\n          <Divider />\r\n          <MenuItem disabled>\r\n            <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n              Inactive Jobs\r\n            </Typography>\r\n          </MenuItem>\r\n          {INACTIVE_STATUSES.map((status) => (\r\n            <MenuItem key={status} value={status}>\r\n              <StatusChip status={status} />\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  return {\r\n    JOB_STATUS,\r\n    ACTIVE_STATUSES,\r\n    INACTIVE_STATUSES,\r\n    selectedStatus,\r\n    handleStatusChange,\r\n    renderStatusSelect,\r\n    renderStatusCell,\r\n    renderEditStatusCell,\r\n  };\r\n}; "],"names":["_ref","value","tooltip","content","_jsx","Box","sx","width","overflow","textOverflow","whiteSpace","children","Typography","variant","noWrap","Tooltip","title","placement","DEPARTMENTS","CATEGORIES","emptyForm","name","client","department","categories","address","d_Date","workOrder","users","status","ACTIVE_STATUSES","notes","projectContact","number","email","getInitials","user","firstName","lastName","concat","split","map","word","join","toUpperCase","getRandomColor","identifier","_id","Math","random","toString","hash","reduce","acc","char","charCodeAt","abs","getStatusColor","Projects","theme","useTheme","navigate","useNavigate","renderStatusCell","renderStatusSelect","renderEditStatusCell","useLocation","useJobStatus","selectedStatus","setSelectedStatus","useState","handleStatusChange","useCallback","newStatus","JOB_STATUS","INACTIVE_STATUSES","onChange","label","arguments","length","undefined","_jsxs","FormControl","fullWidth","required","InputLabel","Select","MenuItem","disabled","color","StatusChip","Divider","params","e","console","log","target","api","setEditCellValue","id","field","size","projects","setProjects","loading","setLoading","searchLoading","setSearchLoading","error","setError","dialogOpen","setDialogOpen","deleteDialogOpen","setDeleteDialogOpen","selectedProject","setSelectedProject","form","setForm","clients","setClients","setUsers","loadingUsers","setLoadingUsers","pagination","setPagination","page","limit","total","pages","searchTerm","setSearchTerm","departmentFilter","setDepartmentFilter","statusFilter","setStatusFilter","sortModel","setSortModel","sort","newClient","setNewClient","phone","invoiceEmail","contact1Name","contact1Number","contact1Email","contact2Name","contact2Number","contact2Email","clientDialogOpen","setClientDialogOpen","menuAnchor","setMenuAnchor","columnVisibilityModel","setColumnVisibilityModel","projectID","createdAt","updatedAt","showInactive","setShowInactive","selectedDepartment","setSelectedDepartment","savedFilters","localStorage","getItem","parsedFilters","JSON","parse","paginationModel","setPaginationModel","pageSize","columnVisibilityAnchor","setColumnVisibilityAnchor","isInitialLoadRef","useRef","pageLoadTimerRef","renderStartTimeRef","current","searchInputRef","searchFocused","setSearchFocused","addressInput","setAddressInput","addressOptions","setAddressOptions","isAddressLoading","setIsAddressLoading","autocompleteService","setAutocompleteService","placesService","setPlacesService","googleMaps","setGoogleMaps","clientInputValue","setClientInputValue","useEffect","performanceMonitor","startPageLoad","apiKey","process","REACT_APP_GOOGLE_MAPS_API_KEY","NODE_ENV","loadGoogleMapsApi","then","google","maps","places","AutocompleteService","PlacesService","document","createElement","catch","performance","now","startTimer","endTimer","filters","setFilters","urlParams","URLSearchParams","window","location","search","defaultFilters","urlStatus","get","_objectSpread","filtersRef","saveFilters","newFilters","setItem","stringify","set","delete","history","replaceState","pathname","updateFilter","filterType","prev","fetchProjectsWithPagination","async","searchValue","isSearch","currentFilters","filtersToUse","_filtersToUse$sortMod","_filtersToUse$sortMod2","_response$data","_response$data$pagina","_response$data$pagina2","sortBy","sortOrder","response","projectService","getAll","projectsData","Array","isArray","data","err","message","fetchProjects","debouncedSearch","debounce","handleFilterChange","_updatedFilters$sortM","_updatedFilters$sortM2","_response$data2","updatedFilters","_response$data$pagina3","_response$data$pagina4","fetchWithUpdatedFilters","handleSearchChange","removeItem","event","handleBeforeUnload","addEventListener","removeEventListener","setTimeout","_searchInputRef$curre","focus","newPage","newPageSize","handleSortModelChange","newSortModel","clientsResponse","clientService","clientsData","fetchData","userService","transformedUsers","filter","isActive","fetchUsers","handleChange","includes","_","UsersCell","_ref4","display","gap","index","Avatar","height","fontSize","bgcolor","handleColumnVisibilityModelChange","newModel","handleDepartmentClick","departmentValue","tempFilters","_tempFilters$sortMode","_tempFilters$sortMode2","_response$data3","_response$data4","_response$data4$pagin","_response$data5","_response$data5$pagin","fetchWithUpdatedDepartment","_response$data6","_response$data6$colum","userPreferencesService","getPreferences","columnVisibility","savedColumnVisibility","parsed","parseError","loadUserPreferences","columns","useMemo","headerName","flex","minWidth","maxWidth","renderCell","onClick","row","cursor","_ref5","palette","primary","main","wordWrap","lineHeight","alignItems","hide","_ref6","_row$client","maxHeight","WebkitLineClamp","WebkitBoxOrient","_ref7","daysDiff","dueDate","today","Date","setHours","due","diffTime","getTime","ceil","calculateDaysDifference","fontWeight","backgroundColor","padding","borderRadius","Button","startIcon","VisibilityIcon","mr","IconButton","handleDeleteClick","project","DeleteIcon","safeRenderStatusSelect","m","mb","LinearProgress","dark","border","py","AddIcon","mt","boxShadow","p","Stack","direction","spacing","justifyContent","TextField","placeholder","InputProps","startAdornment","InputAdornment","position","SearchIcon","ref","onFocus","onBlur","ViewColumnIcon","currentTarget","borderColor","Popover","open","Boolean","anchorEl","onClose","handleColumnVisibilityClose","anchorOrigin","vertical","horizontal","transformOrigin","PaperProps","List","dense","column","ListItem","disablePadding","ListItemButton","updatePreferences","handleColumnToggle","ListItemIcon","Checkbox","edge","checked","tabIndex","disableRipple","ListItemText","primaryTypographyProps","Alert","severity","borderBottom","divider","borderTop","secondary","DataGrid","rows","getRowId","checkboxSelection","disableRowSelectionOnClick","onColumnVisibilityModelChange","paginationMode","rowCount","onPaginationModelChange","pageSizeOptions","onSortModelChange","autoHeight","disableColumnMenu","disableSelectionOnClick","disableColumnFilter","disableMultipleColumnsFiltering","disableColumnSelector","disableDensitySelector","disableColumnReorder","disableMultipleColumnsSorting","initialState","Dialog","DialogTitle","onSubmit","preventDefault","create","_error$response","DialogContent","Grid","container","item","xs","WebkitTextFillColor","fontStyle","Autocomplete","options","getOptionLabel","option","find","handleClientChange","newValue","inputValue","onInputChange","newInputValue","filterOptions","_ref8","filterValue","toLowerCase","includeInputInList","filterSelectedOptions","renderInput","helperText","isOptionEqualToValue","type","multiple","renderTags","getTagProps","Chip","freeSolo","description","getPlacePredictions","input","componentRestrictions","country","types","predictions","PlacesServiceStatus","OK","handleAddressInputChange","place_id","placeId","getDetails","fields","place","formatted_address","handleAddressSelect","endAdornment","_Fragment","CircularProgress","renderOption","props","InputLabelProps","shrink","multiline","handleUsersChange","DialogActions","DialogContentText","projectId","_error$response2","alert","md"],"sourceRoot":""}