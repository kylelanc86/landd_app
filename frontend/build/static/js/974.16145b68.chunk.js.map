{"version":3,"file":"static/js/974.16145b68.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Description.js","../node_modules/@mui/icons-material/esm/Upload.js","scenes/clearances/ClearanceItems.jsx","utils/imageCompression.js","services/asbestosClearanceService.js","../node_modules/@mui/icons-material/esm/PhotoCamera.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8zm2 16H8v-2h8zm0-4H8v-2h8zm-3-5V3.5L18.5 9z\"\n}), 'Description');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5zm0-10h4v6h6v-6h4l-7-7z\"\n}), 'Upload');","import React, { useState, useEffect } from \"react\";\nimport {\n  Box,\n  Typography,\n  Button,\n  Card,\n  CardContent,\n  Grid,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Alert,\n  Snackbar,\n  CircularProgress,\n  Chip,\n} from \"@mui/material\";\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  ArrowBack as ArrowBackIcon,\n  PhotoCamera as PhotoCameraIcon,\n  Upload as UploadIcon,\n  Delete as DeletePhotoIcon,\n  Description as DescriptionIcon,\n} from \"@mui/icons-material\";\n\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { tokens } from \"../../theme\";\nimport PermissionGate from \"../../components/PermissionGate\";\nimport asbestosClearanceService from \"../../services/asbestosClearanceService\";\nimport { compressImage, needsCompression } from \"../../utils/imageCompression\";\nimport { formatDate } from \"../../utils/dateUtils\";\n\nconst ClearanceItems = () => {\n  const colors = tokens;\n  const navigate = useNavigate();\n  const { clearanceId } = useParams();\n\n  const [items, setItems] = useState([]);\n  const [clearance, setClearance] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingItem, setEditingItem] = useState(null);\n  const [snackbar, setSnackbar] = useState({\n    open: false,\n    message: \"\",\n    severity: \"success\",\n  });\n\n  const [form, setForm] = useState({\n    locationDescription: \"\",\n    materialDescription: \"\",\n    asbestosType: \"non-friable\",\n    photograph: \"\",\n    notes: \"\",\n  });\n\n  const [photoPreview, setPhotoPreview] = useState(null);\n  const [photoFile, setPhotoFile] = useState(null);\n  const [compressionStatus, setCompressionStatus] = useState(null);\n  const [airMonitoringDialogOpen, setAirMonitoringDialogOpen] = useState(false);\n  const [airMonitoringFile, setAirMonitoringFile] = useState(null);\n  const [uploadingReport, setUploadingReport] = useState(false);\n  const [airMonitoringReportsDialogOpen, setAirMonitoringReportsDialogOpen] =\n    useState(false);\n  const [airMonitoringReports, setAirMonitoringReports] = useState([]);\n  const [loadingReports, setLoadingReports] = useState(false);\n  const [selectedReport, setSelectedReport] = useState(null);\n  const [savingExclusions, setSavingExclusions] = useState(false);\n  const [exclusionsLastSaved, setExclusionsLastSaved] = useState(null);\n\n  // Fetch items and clearance data on component mount\n  useEffect(() => {\n    fetchData();\n  }, [clearanceId]);\n\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      const [itemsData, clearanceData] = await Promise.all([\n        asbestosClearanceService.getItems(clearanceId),\n        asbestosClearanceService.getById(clearanceId),\n      ]);\n\n      console.log(\"Clearance items API response:\", itemsData);\n      console.log(\"Clearance API response:\", clearanceData);\n\n      setItems(itemsData || []);\n      setClearance(clearanceData);\n    } catch (err) {\n      console.error(\"Error fetching data:\", err);\n      setError(\"Failed to load data\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const itemData = {\n        locationDescription: form.locationDescription,\n        materialDescription: form.materialDescription,\n        asbestosType: form.asbestosType,\n        photograph: form.photograph,\n        notes: form.notes,\n      };\n\n      if (editingItem) {\n        await asbestosClearanceService.updateItem(\n          clearanceId,\n          editingItem._id,\n          itemData\n        );\n        setSnackbar({\n          open: true,\n          message: \"Item updated successfully\",\n          severity: \"success\",\n        });\n      } else {\n        await asbestosClearanceService.addItem(clearanceId, itemData);\n        setSnackbar({\n          open: true,\n          message: \"Item created successfully\",\n          severity: \"success\",\n        });\n      }\n\n      setDialogOpen(false);\n      setEditingItem(null);\n      resetForm();\n      fetchData();\n    } catch (err) {\n      console.error(\"Error saving item:\", err);\n      setSnackbar({\n        open: true,\n        message: \"Failed to save item\",\n        severity: \"error\",\n      });\n    }\n  };\n\n  const handleEdit = (item) => {\n    setEditingItem(item);\n    setForm({\n      locationDescription: item.locationDescription,\n      materialDescription: item.materialDescription,\n      asbestosType: item.asbestosType,\n      photograph: item.photograph || \"\",\n      notes: item.notes || \"\",\n    });\n    setPhotoPreview(item.photograph || null);\n    setPhotoFile(null);\n    setDialogOpen(true);\n  };\n\n  const handleDelete = async (item) => {\n    if (window.confirm(\"Are you sure you want to delete this item?\")) {\n      try {\n        await asbestosClearanceService.deleteItem(clearanceId, item._id);\n        setSnackbar({\n          open: true,\n          message: \"Item deleted successfully\",\n          severity: \"success\",\n        });\n        fetchData();\n      } catch (err) {\n        console.error(\"Error deleting item:\", err);\n        setSnackbar({\n          open: true,\n          message: \"Failed to delete item\",\n          severity: \"error\",\n        });\n      }\n    }\n  };\n\n  const resetForm = () => {\n    setForm({\n      locationDescription: \"\",\n      materialDescription: \"\",\n      asbestosType: \"non-friable\",\n      photograph: \"\",\n      notes: \"\",\n    });\n    setPhotoPreview(null);\n    setPhotoFile(null);\n    setCompressionStatus(null);\n  };\n\n  const getAsbestosTypeColor = (type) => {\n    switch (type) {\n      case \"friable\":\n        return \"error\";\n      case \"non-friable\":\n        return \"warning\";\n      default:\n        return \"default\";\n    }\n  };\n\n  const handlePhotoUpload = async (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      setPhotoFile(file);\n      setCompressionStatus({\n        type: \"processing\",\n        message: \"Processing image...\",\n      });\n\n      try {\n        const originalSizeKB = Math.round(file.size / 1024);\n\n        // Check if compression is needed\n        const shouldCompress = needsCompression(file, 300); // 300KB threshold\n\n        if (shouldCompress) {\n          console.log(\"Compressing image...\");\n          setCompressionStatus({\n            type: \"compressing\",\n            message: \"Compressing image...\",\n          });\n\n          const compressedImage = await compressImage(file, {\n            maxWidth: 1000,\n            maxHeight: 1000,\n            quality: 0.75,\n            maxSizeKB: 300,\n          });\n\n          const compressedSizeKB = Math.round(\n            (compressedImage.length * 0.75) / 1024\n          );\n          const reduction = Math.round(\n            ((originalSizeKB - compressedSizeKB) / originalSizeKB) * 100\n          );\n\n          setPhotoPreview(compressedImage);\n          setForm({ ...form, photograph: compressedImage });\n          setCompressionStatus({\n            type: \"success\",\n            message: `Compressed: ${originalSizeKB}KB → ${compressedSizeKB}KB (${reduction}% reduction)`,\n          });\n\n          console.log(\"Image compressed successfully\");\n        } else {\n          // Use original if no compression needed\n          const reader = new FileReader();\n          reader.onload = (e) => {\n            setPhotoPreview(e.target.result);\n            setForm({ ...form, photograph: e.target.result });\n            setCompressionStatus({\n              type: \"info\",\n              message: `No compression needed (${originalSizeKB}KB)`,\n            });\n          };\n          reader.readAsDataURL(file);\n        }\n      } catch (error) {\n        console.error(\"Error processing image:\", error);\n        // Fallback to original image if compression fails\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          setPhotoPreview(e.target.result);\n          setForm({ ...form, photograph: e.target.result });\n          setCompressionStatus({\n            type: \"warning\",\n            message: \"Compression failed, using original image\",\n          });\n        };\n        reader.readAsDataURL(file);\n      }\n    }\n  };\n\n  const handleTakePhoto = () => {\n    // Create a file input for camera access\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.accept = \"image/*\";\n    input.capture = \"environment\"; // Use back camera\n    input.onchange = handlePhotoUpload;\n    input.click();\n  };\n\n  const handleRemovePhoto = () => {\n    setPhotoFile(null);\n    setPhotoPreview(null);\n    setForm({ ...form, photograph: \"\" });\n  };\n\n  const convertToBase64 = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = reject;\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const fetchAirMonitoringReports = async () => {\n    if (!clearance?.projectId?._id) {\n      setSnackbar({\n        open: true,\n        message: \"No project found for this clearance\",\n        severity: \"error\",\n      });\n      return;\n    }\n\n    try {\n      setLoadingReports(true);\n      const reports = await asbestosClearanceService.getAirMonitoringReports(\n        clearance.projectId._id\n      );\n      setAirMonitoringReports(reports);\n    } catch (error) {\n      console.error(\"Error fetching air monitoring reports:\", error);\n      setSnackbar({\n        open: true,\n        message: \"Failed to fetch air monitoring reports\",\n        severity: \"error\",\n      });\n    } finally {\n      setLoadingReports(false);\n    }\n  };\n\n  const handleOpenAirMonitoringReportsDialog = () => {\n    setAirMonitoringReportsDialogOpen(true);\n    fetchAirMonitoringReports();\n  };\n\n  const handleSelectAirMonitoringReport = async (report) => {\n    try {\n      setSelectedReport(report);\n\n      // Generate the air monitoring report PDF\n      const { generateShiftReport } = await import(\n        \"../../utils/generateShiftReport\"\n      );\n      const {\n        shiftService,\n        jobService,\n        sampleService,\n        projectService,\n        clientService,\n      } = await import(\"../../services/api\");\n\n      // Get the shift data\n      const shiftResponse = await shiftService.getById(report._id);\n      const shift = shiftResponse.data;\n\n      // Get the job data\n      const jobResponse = await jobService.getById(report.jobId);\n      const job = jobResponse.data;\n\n      // Get samples for this shift\n      const samplesResponse = await sampleService.getByShift(report._id);\n      const samples = samplesResponse.data || [];\n\n      // Get project data\n      let project = job.project;\n      if (project && typeof project === \"string\") {\n        const projectResponse = await projectService.getById(project);\n        project = projectResponse.data;\n      }\n      if (project && project.client && typeof project.client === \"string\") {\n        const clientResponse = await clientService.getById(project.client);\n        project.client = clientResponse.data;\n      }\n\n      // Generate the report and get the PDF data URL\n      const pdfDataUrl = await generateShiftReport({\n        shift: shift,\n        job: job,\n        samples: samples,\n        project: project,\n        returnPdfData: true, // This will return the PDF data URL instead of downloading\n      });\n\n      // Extract base64 data from data URL\n      const base64Data = pdfDataUrl.split(\",\")[1];\n\n      // Upload the report to the clearance\n      await asbestosClearanceService.uploadAirMonitoringReport(clearanceId, {\n        reportData: base64Data,\n      });\n\n      setSnackbar({\n        open: true,\n        message: \"Air monitoring report selected and uploaded successfully\",\n        severity: \"success\",\n      });\n\n      setAirMonitoringReportsDialogOpen(false);\n      setSelectedReport(null);\n      fetchData(); // Refresh clearance data\n    } catch (error) {\n      console.error(\"Error selecting air monitoring report:\", error);\n      setSnackbar({\n        open: true,\n        message: \"Failed to select air monitoring report\",\n        severity: \"error\",\n      });\n    }\n  };\n\n  const handleAirMonitoringFileUpload = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      setAirMonitoringFile(file);\n    }\n  };\n\n  const handleUploadAirMonitoringReport = async () => {\n    if (!airMonitoringFile) {\n      setSnackbar({\n        open: true,\n        message: \"Please select a file to upload\",\n        severity: \"error\",\n      });\n      return;\n    }\n\n    try {\n      setUploadingReport(true);\n\n      // Convert file to base64\n      const base64Data = await convertToBase64(airMonitoringFile);\n\n      // Upload to backend\n      await asbestosClearanceService.uploadAirMonitoringReport(clearanceId, {\n        reportData: base64Data,\n      });\n\n      setSnackbar({\n        open: true,\n        message: \"Air monitoring report uploaded successfully\",\n        severity: \"success\",\n      });\n\n      setAirMonitoringDialogOpen(false);\n      setAirMonitoringFile(null);\n      fetchData(); // Refresh clearance data\n    } catch (error) {\n      console.error(\"Error uploading air monitoring report:\", error);\n      setSnackbar({\n        open: true,\n        message: \"Failed to upload air monitoring report\",\n        severity: \"error\",\n      });\n    } finally {\n      setUploadingReport(false);\n    }\n  };\n\n  const handleRemoveAirMonitoringReport = async () => {\n    if (\n      window.confirm(\n        \"Are you sure you want to remove the air monitoring report?\"\n      )\n    ) {\n      try {\n        // Update the clearance to remove the air monitoring report\n        await asbestosClearanceService.update(clearanceId, {\n          airMonitoringReport: null,\n        });\n\n        setSnackbar({\n          open: true,\n          message: \"Air monitoring report removed successfully\",\n          severity: \"success\",\n        });\n\n        fetchData(); // Refresh clearance data\n      } catch (error) {\n        console.error(\"Error removing air monitoring report:\", error);\n        setSnackbar({\n          open: true,\n          message: \"Failed to remove air monitoring report\",\n          severity: \"error\",\n        });\n      }\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        height=\"400px\"\n      >\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box m=\"20px\">\n        <Alert severity=\"error\">{error}</Alert>\n      </Box>\n    );\n  }\n\n  return (\n    <PermissionGate requiredPermissions={[\"asbestos.view\"]}>\n      <Box m=\"20px\">\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Box display=\"flex\" alignItems=\"center\" gap={2}>\n            <IconButton\n              onClick={() => navigate(\"/clearances/asbestos\")}\n              color=\"primary\"\n            >\n              <ArrowBackIcon />\n            </IconButton>\n            <Box>\n              <Typography\n                variant=\"h2\"\n                color={colors.grey[100]}\n                fontWeight=\"bold\"\n                sx={{ mb: \"5px\" }}\n              >\n                Clearance Items\n              </Typography>\n              {clearance && (\n                <Typography variant=\"h6\" color={colors.secondary[500]}>\n                  {clearance.projectId?.name || \"Unknown Project\"} -{\" \"}\n                  {clearance.clearanceDate\n                    ? new Date(clearance.clearanceDate).toLocaleDateString()\n                    : \"Unknown Date\"}\n                </Typography>\n              )}\n            </Box>\n          </Box>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              setEditingItem(null);\n              resetForm();\n              setDialogOpen(true);\n            }}\n            startIcon={<AddIcon />}\n          >\n            Add Item\n          </Button>\n        </Box>\n\n        {/* Air Monitoring Buttons */}\n        {clearance?.airMonitoring && (\n          <Box display=\"flex\" gap={2} sx={{ mt: 2 }} alignItems=\"center\">\n            {clearance.airMonitoringReport && (\n              <Typography\n                variant=\"body2\"\n                color=\"error\"\n                sx={{ fontWeight: \"medium\" }}\n              >\n                ✓ Air Monitoring Report Attached\n              </Typography>\n            )}\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={handleOpenAirMonitoringReportsDialog}\n              startIcon={<DescriptionIcon />}\n            >\n              {clearance.airMonitoringReport\n                ? \"Replace Air Monitoring Report\"\n                : \"Select Air Monitoring Report\"}\n            </Button>\n            {clearance.airMonitoringReport && (\n              <Button\n                variant=\"outlined\"\n                color=\"error\"\n                onClick={handleRemoveAirMonitoringReport}\n                startIcon={<DeleteIcon />}\n              >\n                Remove Report\n              </Button>\n            )}\n          </Box>\n        )}\n\n        {/* Job Specific Exclusions */}\n        <Card sx={{ mt: 3 }}>\n          <CardContent>\n            <Typography variant=\"h6\" color={colors.grey[100]} sx={{ mb: 2 }}>\n              Job Specific Exclusions\n            </Typography>\n            <TextField\n              fullWidth\n              label=\"Job Specific Exclusions\"\n              value={clearance?.jobSpecificExclusions || \"\"}\n              onChange={(e) => {\n                // Update local state for the text field\n                setClearance((prev) => ({\n                  ...prev,\n                  jobSpecificExclusions: e.target.value,\n                }));\n              }}\n              multiline\n              rows={4}\n              placeholder=\"Enter job-specific exclusions that will be added to the Inspection Exclusions section of the report...\"\n              helperText={\n                clearance?.jobSpecificExclusions && !savingExclusions\n                  ? \"This text will be appended to the standard Inspection Exclusions section in the clearance report.\"\n                  : savingExclusions\n                  ? \"Saving...\"\n                  : \"This text will be appended to the standard Inspection Exclusions section in the clearance report.\"\n              }\n              InputProps={{\n                endAdornment: savingExclusions ? (\n                  <CircularProgress size={20} sx={{ mr: 1 }} />\n                ) : null,\n              }}\n            />\n            <Box sx={{ mt: 2, display: \"flex\", justifyContent: \"flex-end\" }}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={async () => {\n                  try {\n                    setSavingExclusions(true);\n                    await asbestosClearanceService.update(clearanceId, {\n                      jobSpecificExclusions:\n                        clearance?.jobSpecificExclusions || \"\",\n                    });\n                    setSnackbar({\n                      open: true,\n                      message: \"Job specific exclusions saved successfully\",\n                      severity: \"success\",\n                    });\n                    setExclusionsLastSaved(new Date());\n                  } catch (error) {\n                    console.error(\n                      \"Error saving job specific exclusions:\",\n                      error\n                    );\n                    setSnackbar({\n                      open: true,\n                      message: \"Failed to save job specific exclusions\",\n                      severity: \"error\",\n                    });\n                  } finally {\n                    setSavingExclusions(false);\n                  }\n                }}\n                disabled={savingExclusions}\n              >\n                {savingExclusions ? (\n                  <CircularProgress size={24} color=\"inherit\" />\n                ) : (\n                  \"Save Exclusions\"\n                )}\n              </Button>\n            </Box>\n            {exclusionsLastSaved && (\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n                Last saved: {formatDate(exclusionsLastSaved)}\n              </Typography>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card sx={{ mt: 3 }}>\n          <CardContent>\n            <TableContainer component={Paper}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Location</TableCell>\n                    <TableCell>Material Description</TableCell>\n                    <TableCell>Asbestos Type</TableCell>\n                    <TableCell>Photograph</TableCell>\n                    <TableCell>Notes</TableCell>\n                    <TableCell>Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {(items || []).map((item) => (\n                    <TableRow key={item._id}>\n                      <TableCell>{item.locationDescription}</TableCell>\n                      <TableCell>{item.materialDescription}</TableCell>\n                      <TableCell>\n                        <Chip\n                          label={item.asbestosType}\n                          color={getAsbestosTypeColor(item.asbestosType)}\n                          size=\"small\"\n                        />\n                      </TableCell>\n                      <TableCell>\n                        {item.photograph ? (\n                          <Chip label=\"Yes\" color=\"success\" size=\"small\" />\n                        ) : (\n                          <Chip label=\"No\" color=\"default\" size=\"small\" />\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {item.notes ? (\n                          <Typography variant=\"body2\" noWrap>\n                            {item.notes}\n                          </Typography>\n                        ) : (\n                          <Typography variant=\"body2\" color=\"text.secondary\">\n                            No notes\n                          </Typography>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <IconButton\n                          onClick={() => handleEdit(item)}\n                          color=\"primary\"\n                          size=\"small\"\n                          title=\"Edit\"\n                        >\n                          <EditIcon />\n                        </IconButton>\n                        <IconButton\n                          onClick={() => handleDelete(item)}\n                          color=\"error\"\n                          size=\"small\"\n                          title=\"Delete\"\n                        >\n                          <DeleteIcon />\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </CardContent>\n        </Card>\n\n        {/* Add/Edit Dialog */}\n        <Dialog\n          open={dialogOpen}\n          onClose={() => setDialogOpen(false)}\n          maxWidth=\"md\"\n          fullWidth\n        >\n          <DialogTitle>\n            {editingItem ? \"Edit Item\" : \"Add New Item\"}\n          </DialogTitle>\n          <form onSubmit={handleSubmit}>\n            <DialogContent>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    label=\"Location Description\"\n                    value={form.locationDescription}\n                    onChange={(e) =>\n                      setForm({ ...form, locationDescription: e.target.value })\n                    }\n                    required\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    label=\"Material Description\"\n                    value={form.materialDescription}\n                    onChange={(e) =>\n                      setForm({ ...form, materialDescription: e.target.value })\n                    }\n                    required\n                  />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <FormControl fullWidth required>\n                    <InputLabel>Asbestos Type</InputLabel>\n                    <Select\n                      value={form.asbestosType}\n                      onChange={(e) =>\n                        setForm({ ...form, asbestosType: e.target.value })\n                      }\n                      label=\"Asbestos Type\"\n                    >\n                      <MenuItem value=\"non-friable\">Non-friable</MenuItem>\n                      <MenuItem value=\"friable\">Friable</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <Box>\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Photograph\n                    </Typography>\n                    <Box sx={{ display: \"flex\", gap: 1, mb: 2 }}>\n                      <Button\n                        variant=\"outlined\"\n                        startIcon={<PhotoCameraIcon />}\n                        onClick={handleTakePhoto}\n                        size=\"small\"\n                      >\n                        Take Photo\n                      </Button>\n                      <Button\n                        variant=\"outlined\"\n                        startIcon={<UploadIcon />}\n                        component=\"label\"\n                        size=\"small\"\n                      >\n                        Upload Photo\n                        <input\n                          type=\"file\"\n                          hidden\n                          accept=\"image/*\"\n                          onChange={handlePhotoUpload}\n                        />\n                      </Button>\n                      {photoPreview && (\n                        <Button\n                          variant=\"outlined\"\n                          color=\"error\"\n                          startIcon={<DeletePhotoIcon />}\n                          onClick={handleRemovePhoto}\n                          size=\"small\"\n                        >\n                          Remove\n                        </Button>\n                      )}\n                    </Box>\n                    {photoPreview && (\n                      <Box\n                        sx={{\n                          width: 200,\n                          height: 150,\n                          borderRadius: 1,\n                          overflow: \"hidden\",\n                          border: \"1px solid #ddd\",\n                          mb: 2,\n                        }}\n                      >\n                        <img\n                          src={photoPreview}\n                          alt=\"Preview\"\n                          style={{\n                            width: \"100%\",\n                            height: \"100%\",\n                            objectFit: \"cover\",\n                          }}\n                        />\n                      </Box>\n                    )}\n                    {compressionStatus && (\n                      <Alert\n                        severity={compressionStatus.type}\n                        sx={{ mb: 2 }}\n                        icon={\n                          compressionStatus.type === \"processing\" ||\n                          compressionStatus.type === \"compressing\" ? (\n                            <CircularProgress size={16} />\n                          ) : undefined\n                        }\n                      >\n                        {compressionStatus.message}\n                      </Alert>\n                    )}\n                  </Box>\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    label=\"Notes\"\n                    value={form.notes}\n                    onChange={(e) =>\n                      setForm({ ...form, notes: e.target.value })\n                    }\n                    multiline\n                    rows={3}\n                  />\n                </Grid>\n              </Grid>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={() => setDialogOpen(false)}>Cancel</Button>\n              <Button type=\"submit\" variant=\"contained\">\n                {editingItem ? \"Update\" : \"Create\"}\n              </Button>\n            </DialogActions>\n          </form>\n        </Dialog>\n\n        {/* Air Monitoring Reports Selection Dialog */}\n        <Dialog\n          open={airMonitoringReportsDialogOpen}\n          onClose={() => setAirMonitoringReportsDialogOpen(false)}\n          maxWidth=\"md\"\n          fullWidth\n        >\n          <DialogTitle>Select Air Monitoring Report</DialogTitle>\n          <DialogContent>\n            <Box sx={{ mt: 2 }}>\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                Select an air monitoring report from the list below. This will\n                be included in the clearance report as Appendix B.\n              </Typography>\n\n              {loadingReports ? (\n                <Box\n                  display=\"flex\"\n                  justifyContent=\"center\"\n                  alignItems=\"center\"\n                  height=\"200px\"\n                >\n                  <CircularProgress />\n                </Box>\n              ) : airMonitoringReports.length === 0 ? (\n                <Alert severity=\"info\">\n                  No air monitoring reports found for this project. Reports must\n                  be completed and authorized to appear here.\n                </Alert>\n              ) : (\n                <Box sx={{ maxHeight: 400, overflow: \"auto\" }}>\n                  {airMonitoringReports.map((report, index) => (\n                    <Card\n                      key={report._id}\n                      sx={{\n                        mb: 2,\n                        cursor: \"pointer\",\n                        \"&:hover\": {\n                          backgroundColor: \"action.hover\",\n                        },\n                        border: selectedReport?._id === report._id ? 2 : 1,\n                        borderColor:\n                          selectedReport?._id === report._id\n                            ? \"primary.main\"\n                            : \"divider\",\n                      }}\n                      onClick={() => handleSelectAirMonitoringReport(report)}\n                    >\n                      <CardContent sx={{ py: 2 }}>\n                        <Box\n                          display=\"flex\"\n                          justifyContent=\"space-between\"\n                          alignItems=\"flex-start\"\n                        >\n                          <Box flex={1}>\n                            <Box\n                              display=\"flex\"\n                              alignItems=\"center\"\n                              gap={1}\n                              mb={1}\n                            >\n                              <Typography\n                                variant=\"subtitle1\"\n                                fontWeight=\"medium\"\n                              >\n                                {report.name}\n                              </Typography>\n                              <Chip\n                                label={\n                                  report.reportApprovedBy\n                                    ? \"Authorized\"\n                                    : report.status\n                                }\n                                color={\n                                  report.reportApprovedBy\n                                    ? \"success\"\n                                    : \"default\"\n                                }\n                                size=\"small\"\n                              />\n                            </Box>\n                            <Typography\n                              variant=\"body2\"\n                              color=\"text.secondary\"\n                              mb={0.5}\n                            >\n                              Job: {report.jobName}\n                            </Typography>\n                            <Typography variant=\"body2\" color=\"text.secondary\">\n                              Date: {formatDate(report.date)}\n                              {report.reportIssueDate &&\n                                ` • Issue Date: ${formatDate(\n                                  report.reportIssueDate\n                                )}`}\n                            </Typography>\n                          </Box>\n                          {selectedReport?._id === report._id && (\n                            <CircularProgress size={20} />\n                          )}\n                        </Box>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </Box>\n              )}\n            </Box>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setAirMonitoringReportsDialogOpen(false)}>\n              Cancel\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n        {/* Snackbar for notifications */}\n        <Snackbar\n          open={snackbar.open}\n          autoHideDuration={6000}\n          onClose={() => setSnackbar({ ...snackbar, open: false })}\n        >\n          <Alert\n            onClose={() => setSnackbar({ ...snackbar, open: false })}\n            severity={snackbar.severity}\n          >\n            {snackbar.message}\n          </Alert>\n        </Snackbar>\n      </Box>\n    </PermissionGate>\n  );\n};\n\nexport default ClearanceItems;\n","/**\r\n * Compress image to reduce file size while maintaining quality\r\n * @param {File} file - The image file to compress\r\n * @param {Object} options - Compression options\r\n * @param {number} options.maxWidth - Maximum width (default: 1200)\r\n * @param {number} options.maxHeight - Maximum height (default: 1200)\r\n * @param {number} options.quality - JPEG quality 0-1 (default: 0.8)\r\n * @param {number} options.maxSizeKB - Maximum file size in KB (default: 500)\r\n * @returns {Promise<string>} - Compressed image as base64 data URL\r\n */\r\nexport const compressImage = (file, options = {}) => {\r\n  return new Promise((resolve, reject) => {\r\n    const {\r\n      maxWidth = 1000,\r\n      maxHeight = 1000,\r\n      quality = 0.75,\r\n      maxSizeKB = 300\r\n    } = options;\r\n\r\n    // Check if file is an image\r\n    if (!file.type.startsWith('image/')) {\r\n      reject(new Error('File is not an image'));\r\n      return;\r\n    }\r\n\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    const img = new Image();\r\n\r\n    img.onload = () => {\r\n      // Calculate new dimensions while maintaining aspect ratio\r\n      let { width, height } = img;\r\n      \r\n      if (width > maxWidth || height > maxHeight) {\r\n        const ratio = Math.min(maxWidth / width, maxHeight / height);\r\n        width *= ratio;\r\n        height *= ratio;\r\n      }\r\n\r\n      // Set canvas dimensions\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n\r\n      // Draw and compress image\r\n      ctx.drawImage(img, 0, 0, width, height);\r\n\r\n      // Convert to base64 with quality setting\r\n      let compressedDataUrl = canvas.toDataURL('image/jpeg', quality);\r\n\r\n      // If still too large, reduce quality further\r\n      const sizeKB = (compressedDataUrl.length * 0.75) / 1024; // Approximate size\r\n      \r\n      if (sizeKB > maxSizeKB && quality > 0.4) {\r\n        const newQuality = Math.max(0.4, quality * (maxSizeKB / sizeKB));\r\n        compressedDataUrl = canvas.toDataURL('image/jpeg', newQuality);\r\n      }\r\n\r\n      console.log(`Image compressed: ${file.size / 1024}KB -> ${(compressedDataUrl.length * 0.75) / 1024}KB`);\r\n      resolve(compressedDataUrl);\r\n    };\r\n\r\n    img.onerror = () => {\r\n      reject(new Error('Failed to load image'));\r\n    };\r\n\r\n    // Load image from file\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      img.src = e.target.result;\r\n    };\r\n    reader.onerror = () => {\r\n      reject(new Error('Failed to read file'));\r\n    };\r\n    reader.readAsDataURL(file);\r\n  });\r\n};\r\n\r\n/**\r\n * Get file size in KB\r\n * @param {string} base64DataUrl - Base64 data URL\r\n * @returns {number} - File size in KB\r\n */\r\nexport const getBase64SizeKB = (base64DataUrl) => {\r\n  return (base64DataUrl.length * 0.75) / 1024;\r\n};\r\n\r\n/**\r\n * Check if image needs compression\r\n * @param {File} file - The image file to check\r\n * @param {number} maxSizeKB - Maximum size in KB (default: 500)\r\n * @returns {boolean} - True if compression is needed\r\n */\r\nexport const needsCompression = (file, maxSizeKB = 500) => {\r\n  return file.size / 1024 > maxSizeKB;\r\n}; ","import axios from './axios';\r\n\r\nconst API_BASE_URL = '/asbestos-clearances';\r\n\r\nconst asbestosClearanceService = {\r\n  // Get all asbestos clearances with optional filters\r\n  getAll: async (params = {}) => {\r\n    const response = await axios.get(API_BASE_URL, { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Get single asbestos clearance by ID\r\n  getById: async (id) => {\r\n    const response = await axios.get(`${API_BASE_URL}/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create new asbestos clearance\r\n  create: async (clearanceData) => {\r\n    const response = await axios.post(API_BASE_URL, clearanceData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update asbestos clearance\r\n  update: async (id, clearanceData) => {\r\n    const response = await axios.put(`${API_BASE_URL}/${id}`, clearanceData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete asbestos clearance\r\n  delete: async (id) => {\r\n    const response = await axios.delete(`${API_BASE_URL}/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update status only\r\n  updateStatus: async (id, status) => {\r\n    const response = await axios.patch(`${API_BASE_URL}/${id}/status`, { status });\r\n    return response.data;\r\n  },\r\n\r\n  // Get statistics\r\n  getStats: async () => {\r\n    const response = await axios.get(`${API_BASE_URL}/stats/overview`);\r\n    return response.data;\r\n  },\r\n\r\n  // Search clearances\r\n  search: async (searchTerm, filters = {}) => {\r\n    const params = {\r\n      search: searchTerm,\r\n      ...filters\r\n    };\r\n    const response = await axios.get(API_BASE_URL, { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Get clearances by status\r\n  getByStatus: async (status) => {\r\n    const response = await axios.get(API_BASE_URL, { \r\n      params: { status } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get clearances by asbestos removalist\r\n  getByRemovalist: async (asbestosRemovalist) => {\r\n    const response = await axios.get(API_BASE_URL, { \r\n      params: { asbestosRemovalist } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Upload air monitoring report\r\n  uploadAirMonitoringReport: async (id, reportData) => {\r\n    const response = await axios.post(`${API_BASE_URL}/${id}/air-monitoring-report`, reportData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get clearance items\r\n  getItems: async (clearanceId) => {\r\n    const response = await axios.get(`${API_BASE_URL}/${clearanceId}/items`);\r\n    return response.data;\r\n  },\r\n\r\n  // Add clearance item\r\n  addItem: async (clearanceId, itemData) => {\r\n    const response = await axios.post(`${API_BASE_URL}/${clearanceId}/items`, itemData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update clearance item\r\n  updateItem: async (clearanceId, itemId, itemData) => {\r\n    const response = await axios.put(`${API_BASE_URL}/${clearanceId}/items/${itemId}`, itemData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete clearance item\r\n  deleteItem: async (clearanceId, itemId) => {\r\n    const response = await axios.delete(`${API_BASE_URL}/${clearanceId}/items/${itemId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get air monitoring reports for a project\r\n  getAirMonitoringReports: async (projectId) => {\r\n    const response = await axios.get(`${API_BASE_URL}/air-monitoring-reports/${projectId}`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default asbestosClearanceService; ","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"circle\", {\n  cx: \"12\",\n  cy: \"12\",\n  r: \"3.2\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"M9 2 7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3.17L15 2zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5\"\n}, \"1\")], 'PhotoCamera');"],"names":["createSvgIcon","_jsx","d","ClearanceItems","_clearance$projectId2","colors","tokens","navigate","useNavigate","clearanceId","useParams","items","setItems","useState","clearance","setClearance","loading","setLoading","error","setError","dialogOpen","setDialogOpen","editingItem","setEditingItem","snackbar","setSnackbar","open","message","severity","form","setForm","locationDescription","materialDescription","asbestosType","photograph","notes","photoPreview","setPhotoPreview","photoFile","setPhotoFile","compressionStatus","setCompressionStatus","airMonitoringDialogOpen","setAirMonitoringDialogOpen","airMonitoringFile","setAirMonitoringFile","uploadingReport","setUploadingReport","airMonitoringReportsDialogOpen","setAirMonitoringReportsDialogOpen","airMonitoringReports","setAirMonitoringReports","loadingReports","setLoadingReports","selectedReport","setSelectedReport","savingExclusions","setSavingExclusions","exclusionsLastSaved","setExclusionsLastSaved","useEffect","fetchData","async","itemsData","clearanceData","Promise","all","asbestosClearanceService","getItems","getById","console","log","err","resetForm","getAsbestosTypeColor","type","handlePhotoUpload","file","event","target","files","originalSizeKB","Math","round","size","shouldCompress","maxSizeKB","arguments","length","undefined","needsCompression","compressedImage","options","resolve","reject","maxWidth","maxHeight","quality","startsWith","Error","canvas","document","createElement","ctx","getContext","img","Image","onload","width","height","ratio","min","drawImage","compressedDataUrl","toDataURL","sizeKB","newQuality","max","concat","onerror","reader","FileReader","e","src","result","readAsDataURL","compressImage","compressedSizeKB","reduction","_objectSpread","Box","display","justifyContent","alignItems","children","CircularProgress","m","Alert","PermissionGate","requiredPermissions","_jsxs","gap","IconButton","onClick","color","ArrowBackIcon","Typography","variant","grey","fontWeight","sx","mb","secondary","projectId","name","clearanceDate","Date","toLocaleDateString","Button","startIcon","AddIcon","airMonitoring","mt","airMonitoringReport","handleOpenAirMonitoringReportsDialog","_clearance$projectId","_id","reports","getAirMonitoringReports","fetchAirMonitoringReports","DescriptionIcon","window","confirm","update","DeleteIcon","Card","CardContent","TextField","fullWidth","label","value","jobSpecificExclusions","onChange","prev","multiline","rows","placeholder","helperText","InputProps","endAdornment","mr","disabled","formatDate","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","item","Chip","noWrap","handleEdit","title","EditIcon","deleteItem","handleDelete","Dialog","onClose","DialogTitle","onSubmit","preventDefault","itemData","updateItem","addItem","DialogContent","Grid","container","spacing","xs","required","md","FormControl","InputLabel","Select","MenuItem","gutterBottom","PhotoCameraIcon","handleTakePhoto","input","accept","capture","onchange","click","UploadIcon","hidden","DeletePhotoIcon","handleRemovePhoto","borderRadius","overflow","border","alt","style","objectFit","icon","DialogActions","report","index","cursor","backgroundColor","borderColor","generateShiftReport","shiftService","jobService","sampleService","projectService","clientService","shift","data","job","jobId","samples","getByShift","project","client","clientResponse","base64Data","returnPdfData","split","uploadAirMonitoringReport","reportData","handleSelectAirMonitoringReport","py","flex","reportApprovedBy","status","jobName","date","reportIssueDate","Snackbar","autoHideDuration","API_BASE_URL","getAll","params","axios","get","id","create","post","put","delete","updateStatus","patch","getStats","search","searchTerm","filters","getByStatus","getByRemovalist","asbestosRemovalist","itemId","cx","cy","r"],"sourceRoot":""}