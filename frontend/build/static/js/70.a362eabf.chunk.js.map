{"version":3,"file":"static/js/70.a362eabf.chunk.js","mappings":"iKAEO,MAAMA,EAAwB,CAEnCC,gBAAiBC,UACf,IAEE,MAAOC,EAA4BC,SAAiCC,QAAQC,IAAI,CAC9EC,EAAAA,GAAIC,IAAI,iCACRD,EAAAA,GAAIC,IAAI,gCASV,MALqB,IAChBL,EAA2BM,QAC3BL,EAAwBK,KAI/B,CAAE,MAAOC,GAEP,MADAC,QAAQD,MAAM,mCAAoCA,GAC5CA,CACR,GAIFE,kBAAmBV,UACjB,IACE,IAAIW,EAEJ,GAAqB,gCAAjBC,GAAmE,6BAAjBA,EACpDD,QAAiBN,EAAAA,GAAIC,IAAI,iCAADO,OAAkCD,QACrD,IAAqB,mBAAjBA,EAGT,MAAM,IAAIE,MAAM,0BAADD,OAA2BD,IAF1CD,QAAiBN,EAAAA,GAAIC,IAAI,8BAADO,OAA+BD,GAGzD,CAEA,OAAOD,EAASJ,IAClB,CAAE,MAAOC,GAEP,MADAC,QAAQD,MAAM,kCAAmCA,GAC3CA,CACR,GAIFO,eAAgBf,UACd,IACE,MAAM,aAAEY,GAAiBI,EACzB,IAAIL,EAEJ,GAAqB,gCAAjBC,GAAmE,6BAAjBA,EACpDD,QAAiBN,EAAAA,GAAIY,KAAK,gCAAiCD,OACtD,IAAqB,mBAAjBJ,EAGT,MAAM,IAAIE,MAAM,0BAADD,OAA2BD,IAF1CD,QAAiBN,EAAAA,GAAIY,KAAK,6BAA8BD,EAG1D,CAEA,OAAOL,EAASJ,IAClB,CAAE,MAAOC,GAEP,MADAC,QAAQD,MAAM,kCAAmCA,GAC3CA,CACR,GAIFU,eAAgBlB,MAAOY,EAAcO,KACnC,IACE,IAAIR,EAEJ,GAAqB,gCAAjBC,GAAmE,6BAAjBA,EACpDD,QAAiBN,EAAAA,GAAIe,IAAI,iCAADP,OAAkCD,GAAgBO,OACrE,IAAqB,mBAAjBP,EAGT,MAAM,IAAIE,MAAM,0BAADD,OAA2BD,IAF1CD,QAAiBN,EAAAA,GAAIe,IAAI,8BAADP,OAA+BD,GAAgBO,EAGzE,CAEA,OAAOR,EAASJ,IAClB,CAAE,MAAOC,GAEP,MADAC,QAAQD,MAAM,kCAAmCA,GAC3CA,CACR,GAIFa,eAAgBrB,UACd,IACE,IAAIW,EAEJ,GAAqB,gCAAjBC,GAAmE,6BAAjBA,EACpDD,QAAiBN,EAAAA,GAAIiB,OAAO,iCAADT,OAAkCD,QACxD,IAAqB,mBAAjBA,EAGT,MAAM,IAAIE,MAAM,0BAADD,OAA2BD,IAF1CD,QAAiBN,EAAAA,GAAIiB,OAAO,8BAADT,OAA+BD,GAG5D,CAEA,OAAOD,EAASJ,IAClB,CAAE,MAAOC,GAEP,MADAC,QAAQD,MAAM,kCAAmCA,GAC3CA,CACR,GAIFe,2BAA4BvB,UAC1B,MAAMwB,EAAmB,CACvB,CACEZ,aAAc,8BACda,eAAgB,CACdC,KAAM,2CACNC,QAAS,sCACTC,MAAO,yBACPC,MAAO,iBACPC,QAAS,mBACTC,IAAK,kBAEPC,cAAe,CACbC,MAAO,yCACPC,SAAU,gCAGd,CACEtB,aAAc,2BACda,eAAgB,CACdC,KAAM,2CACNC,QAAS,sCACTC,MAAO,yBACPC,MAAO,iBACPC,QAAS,mBACTC,IAAK,kBAEPC,cAAe,CACbC,MAAO,yCACPC,SAAU,gCAGd,CACEtB,aAAc,iBACda,eAAgB,CACdC,KAAM,2CACNC,QAAS,sCACTC,MAAO,yBACPC,MAAO,iBACPC,QAAS,mBACTC,IAAK,kBAEPC,cAAe,CACbC,MAAO,yBACPC,SAAU,4BAKhB,IAEE,IAAK,MAAMC,KAAYX,EACrB,UACQ1B,EAAsBY,kBAAkByB,EAASvB,aACzD,CAAE,MAAOJ,GAAQ,IAAD4B,EACiB,OAAb,QAAdA,EAAA5B,EAAMG,gBAAQ,IAAAyB,OAAA,EAAdA,EAAgBC,gBAEZvC,EAAsBiB,eAAeoB,GAC3C1B,QAAQ6B,IAAI,gCAADzB,OAAiCsB,EAASvB,eAEzD,CAEJ,CAAE,MAAOJ,GAEP,MADAC,QAAQD,MAAM,wCAAyCA,GACjDA,CACR,IAIJ,G,6VC5KA,SAAe+B,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,2IACD,Q,eCFJ,SAAeF,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,gVACD,W,2DCiCJ,MAuyCA,EAvyCwBC,MACRC,EAAAA,EAAAA,KAAd,MACMC,EAASC,EAAAA,IACT,KAAEC,IAASC,EAAAA,EAAAA,OAEVC,EAAkBC,IAAuBC,EAAAA,EAAAA,UAC9C,gCAEKC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,CAAC,IACrCG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAEhCK,EAAgBC,IAAqBN,EAAAA,EAAAA,UAAS,OAC9CO,EAAUC,IAAeR,EAAAA,EAAAA,UAAS,CAAC,IACnCS,EAAYC,IAAiBV,EAAAA,EAAAA,WAAS,IACtCW,EAAYC,IAAiBZ,EAAAA,EAAAA,UAAS,CAC3Ca,MAAM,EACNC,QAAS,GACTC,SAAU,aAGLC,EAAaC,IAAkBjB,EAAAA,EAAAA,UAAS,CAAC,IACzCkB,EAAaC,IAAkBnB,EAAAA,EAAAA,WAAS,IACxCoB,GAAeC,KAAoBrB,EAAAA,EAAAA,WAAS,GA6D7CsB,GAAiB5D,IAErB,GACmB,gCAAjBA,GACiB,6BAAjBA,EACA,CACA,MAAM6D,EAA6B,6BAAjB7D,EAClB,MAAO,CACL8D,YAAa,wBACbC,cAAeF,EAAY,UAAY,cACvCG,UAAW,kCACXC,oBAAqB,gCACrBC,SAAU,iBACVC,YAAa,UACbC,gBAAiB,WACjBC,gBAAiB,eACjBC,YAAaT,EAAY,UAAY,cACrCU,aAAc,kCACdC,eAAgB,eAChBC,aAAc,uCACdC,eAAgB,eAChBC,eAAgB,WAEpB,CAGA,MAAqB,mBAAjB3E,EACK,CACLgE,UAAW,yCACXS,aAAc,8CACdG,qBAAsB,kDACtBC,kBAAmB,OACnBC,kBAAmB,KACnBC,iBAAkB,IAClBC,YAAa,eACbC,cAAe,iBACfC,iBAAkB,WAKf,CACLpB,YAAa,wBACbE,UAAW,kCACXS,aAAc,uCACf,EA8EGU,IA3EavB,GAAcxB,GAGJpC,KAE3B,GACmB,gCAAjBA,GACiB,6BAAjBA,EACA,CACA,MAAMoF,EAAe,CACnB,yBAA0B,CACxB,6BACA,gCAEF,2BAA4B,CAC1B,+BACA,kCAEF,qBAAsB,CACpB,yBACA,4BAEF,wBAAyB,CACvB,4BACA,+BAEF,0BAA2B,CACzB,8BACA,iCAEF,WAAY,CAAC,kBACbC,OAAQ,CAAC,eAgBX,MAZqB,gCAAjBrF,EACFoF,EAAa,iDAAmD,CAC9D,iDACA,oDAEwB,6BAAjBpF,IACToF,EAAa,6CAA+C,CAC1D,8CACA,kDAIGA,CACT,CAGA,MAAqB,mBAAjBpF,EACK,CACL,oBAAqB,CACnB,wBACA,2BAEF,mBAAoB,CAAC,uBAAwB,0BAC7C,yBAA0B,CACxB,6BACA,gCAEF,mBAAoB,CAAC,uBAAwB,0BAC7C,kBAAmB,CAAC,sBAAuB,yBAC3CsF,gBAAiB,CAAC,uBAAwB,0BAC1CC,WAAY,CAAC,kBAAmB,qBAChCF,OAAQ,CAAC,eAKN,CAAC,CAAC,EAIcG,CAAoBpD,KAG7CqD,EAAAA,EAAAA,YAAU,KACcrG,WACpB,IACEsD,GAAW,GAKX,MAAMgD,QAAqBxG,EAAAA,EAAsBC,kBAG3CwG,EAAe,CAAC,EACtBD,EAAaE,SAASrE,IACpBoE,EAAapE,EAASvB,cAAgBuB,CAAQ,IAGhDiB,EAAamD,GAGbpC,EAAeK,GAAcxB,GAC/B,CAAE,MAAOxC,GACPC,QAAQD,MAAM,2BAA4BA,GAC1CsD,EAAc,CACZC,MAAM,EACNC,QAAS,oDACTC,SAAU,SAEd,CAAC,QACCX,GAAW,EACb,GAGFmD,EAAe,GACd,IAEH,MAMMC,GAAaA,CAACC,EAASpG,KAC3BiD,EAAkBmD,GAClBjD,EAAYnD,GACZqD,GAAc,EAAK,EA6CfgD,GAAeA,KACnBhD,GAAc,GACdJ,EAAkB,MAClBE,EAAY,CAAC,EAAE,EAGXmD,GAAsBA,KAC1BxC,GAAgBD,EAAY,EAGxB0C,GAAuBC,IAC3B,IAAKA,EAAM,MAAO,GAClB,IAAIC,EAASD,EAIb,OAHAE,OAAOC,QAAQhD,GAAasC,SAAQW,IAAmB,IAAjBC,EAAKC,GAAMF,EAC/CH,EAASA,EAAOM,QAAQ,IAAIC,OAAO,IAAD1G,OAAKuG,EAAG,KAAK,KAAMC,EAAM,IAEtDL,CAAM,EAQTQ,GAAqBxH,UACzB,IACE,MAAMyH,EAAkBzE,EAIlB0E,EAHWvE,EAAUsE,GAGCE,iBACxB,mBACA,+BAGE7H,EAAAA,EAAsBoB,eAAeuG,EAAiB,CAC1D,CAACC,GAAa,CACZ,CAACnE,GAAiBE,KAKtBL,GAAcwE,IAAI,IAAAC,EAAA,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACbF,GAAI,IACP,CAACH,IAAeK,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXF,EAAKH,IAAgB,IACxB,CAACC,IAAUI,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACe,QADfD,EACND,EAAKH,UAAgB,IAAAI,OAAA,EAArBA,EAAwBH,IAAW,IACtC,CAACnE,GAAiBE,OAErB,IAGHK,EAAc,CACZC,MAAM,EACNC,QAAQ,GAADnD,OAAK0C,EAAc,0BAC1BU,SAAU,YAGZT,EAAkB,MAClBE,EAAY,CAAC,GAGbqE,YAAW,KACTjE,EAAc,CAAEC,MAAM,EAAOC,QAAS,GAAIC,SAAU,WAAY,GAC/D,IACL,CAAE,MAAOzD,GACPC,QAAQD,MAAM,yBAA0BA,GACxCsD,EAAc,CACZC,MAAM,EACNC,QAAS,0CACTC,SAAU,SAEd,GAGI+D,GAAqBhI,UACzB,MACMmC,EAAWgB,EADOH,GAExB,GAAKb,EAAL,CAEAoC,IAAiB,GACjB,UAEyB0D,EAAAA,EAAAA,qBACrB9F,EACA+B,EACA4C,IAGFhD,EAAc,CACZC,MAAM,EACNC,QAAS,sCACTC,SAAU,YAIZ8D,YAAW,KACTjE,EAAc,CAAEC,MAAM,EAAOC,QAAS,GAAIC,SAAU,WAAY,GAC/D,IACL,CAAE,MAAOzD,GACPC,QAAQD,MAAM,wBAAyBA,GACvCsD,EAAc,CACZC,MAAM,EACNC,QAAS,0CACTC,SAAU,SAEd,CAAC,QACCM,IAAiB,EACnB,CA9BqB,CA8BrB,EA0GI2D,GAAgCA,CAACC,EAAaC,KAClD,MACMjG,EAAWgB,EADOH,GAExB,OAAKb,GAGHK,EAAAA,EAAAA,KAAC6F,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,GAAGC,UAChBhG,EAAAA,EAAAA,KAACiG,EAAAA,EAAI,CAAAD,UACHE,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CAAAH,SAAA,EACVhG,EAAAA,EAAAA,KAACoG,EAAAA,EAAG,CACFC,GAAI,CACFC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,GAAI,GACJT,UAEFhG,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAACC,QAAQ,KAAKC,MAAM,QAAOZ,SACnCL,OAGL3F,EAAAA,EAAAA,KAAC6F,EAAAA,GAAI,CAACgB,WAAS,EAACC,QAAS,EAAEd,SACxBJ,EAAOmB,KAAKC,IACXhH,EAAAA,EAAAA,KAAC6F,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,GAAGC,UAChBE,EAAAA,EAAAA,MAACE,EAAAA,EAAG,CACFC,GAAI,CACFY,EAAG,EACHC,OAAO,aAAD7I,OAAe+B,EAAO+G,KAAK,MACjCC,aAAc,EACdC,SAAU,YACVrB,SAAA,EAEFE,EAAAA,EAAAA,MAACE,EAAAA,EAAG,CACFC,GAAI,CACFC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,GAAI,GACJT,SAAA,EAEFhG,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAACC,QAAQ,YAAYC,MAAM,QAAOZ,SAC1CgB,EAAMM,OAAO,GAAGC,cACfP,EAAMQ,MAAM,GAAG1C,QAAQ,WAAY,UAEvC9E,EAAAA,EAAAA,KAACyH,EAAAA,EAAU,CACTC,QAASA,IAjPJC,EAACX,EAAOjJ,KACjCiD,EAAkBgG,GAClB9F,EAAYnD,EAAK,EAgPK4J,CACEX,EACArH,EAASwF,iBAAiB6B,IAAU,IAGxCY,KAAK,QAAO5B,UAEZhG,EAAAA,EAAAA,KAAC6H,EAAAA,EAAQ,UAGb7H,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CACTC,QAAQ,QACRC,MAAM,QACNP,GAAI,CAAEyB,WAAY,YAAa9B,SAE9BrG,EAASwF,iBAAiB6B,IAAU,SAtCnBA,aAjBVrB,GAHJ,IAkEb,EAuiBX,OACE3F,EAAAA,EAAAA,KAAC+H,EAAAA,EAAc,CAACC,oBAAqB,CAAC,cAAchC,UAClDE,EAAAA,EAAAA,MAACE,EAAAA,EAAG,CAAC6B,EAAE,OAAMjC,SAAA,EACXE,EAAAA,EAAAA,MAACE,EAAAA,EAAG,CAACE,QAAQ,OAAOC,eAAe,gBAAgBC,WAAW,SAAQR,SAAA,EACpEhG,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CACTC,QAAQ,KACRC,MAAM,QACNsB,WAAW,OACX7B,GAAI,CAAEI,GAAI,OAAQT,SACnB,sBAGDhG,EAAAA,EAAAA,KAACoG,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQ6B,IAAK,GAAInC,UACnChG,EAAAA,EAAAA,KAACoI,EAAAA,EAAM,CACLV,QAASrD,GACTgE,WAAWrI,EAAAA,EAAAA,KAACsI,EAAW,IACvB3B,QAAQ,WAAUX,SAEjBpE,EAAc,eAAiB,uBAItC5B,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAACC,QAAQ,KAAKC,MAAM,QAAOZ,SAAC,2DAItC3E,EAAWE,OACVvB,EAAAA,EAAAA,KAACuI,EAAAA,EAAK,CAAC9G,SAAUJ,EAAWI,SAAU4E,GAAI,CAAEmC,GAAI,EAAG/B,GAAI,GAAIT,SACxD3E,EAAWG,WAKhBxB,EAAAA,EAAAA,KAACoG,EAAAA,EAAG,CAACC,GAAI,CAAEmC,GAAI,GAAIxC,SAChBnF,GACCb,EAAAA,EAAAA,KAACoG,EAAAA,EAAG,CACFC,GAAI,CACFC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZiC,UAAW,SACXzC,UAEFhG,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAACC,QAAQ,KAAKC,MAAM,QAAOZ,SAAC,4BAKzChG,EAAAA,EAAAA,KAAC6F,EAAAA,GAAI,CAACgB,WAAS,EAACC,QAAS,EAAEd,SA/UR0C,MAE3B,MAAMC,EAAgBlE,OAAOmE,OAAOjI,GAAW,GAC/C,GAAkB,OAAbgI,QAAa,IAAbA,IAAAA,EAAe1J,eAClB,OAAO,KAGT,MAAMA,EAAiB0J,EAAc1J,eAC/ByF,EAAUD,OAAOC,QAAQzF,GACzB4J,EAAanE,EAAQ8C,MAAM,EAAG,GAC9BsB,EAAcpE,EAAQ8C,MAAM,GAElC,OACExH,EAAAA,EAAAA,KAAC6F,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,GAAGC,UAChBhG,EAAAA,EAAAA,KAACiG,EAAAA,EAAI,CAAAD,UACHE,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CAAAH,SAAA,EACVE,EAAAA,EAAAA,MAACE,EAAAA,EAAG,CACFC,GAAI,CACFC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,GAAI,GACJT,SAAA,EAEFhG,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAACC,QAAQ,KAAKC,MAAM,QAAOZ,SAAC,qBAGvChG,EAAAA,EAAAA,KAACyH,EAAAA,EAAU,CACTC,QAASA,IAAMxD,GAAW,iBAAkBjF,GAC5C2I,KAAK,QAAO5B,UAEZhG,EAAAA,EAAAA,KAAC6H,EAAAA,EAAQ,UAGb3B,EAAAA,EAAAA,MAACL,EAAAA,GAAI,CAACgB,WAAS,EAACC,QAAS,EAAEd,SAAA,EACzBhG,EAAAA,EAAAA,KAAC6F,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,GAAIgD,GAAI,EAAE/C,UACvBhG,EAAAA,EAAAA,KAACoG,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQ0C,cAAe,SAAUb,IAAK,GAAInC,SAC3D6C,EAAW9B,KAAIkC,IAAA,IAAErE,EAAKC,GAAMoE,EAAA,OAC3B/C,EAAAA,EAAAA,MAACE,EAAAA,EAAG,CAEFC,GAAI,CAAEC,QAAS,OAAQC,eAAgB,iBAAkBP,SAAA,EAEzDE,EAAAA,EAAAA,MAACQ,EAAAA,EAAU,CAACC,QAAQ,QAAQC,MAAM,QAAOZ,SAAA,CACtCpB,EAAI0C,OAAO,GAAGC,cACb3C,EAAI4C,MAAM,GAAG1C,QAAQ,WAAY,OAAO,QAG5C9E,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAACC,QAAQ,QAAQC,MAAM,QAAOZ,SACtCnB,MATED,EAWD,SAIZ5E,EAAAA,EAAAA,KAAC6F,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,GAAIgD,GAAI,EAAE/C,UACvBhG,EAAAA,EAAAA,KAACoG,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQ0C,cAAe,SAAUb,IAAK,GAAInC,SAC3D8C,EAAY/B,KAAImC,IAAA,IAAEtE,EAAKC,GAAMqE,EAAA,OAC5BhD,EAAAA,EAAAA,MAACE,EAAAA,EAAG,CAEFC,GAAI,CAAEC,QAAS,OAAQC,eAAgB,iBAAkBP,SAAA,EAEzDE,EAAAA,EAAAA,MAACQ,EAAAA,EAAU,CAACC,QAAQ,QAAQC,MAAM,QAAOZ,SAAA,CACtCpB,EAAI0C,OAAO,GAAGC,cACb3C,EAAI4C,MAAM,GAAG1C,QAAQ,WAAY,OAAO,QAG5C9E,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAACC,QAAQ,QAAQC,MAAM,QAAOZ,SACtCnB,MATED,EAWD,iBAOb,EAoQE8D,QAMP1I,EAAAA,EAAAA,KAACoG,EAAAA,EAAG,CAACC,GAAI,CAAEmC,GAAI,GAAIxC,UACfnF,IACAb,EAAAA,EAAAA,KAAC6F,EAAAA,GAAI,CAACgB,WAAS,EAACC,QAAS,EAAEd,SAxQDmD,MAElC,MAAMC,EAAmB,CAAC,cAAe,YAAa,gBAEhDC,EAAuB,CAC3B,gBACA,sBACA,WACA,cACA,kBACA,kBACA,cACA,eACA,iBACA,iBACA,iBACA,mBAGIC,EAAmB,CACvB,uBACA,oBACA,oBACA,mBACA,cACA,gBACA,oBAIF,IAAIC,EAAwBH,EAW5B,MARuB,gCAArB5I,GACqB,6BAArBA,EAEA+I,EAAwB,IAAIH,KAAqBC,GACnB,mBAArB7I,IACT+I,EAAwB,IAAIH,KAAqBE,KAIjDtJ,EAAAA,EAAAA,KAAC6F,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,GAAGC,UAChBhG,EAAAA,EAAAA,KAACiG,EAAAA,EAAI,CAAAD,UACHE,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CAAAH,SAAA,EACVhG,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAACC,QAAQ,KAAKC,MAAM,QAAQP,GAAI,CAAEI,GAAI,GAAIT,SAAC,4BAGtDhG,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAACC,QAAQ,QAAQC,MAAM,iBAAiBP,GAAI,CAAEI,GAAI,GAAIT,SAAC,oIAIlEhG,EAAAA,EAAAA,KAACoG,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQkD,SAAU,OAAQrB,IAAK,GAAInC,SACpDuD,EAAsBxC,KAAK0C,IAC1BzJ,EAAAA,EAAAA,KAAC0J,EAAAA,EAAI,CAEHC,MAAK,IAAAtL,OAAMoL,EAAW,KACtB7B,KAAK,QACLjB,QAAQ,WACRN,GAAI,CAAEuD,SAAU,WAJXH,aAUV,EAwMEN,QAMPnJ,EAAAA,EAAAA,KAACoG,EAAAA,EAAG,CAACC,GAAI,CAAEmC,GAAI,EAAG/B,GAAI,GAAIT,UACxBE,EAAAA,EAAAA,MAAC2D,EAAAA,EAAW,CAACC,WAAS,EAAA9D,SAAA,EACpBhG,EAAAA,EAAAA,KAAC+J,EAAAA,EAAU,CAACC,GAAG,wBAAuBhE,SAAC,4BAGvChG,EAAAA,EAAAA,KAACiK,EAAAA,EAAM,CACLC,QAAQ,wBACRrF,MAAOrE,EACPmJ,MAAM,yBACNQ,SAl8BkBC,IAC5B,MAAMC,EAAkBD,EAAME,OAAOzF,MACrCpE,EAAoB4J,GACpB1I,EAAeK,GAAcqI,GAAiB,EAg8BpChE,GAAI,CACF,sBAAuB,CACrBO,MAAO,UAETZ,SAnqCM,CAClB,CACEgE,GAAI,8BACJ9K,KAAM,wCACN0H,MAAO,WAET,CACEoD,GAAI,2BACJ9K,KAAM,oCACN0H,MAAO,WAET,CACEoD,GAAI,qBACJ9K,KAAM,6BACN0H,MAAO,WAET,CACEoD,GAAI,iBACJ9K,KAAM,yBACN0H,MAAO,WAET,CACEoD,GAAI,kBACJ9K,KAAM,0BACN0H,MAAO,WAET,CACEoD,GAAI,sBACJ9K,KAAM,wBACN0H,MAAO,WAET,CACEoD,GAAI,4BACJ9K,KAAM,8BACN0H,MAAO,WAET,CACEoD,GAAI,mBACJ9K,KAAM,oBACN0H,MAAO,WAET,CACEoD,GAAI,mBACJ9K,KAAM,oBACN0H,MAAO,WAET,CACEoD,GAAI,uBACJ9K,KAAM,yBACN0H,MAAO,WAET,CACEoD,GAAI,uBACJ9K,KAAM,yBACN0H,MAAO,YA+mCcG,KAAKwD,IAChBvK,EAAAA,EAAAA,KAACwK,EAAAA,EAAQ,CAAe3F,MAAO0F,EAAKP,GAAGhE,SACpCuE,EAAKrL,MADOqL,EAAKP,cAS5BhK,EAAAA,EAAAA,KAACoG,EAAAA,EAAG,CAACC,GAAI,CAAEmC,GAAI,GAAIxC,SAChBnF,GACCb,EAAAA,EAAAA,KAACoG,EAAAA,EAAG,CACFC,GAAI,CACFC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZiC,UAAW,SACXzC,UAEFhG,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAACC,QAAQ,KAAKC,MAAM,QAAOZ,SAAC,4BAKzCE,EAAAA,EAAAA,MAACL,EAAAA,GAAI,CAACgB,WAAS,EAACC,QAAS,EAAEd,SAAA,CAExBpE,GA/iBS6I,MACpB,MACM9K,EAAWgB,EADOH,GAExB,OAAKb,GAAaiC,GAGhB5B,EAAAA,EAAAA,KAAC6F,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,GAAGC,UAChBhG,EAAAA,EAAAA,KAACiG,EAAAA,EAAI,CAAAD,UACHE,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CAAAH,SAAA,EACVE,EAAAA,EAAAA,MAACE,EAAAA,EAAG,CACFC,GAAI,CACFC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,GAAI,GACJT,SAAA,EAEFhG,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAACC,QAAQ,KAAKC,MAAM,QAAOZ,SAAC,kBAGvCE,EAAAA,EAAAA,MAACE,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQ6B,IAAK,GAAInC,SAAA,EACnChG,EAAAA,EAAAA,KAACoI,EAAAA,EAAM,CACLV,QAASlC,GACT6C,WAAWrI,EAAAA,EAAAA,KAAC0K,EAAAA,EAAY,IACxB/D,QAAQ,YACRiB,KAAK,QACL+C,SAAU7I,GACVuE,GAAI,CACFuE,gBAAiB,UACjB,UAAW,CAAEA,gBAAiB,YAC9B5E,SAEDlE,GAAgB,gBAAkB,kBAErC9B,EAAAA,EAAAA,KAACoI,EAAAA,EAAM,CACLV,QAASrD,GACTgE,WAAWrI,EAAAA,EAAAA,KAACsI,EAAW,IACvB3B,QAAQ,WACRiB,KAAK,QAAO5B,SACb,wBAKLE,EAAAA,EAAAA,MAAC2E,EAAAA,EAAK,CACJxE,GAAI,CACFY,EAAG,EACH2D,gBAAiB,QACjBhE,MAAO,QACPkE,UAAW,QACXC,SAAU,OACVC,WAAY,qBACZhF,SAAA,EAEFhG,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAACC,QAAQ,KAAKN,GAAI,CAAEI,GAAI,EAAGG,MAAO,WAAYZ,SACtD1B,GACC3E,EAASwF,iBAAiB8F,+BAG9BjL,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CACTC,QAAQ,QACRN,GAAI,CAAEI,GAAI,EAAGqB,WAAY,YAAa9B,SAErC1B,GACC3E,EAASwF,iBAAiB+F,iCAI9BlL,EAAAA,EAAAA,KAACmL,EAAAA,EAAO,CAAC9E,GAAI,CAAE+E,GAAI,MAEnBpL,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAACC,QAAQ,KAAKN,GAAI,CAAEI,GAAI,GAAIT,SACpC1B,GACC3E,EAASwF,iBAAiBkG,iCAG9BrL,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CACTC,QAAQ,QACRN,GAAI,CAAEI,GAAI,EAAGqB,WAAY,YAAa9B,SAErC1B,GACC3E,EAASwF,iBAAiBmG,mCAI9BtL,EAAAA,EAAAA,KAACmL,EAAAA,EAAO,CAAC9E,GAAI,CAAE+E,GAAI,MAEnBpL,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAACC,QAAQ,KAAKN,GAAI,CAAEI,GAAI,GAAIT,SACpC1B,GACC3E,EAASwF,iBACNoG,mDAGPvL,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CACTC,QAAQ,QACRN,GAAI,CAAEI,GAAI,EAAGqB,WAAY,YAAa9B,SAErC1B,GACC3E,EAASwF,iBACNqG,qDAIPxL,EAAAA,EAAAA,KAACmL,EAAAA,EAAO,CAAC9E,GAAI,CAAE+E,GAAI,MAEnBpL,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAACC,QAAQ,KAAKN,GAAI,CAAEI,GAAI,GAAIT,SACpC1B,GACC3E,EAASwF,iBAAiBsG,2BAG9BzL,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CACTC,QAAQ,QACRN,GAAI,CAAEI,GAAI,EAAGqB,WAAY,YAAa9B,SAErC1B,GACC3E,EAASwF,iBAAiBuG,6BAI9B1L,EAAAA,EAAAA,KAACmL,EAAAA,EAAO,CAAC9E,GAAI,CAAE+E,GAAI,MAEnBpL,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAACC,QAAQ,KAAKN,GAAI,CAAEI,GAAI,GAAIT,SACpC1B,GACC3E,EAASwF,iBAAiBwG,8BAG9B3L,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CACTC,QAAQ,QACRN,GAAI,CAAEI,GAAI,EAAGqB,WAAY,YAAa9B,SAErC1B,GACC3E,EAASwF,iBAAiByG,gCAI9B5L,EAAAA,EAAAA,KAACmL,EAAAA,EAAO,CAAC9E,GAAI,CAAE+E,GAAI,MAEnBpL,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAACC,QAAQ,KAAKN,GAAI,CAAEI,GAAI,GAAIT,SACpC1B,GACC3E,EAASwF,iBAAiB0G,gCAG9B7L,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CACTC,QAAQ,QACRN,GAAI,CAAEI,GAAI,EAAGqB,WAAY,YAAa9B,SAErC1B,GACC3E,EAASwF,iBAAiB2G,kCAI9B9L,EAAAA,EAAAA,KAACmL,EAAAA,EAAO,CAAC9E,GAAI,CAAE+E,GAAI,MAEnBpL,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CACTC,QAAQ,QACRN,GAAI,CAAEI,GAAI,EAAGqB,WAAY,YAAa9B,SAErC1B,GAAoB3E,EAASwF,iBAAiB4G,4BAzJrB,IA8J7B,EA8YiBtB,GAGfhG,OAAOC,QAAQnB,IAAkBwD,KAAIiF,IAAA,IAAErG,EAAaC,GAAOoG,EAAA,OAC1DtG,GAA8BC,EAAaC,EAAO,UAO1DM,EAAAA,EAAAA,MAAC+F,EAAAA,EAAM,CACLC,KAAM/K,EACNgL,QAAS/H,GACTgI,SAAS,KACTtC,WAAS,EAAA9D,SAAA,EAETE,EAAAA,EAAAA,MAACmG,EAAAA,EAAW,CAAArG,SAAA,CAAC,OACN,KACU,OAAdjF,QAAc,IAAdA,OAAc,EAAdA,EAAgBuG,OAAO,GAAGC,gBACX,OAAdxG,QAAc,IAAdA,OAAc,EAAdA,EAAgByG,MAAM,GAAG1C,QAAQ,WAAY,YAEjD9E,EAAAA,EAAAA,KAACsM,EAAAA,EAAa,CAAAtG,UACZhG,EAAAA,EAAAA,KAACoG,EAAAA,EAAG,CAACC,GAAI,CAAEmC,GAAI,GAAIxC,SA3zBDuG,MAC1B,IAAKxL,IAAmBE,EAAU,OAAO,KAEzC,MACMuL,EADkB7L,EAAUH,GACEO,GAEpC,MAAuB,mBAAnBA,GAEAf,EAAAA,EAAAA,KAACoG,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQ0C,cAAe,SAAUb,IAAK,GAAInC,SAC3DvB,OAAOgI,KAAKD,GAAazF,KAAKnC,IAC7B5E,EAAAA,EAAAA,KAAC0M,EAAAA,EAAS,CAER/C,MACE/E,EAAI0C,OAAO,GAAGC,cACd3C,EAAI4C,MAAM,GAAG1C,QAAQ,WAAY,OAEnCD,MAAO5D,EAAS2D,IAAQ,GACxBuF,SAAWwC,GACTzL,GAAakE,IAAIE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWF,GAAI,IAAE,CAACR,GAAM+H,EAAErC,OAAOzF,UAEpDiF,WAAS,EACTnD,QAAQ,YAVH/B,OAiBQ,qBAAnB7D,GAEAf,EAAAA,EAAAA,KAACoG,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQ0C,cAAe,SAAUb,IAAK,GAAInC,SAC3DvB,OAAOgI,KAAKD,GAAazF,KAAKnC,IAC7B5E,EAAAA,EAAAA,KAAC0M,EAAAA,EAAS,CAER/C,MACE/E,EAAI0C,OAAO,GAAGC,cACd3C,EAAI4C,MAAM,GAAG1C,QAAQ,WAAY,OAEnCD,MAAO5D,EAAS2D,IAAQ,GACxBuF,SAAWwC,GACTzL,GAAakE,IAAIE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWF,GAAI,IAAE,CAACR,GAAM+H,EAAErC,OAAOzF,UAEpDiF,WAAS,EACT8C,WAAS,EACTC,KAAM,EACNlG,QAAQ,YAZH/B,OAmBQ,kBAAnB7D,GAEAf,EAAAA,EAAAA,KAACoG,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQ0C,cAAe,SAAUb,IAAK,GAAInC,SAC3DvB,OAAOgI,KAAKD,GAAazF,KAAKnC,IAC7B5E,EAAAA,EAAAA,KAAC0M,EAAAA,EAAS,CAER/C,MACE/E,EAAI0C,OAAO,GAAGC,cACd3C,EAAI4C,MAAM,GAAG1C,QAAQ,WAAY,OAEnCD,MAAO5D,EAAS2D,IAAQ,GACxBuF,SAAWwC,GACTzL,GAAakE,IAAIE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWF,GAAI,IAAE,CAACR,GAAM+H,EAAErC,OAAOzF,UAEpDiF,WAAS,EACTnD,QAAQ,YAVH/B,OAiBR,IAAI,EAivBkB2H,QAEvBrG,EAAAA,EAAAA,MAAC4G,EAAAA,EAAa,CAAA9G,SAAA,EACZhG,EAAAA,EAAAA,KAACoI,EAAAA,EAAM,CAACV,QAAStD,GAAciE,WAAWrI,EAAAA,EAAAA,KAAC+M,EAAAA,EAAU,IAAI/G,SAAC,YAG1DhG,EAAAA,EAAAA,KAACoI,EAAAA,EAAM,CACLV,QAt/BOlK,UACjB,IACE,MAAMyH,EAAkBzE,QAGlBlD,EAAAA,EAAsBoB,eAAeuG,EAAiB,CAC1D,CAAClE,GAAiBE,IAIpBL,GAAcwE,IAAIE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACbF,GAAI,IACP,CAACH,IAAeK,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXF,EAAKH,IAAgB,IACxB,CAAClE,GAAiBE,QAItBK,EAAc,CACZC,MAAM,EACNC,QAAQ,GAADnD,OAAK0C,EAAc,0BAC1BU,SAAU,YAGZL,GAAc,GACdJ,EAAkB,MAClBE,EAAY,CAAC,GAGbqE,YAAW,KACTjE,EAAc,CAAEC,MAAM,EAAOC,QAAS,GAAIC,SAAU,WAAY,GAC/D,IACL,CAAE,MAAOzD,GACPC,QAAQD,MAAM,yBAA0BA,GACxCsD,EAAc,CACZC,MAAM,EACNC,QAAS,0CACTC,SAAU,SAEd,GAg9BUkF,QAAQ,YACR0B,WAAWrI,EAAAA,EAAAA,KAACgN,EAAQ,IAAIhH,SACzB,uBAOJjF,IACCf,EAAAA,EAAAA,KAACoG,EAAAA,EAAG,CACFC,GAAI,CACFgB,SAAU,QACV4F,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRxC,gBAAiB,kBACjByC,OAAQ,KACR/G,QAAS,OACTE,WAAY,SACZD,eAAgB,SAChBU,EAAG,GACHjB,UAEFE,EAAAA,EAAAA,MAAC2E,EAAAA,EAAK,CACJxE,GAAI,CACFY,EAAG,EACHmF,SAAU,QACVkB,MAAO,OACPxC,UAAW,OACXC,SAAU,QACV/E,SAAA,EAEFE,EAAAA,EAAAA,MAACQ,EAAAA,EAAU,CAACC,QAAQ,KAAKN,GAAI,CAAEI,GAAI,GAAIT,SAAA,CAAC,OACjC,IACJjF,EAAeuG,OAAO,GAAGC,cACxBxG,EAAeyG,MAAM,GAAG1C,QAAQ,WAAY,UAltB/ByI,MAC3B,IAAKxM,IAAmBE,EAAU,OAAO,KA0BzC,OACEiF,EAAAA,EAAAA,MAACE,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQ0C,cAAe,SAAUb,IAAK,GAAInC,SAAA,EAC5DhG,EAAAA,EAAAA,KAAC0M,EAAAA,EAAS,CACR/C,MACE5I,EAAeuG,OAAO,GAAGC,cACzBxG,EAAeyG,MAAM,GAAG1C,QAAQ,WAAY,OAE9CD,MAAO5D,EACPkJ,SAAWwC,GAAMzL,EAAYyL,EAAErC,OAAOzF,OACtCiF,WAAS,EACT8C,WAAS,EACTC,KAAM,EACNlG,QAAQ,WACR6G,WAAW,mIAIbtH,EAAAA,EAAAA,MAACE,EAAAA,EAAG,CAACC,GAAI,CAAEY,EAAG,EAAG2D,gBAAiB,UAAWxD,aAAc,GAAIpB,SAAA,EAC7DhG,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAACC,QAAQ,YAAYC,MAAM,iBAAiBP,GAAI,CAAEI,GAAI,GAAIT,SAAC,6BAGtEhG,EAAAA,EAAAA,KAACoG,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQkD,SAAU,OAAQrB,IAAK,IAAMnC,SA5CjC,CAC5B,cACA,gBACA,YACA,sBACA,WACA,cACA,kBACA,kBACA,cACA,eACA,iBACA,eACA,qBACA,kBACA,iBACA,oBACA,sBACA,iBACA,iBACA,mBAyB6Be,KAAK0C,IAC1BzJ,EAAAA,EAAAA,KAAC0J,EAAAA,EAAI,CAEHC,MAAK,IAAAtL,OAAMoL,EAAW,KACtB7B,KAAK,QACLjB,QAAQ,WACRN,GAAI,CAAEuD,SAAU,SAAU6D,OAAQ,WAClC/F,QAASA,KACP,MAAMgG,EAAYC,SAASC,cACzB,yBACE7M,EAAeuG,OAAO,GAAGC,cACzBxG,EAAeyG,MAAM,GAAG1C,QAAQ,WAAY,OAC5C,MAEJ,GAAI4I,EAAW,CACb,MAAMG,EAAQH,EAAUI,eAClBC,EAAML,EAAUM,aAChBC,EACJhN,EAASiN,UAAU,EAAGL,GAAM,IAAAxP,OACxBoL,EAAW,KACfxI,EAASiN,UAAUH,GACrB7M,EAAY+M,GAEZ1I,YAAW,IAAMmI,EAAUS,SAAS,EACtC,IAtBG1E,WA4BbvD,EAAAA,EAAAA,MAACE,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQ6B,IAAK,EAAG5B,eAAgB,YAAaP,SAAA,EAC/DhG,EAAAA,EAAAA,KAACoI,EAAAA,EAAM,CAACV,QAAStD,GAAciE,WAAWrI,EAAAA,EAAAA,KAAC+M,EAAAA,EAAU,IAAI/G,SAAC,YAG1DhG,EAAAA,EAAAA,KAACoI,EAAAA,EAAM,CACLV,QAAS1C,GACT2B,QAAQ,YACR0B,WAAWrI,EAAAA,EAAAA,KAACgN,EAAQ,IAAIhH,SACzB,cAIC,EAynBGuH,YAKM,C,wICv0Cd,MAAM9H,EAAsBjI,MAAOmC,EAAUyO,EAAY9J,KAE9D,MAAM+J,EAAM,IAAIC,EAAAA,QAGVC,EAAYF,EAAIG,SAASC,SAASC,WAClCC,EAAaN,EAAIG,SAASC,SAASG,YACnCC,EAAS,GACTC,EAAeP,EAAa,GAElC,IAAIQ,EAAIF,EAGR,MAAMG,EAAU,SAACzK,GAA4D,IAAtDqF,EAAQqF,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAIG,EAASH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,SAAUnI,EAAOmI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACpE,IAAK1K,EAAM,OAAOwK,EAElBV,EAAIgB,YAAYzF,GAChByE,EAAIiB,QAAQ,YAAaF,GAEzB,MAAMG,EAAQlB,EAAImB,gBAAgBjL,EAAMuK,GAIxC,OAHAT,EAAI9J,KAAKA,EAAMsK,EAAQE,EAAG,CAAE3C,SAAU0C,IAEtCC,GAAMQ,EAAML,OAAStF,EAAW,IAAO9C,EAChCiI,CACT,EAGMU,EAAY,SAAClL,GACjB,OAAOyK,EAAQzK,EADgB0K,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAaA,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,OACR,GAC5C,EAGAF,EAAIU,EACFnL,EACE3E,EAASwF,iBAAiBuK,iBAAmB,0CAE/C,GACA,QAEFX,EAAIC,EACF1K,EAAoB3E,EAASwF,iBAAiBwK,oBAAsB,IACpE,GACA,SACA,IAIFZ,GAAK,GAGDpP,EAASV,iBACX8P,EAAIU,EAAU,kBAAmB,GAAI,QACrChL,OAAOC,QAAQ/E,EAASV,gBAAgB+E,SAAQW,IAAmB,IAAjBC,EAAKC,GAAMF,EAC3D,MAAMgF,EAAQ/E,EAAI0C,OAAO,GAAGC,cAAgB3C,EAAI4C,MAAM,GAAG1C,QAAQ,WAAY,OAC7EiK,EAAIC,EAAQ,GAAD3Q,OAAIsL,EAAK,MAAAtL,OAAKwG,GAAS,GAAI,SAAU,EAAE,IAEpDkK,GAAK,IAIPA,EAAIU,EACFnL,EACE3E,EAASwF,iBAAiBsG,wBAA0B,sBAEtD,GACA,QAEFsD,EAAIC,EACF1K,EAAoB3E,EAASwF,iBAAiByK,wBAA0B,IACxE,GACA,SACA,GAEFb,EAAIC,EACF1K,EAAoB3E,EAASwF,iBAAiB0K,qBAAuB,IACrE,GACA,SACA,GAEFd,EAAIC,EACF1K,EAAoB3E,EAASwF,iBAAiB2K,mBAAqB,IACnE,GACA,SACA,GAIFf,EAAIC,EAAQ,6BAA8B,GAAI,OAAQ,GAGpC,CAChB,CAAC,OAAQ,gBAAiB,YAAa,UACvC,CAAC,UAAW,oBAAqB,OAAQ,QACzC,CAAC,WAAY,oBAAqB,OAAQ,QAC1C,CAAC,cAAe,oBAAqB,OAAQ,SAGrChL,SAAQ,CAAC+L,EAAKC,KACtB,MAAMC,EAAqB,IAAVD,EACXZ,EAAYa,EAAW,OAAS,SAChCrG,EAAWqG,EAAW,GAAK,EAG3BC,EAAY,CAAC,GAAI,GAAI,GAAI,IAC/B,IAAIC,EAAItB,EAERkB,EAAI/L,SAAQ,CAACoM,EAAMC,KACjBhC,EAAIgB,YAAYzF,GAChByE,EAAIiB,QAAQ,YAAaF,GACzBf,EAAI9J,KAAK6L,EAAMD,EAAGpB,EAAG,CAAE3C,SAAU8D,EAAUG,KAC3CF,GAAKD,EAAUG,GAAY,CAAC,IAG9BtB,GAAgB,IAAXnF,EAAiB,CAAC,IAGzBmF,GAAK,GAGDA,EAAIJ,EAAa,MACnBN,EAAIiC,UACJvB,EAAIF,GAINE,EAAIU,EACFnL,EACE3E,EAASwF,iBAAiB0G,6BAA+B,2BAE3D,GACA,QAEFkD,EAAIC,EACF1K,EAAoB3E,EAASwF,iBAAiBoL,4BAA8B,IAC5E,GACA,SACA,GAEFxB,EAAIC,EACF1K,EAAoB3E,EAASwF,iBAAiBqL,oBAAsB,IACpE,GACA,SACA,GAEFzB,EAAIC,EACF1K,EAAoB3E,EAASwF,iBAAiBsL,aAAe,IAC7D,GACA,SACA,GAEF1B,EAAIC,EACF1K,EAAoB3E,EAASwF,iBAAiBuL,YAAc,IAC5D,GACA,SACA,GAEF3B,EAAIC,EACF1K,EAAoB3E,EAASwF,iBAAiBwL,gBAAkB,IAChE,GACA,OACA,GAIE5B,EAAIJ,EAAa,MACnBN,EAAIiC,UACJvB,EAAIF,GAINE,EAAIU,EACFnL,EACE3E,EAASwF,iBAAiByL,iBAAmB,0BAE/C,GACA,QAEF7B,EAAIC,EACF1K,EAAoB3E,EAASwF,iBAAiB0L,wBAA0B,IACxE,GACA,SACA,GAEF9B,EAAIC,EAAQ,UAAD3Q,OACJiG,EAAoB3E,EAASwF,iBAAiB2L,cAAgB,KACnE,GACA,SACA,GAEF/B,EAAIC,EAAQ,UAAD3Q,OACJiG,EAAoB3E,EAASwF,iBAAiB4L,cAAgB,KACnE,GACA,SACA,GAEFhC,EAAIC,EACF1K,EAAoB3E,EAASwF,iBAAiB6L,kBAAoB,IAClE,GACA,SACA,GAEFjC,EAAIC,EAAQ,UAAD3Q,OACJiG,EAAoB3E,EAASwF,iBAAiB8L,cAAgB,KACnE,GACA,SACA,GAEFlC,EAAIC,EAAQ,UAAD3Q,OACJiG,EAAoB3E,EAASwF,iBAAiB+L,cAAgB,KACnE,GACA,SACA,GAEFnC,EAAIC,EAAQ,UAAD3Q,OACJiG,EAAoB3E,EAASwF,iBAAiBgM,cAAgB,KACnE,GACA,SACA,GAIEpC,EAAIJ,EAAa,MACnBN,EAAIiC,UACJvB,EAAIF,GAINE,EAAIU,EACFnL,EACE3E,EAASwF,iBAAiBiM,kBAAoB,4BAEhD,GACA,QAEFrC,EAAIC,EACF1K,EAAoB3E,EAASwF,iBAAiBkM,yBAA2B,IACzE,GACA,SACA,GAEFtC,EAAIC,EAAQ,UAAD3Q,OACJiG,EAAoB3E,EAASwF,iBAAiBmM,mBAAqB,KACxE,GACA,SACA,GAEFvC,EAAIC,EAAQ,UAAD3Q,OACJiG,EAAoB3E,EAASwF,iBAAiBoM,mBAAqB,KACxE,GACA,SACA,GAEFxC,EAAIC,EAAQ,UAAD3Q,OACJiG,EAAoB3E,EAASwF,iBAAiBqM,mBAAqB,KACxE,GACA,SACA,GAIFzC,EAAIU,EACFnL,EACE3E,EAASwF,iBAAiBsM,kBAAoB,eAEhD,GACA,QAEF1C,EAAIC,EACF1K,EAAoB3E,EAASwF,iBAAiBuM,iBAAmB,IACjE,GACA,SACA,GAIE3C,EAAIJ,EAAa,MACnBN,EAAIiC,UACJvB,EAAIF,GAINE,EAAIU,EAAU,uBAAwB,GAAI,QAC1CV,GAAK,GAGLV,EAAIsD,aAAa,IACjBtD,EAAIuD,KAAK/C,EAAQE,EAAGF,IAAaE,GACjCA,GAAK,EAGLA,EAAIC,EAAQ,mBAAoB,GAAI,SAAU,GAC9CD,EAAIC,EAAQ,oBAAqB,GAAI,SAAU,GAC/CD,EAAIC,EAAQ,qBAAsB,GAAI,SAAU,GAEhDD,GAAK,GAGLA,EAAIC,EACF1K,EAAoB3E,EAASwF,iBAAiB0M,YAAc,IAC5D,EACA,SACA,GAIF,MAAMC,EAAQ,uCAAAzT,QAA0C,IAAI0T,MAAOC,cAAcC,MAAM,KAAK,GAAE,QAG9F,OAFA5D,EAAI6D,KAAKJ,GAEFA,CAAQ,EASJK,EAAkB3U,MAAOY,EAAcL,IAC3CqU,EAAwBhU,EAAcL,GAGlCqU,EAA0B5U,MAAOY,EAAcL,KAC1D,IAAK,IAADsU,EACFpU,QAAQ6B,IAAI,iDAAkD/B,GAG9D,MAIMuU,EAAU,GAAAjU,OAFZ,8CAE4B,uCAAAA,OAAsC0T,KAAKQ,OAC3EtU,QAAQ6B,IAAI,uBAAwBwS,GAGpC,MAAMnU,QAAiBqU,MAAMF,EAAY,CACvCG,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,cAAgB,UAADrU,OAAYsU,aAAaC,QAAQ,UAChD,gBAAiB,sCACjB,OAAU,WACV,QAAW,KAEbC,KAAMC,KAAKC,UAAU,CAAEC,cAAejV,MAMxC,GAHAE,QAAQ6B,IAAI,mBAAoB3B,EAAS0B,QACzC5B,QAAQ6B,IAAI,oBAAqB2E,OAAOwO,YAAY9U,EAASuU,QAAQhO,aAEhEvG,EAAS+U,GAAI,CAChB,MAAMC,QAAkBhV,EAASiV,OACjC,MAAM,IAAI9U,MAAM6U,EAAUnV,OAAS,yBACrC,CAGA,MAAMqV,QAAgBlV,EAASmV,OAC/BrV,QAAQ6B,IAAI,iBAAkBuT,EAAQzL,KAAM,SAG5C,MAAM2L,EAAMC,OAAOC,IAAIC,gBAAgBL,GACjCM,EAAOhG,SAASiG,cAAc,KACpCD,EAAKE,KAAON,EAGZ,MAAMzB,EAAQ,sBAAAzT,QAAuC,QAAdgU,EAAAtU,EAAK+V,iBAAS,IAAAzB,OAAA,EAAdA,EAAgBnT,OAAQ,SAAQ,KAAAb,QAAI,IAAI0T,MAAOC,cAAcC,MAAM,KAAK,GAAE,QAYjH,OAXA0B,EAAKI,SAAWjC,EAGhBnE,SAASkF,KAAKmB,YAAYL,GAC1BA,EAAKM,QACLtG,SAASkF,KAAKqB,YAAYP,GAG1BH,OAAOC,IAAIU,gBAAgBZ,GAE3BtV,QAAQ6B,IAAI,yCAA0CgS,GAC/CA,CAET,CAAE,MAAO9T,GAGP,MAFAC,QAAQD,MAAM,sCAAuCA,GACrDC,QAAQD,MAAM,eAAgBA,EAAMoW,OAC9BpW,CACR,E,6DC7XF,SAAe+B,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,wCACD,W","sources":["services/reportTemplateService.js","../node_modules/@mui/icons-material/esm/Save.js","../node_modules/@mui/icons-material/esm/Preview.js","scenes/admin/ReportTemplates.jsx","utils/templatePDFGenerator.js","../node_modules/@mui/icons-material/esm/Download.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const reportTemplateService = {\r\n  // Get all report templates from all endpoints\r\n  getAllTemplates: async () => {\r\n    try {\r\n      // Fetch from all template endpoints\r\n      const [asbestosClearanceTemplates, leadAssessmentTemplates] = await Promise.all([\r\n        api.get('/asbestos-clearance-templates'),\r\n        api.get('/lead-assessment-templates')\r\n      ]);\r\n\r\n      // Combine all templates\r\n      const allTemplates = [\r\n        ...asbestosClearanceTemplates.data,\r\n        ...leadAssessmentTemplates.data\r\n      ];\r\n\r\n      return allTemplates;\r\n    } catch (error) {\r\n      console.error('Error fetching report templates:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get a specific template by type\r\n  getTemplateByType: async (templateType) => {\r\n    try {\r\n      let response;\r\n      \r\n      if (templateType === 'asbestosClearanceNonFriable' || templateType === 'asbestosClearanceFriable') {\r\n        response = await api.get(`/asbestos-clearance-templates/${templateType}`);\r\n      } else if (templateType === 'leadAssessment') {\r\n        response = await api.get(`/lead-assessment-templates/${templateType}`);\r\n      } else {\r\n        throw new Error(`Unknown template type: ${templateType}`);\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching report template:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Create a new template\r\n  createTemplate: async (templateData) => {\r\n    try {\r\n      const { templateType } = templateData;\r\n      let response;\r\n      \r\n      if (templateType === 'asbestosClearanceNonFriable' || templateType === 'asbestosClearanceFriable') {\r\n        response = await api.post('/asbestos-clearance-templates', templateData);\r\n      } else if (templateType === 'leadAssessment') {\r\n        response = await api.post('/lead-assessment-templates', templateData);\r\n      } else {\r\n        throw new Error(`Unknown template type: ${templateType}`);\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating report template:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update an existing template\r\n  updateTemplate: async (templateType, updateData) => {\r\n    try {\r\n      let response;\r\n      \r\n      if (templateType === 'asbestosClearanceNonFriable' || templateType === 'asbestosClearanceFriable') {\r\n        response = await api.put(`/asbestos-clearance-templates/${templateType}`, updateData);\r\n      } else if (templateType === 'leadAssessment') {\r\n        response = await api.put(`/lead-assessment-templates/${templateType}`, updateData);\r\n      } else {\r\n        throw new Error(`Unknown template type: ${templateType}`);\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating report template:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete a template\r\n  deleteTemplate: async (templateType) => {\r\n    try {\r\n      let response;\r\n      \r\n      if (templateType === 'asbestosClearanceNonFriable' || templateType === 'asbestosClearanceFriable') {\r\n        response = await api.delete(`/asbestos-clearance-templates/${templateType}`);\r\n      } else if (templateType === 'leadAssessment') {\r\n        response = await api.delete(`/lead-assessment-templates/${templateType}`);\r\n      } else {\r\n        throw new Error(`Unknown template type: ${templateType}`);\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error deleting report template:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Initialize default templates if they don't exist\r\n  initializeDefaultTemplates: async () => {\r\n    const defaultTemplates = [\r\n      {\r\n        templateType: \"asbestosClearanceNonFriable\",\r\n        companyDetails: {\r\n          name: \"Lancaster & Dickenson Consulting Pty Ltd\",\r\n          address: \"4/6 Dacre Street, Mitchell ACT 2911\",\r\n          email: \"enquiries@landd.com.au\",\r\n          phone: \"(02) 6241 2779\",\r\n          website: \"www.landd.com.au\",\r\n          abn: \"74 169 785 915\"\r\n        },\r\n        reportHeaders: {\r\n          title: \"ASBESTOS REMOVAL CLEARANCE CERTIFICATE\",\r\n          subtitle: \"Clearance Inspection Report\"\r\n        }\r\n      },\r\n      {\r\n        templateType: \"asbestosClearanceFriable\",\r\n        companyDetails: {\r\n          name: \"Lancaster & Dickenson Consulting Pty Ltd\",\r\n          address: \"4/6 Dacre Street, Mitchell ACT 2911\",\r\n          email: \"enquiries@landd.com.au\",\r\n          phone: \"(02) 6241 2779\",\r\n          website: \"www.landd.com.au\",\r\n          abn: \"74 169 785 915\"\r\n        },\r\n        reportHeaders: {\r\n          title: \"ASBESTOS REMOVAL CLEARANCE CERTIFICATE\",\r\n          subtitle: \"Clearance Inspection Report\"\r\n        }\r\n      },\r\n      {\r\n        templateType: \"leadAssessment\",\r\n        companyDetails: {\r\n          name: \"Lancaster & Dickenson Consulting Pty Ltd\",\r\n          address: \"4/6 Dacre Street, Mitchell ACT 2911\",\r\n          email: \"enquiries@landd.com.au\",\r\n          phone: \"(02) 6241 2779\",\r\n          website: \"www.landd.com.au\",\r\n          abn: \"74 169 785 915\"\r\n        },\r\n        reportHeaders: {\r\n          title: \"LEAD ASSESSMENT REPORT\",\r\n          subtitle: \"Lead Hazard Assessment\"\r\n        }\r\n      }\r\n    ];\r\n\r\n    try {\r\n      // Check if templates exist and create them if they don't\r\n      for (const template of defaultTemplates) {\r\n        try {\r\n          await reportTemplateService.getTemplateByType(template.templateType);\r\n        } catch (error) {\r\n          if (error.response?.status === 404) {\r\n            // Template doesn't exist, create it\r\n            await reportTemplateService.createTemplate(template);\r\n            console.log(`Created default template for ${template.templateType}`);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error initializing default templates:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default reportTemplateService; ","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3m3-10H5V5h10z\"\n}), 'Save');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.89-2-2-2m0 16H5V7h14zm-5.5-6c0 .83-.67 1.5-1.5 1.5s-1.5-.67-1.5-1.5.67-1.5 1.5-1.5 1.5.67 1.5 1.5M12 9c-2.73 0-5.06 1.66-6 4 .94 2.34 3.27 4 6 4s5.06-1.66 6-4c-.94-2.34-3.27-4-6-4m0 6.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5\"\n}), 'Preview');","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Button,\r\n  Paper,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Alert,\r\n  Divider,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport {\r\n  Edit as EditIcon,\r\n  Save as SaveIcon,\r\n  Cancel as CancelIcon,\r\n  Add as AddIcon,\r\n  Delete as DeleteIcon,\r\n  Preview as PreviewIcon,\r\n  Download as DownloadIcon,\r\n} from \"@mui/icons-material\";\r\nimport { tokens } from \"../../theme\";\r\nimport { useAuth } from \"../../context/AuthContext\";\r\nimport PermissionGate from \"../../components/PermissionGate\";\r\nimport reportTemplateService from \"../../services/reportTemplateService\";\r\nimport { generateTemplatePDF } from \"../../utils/templatePDFGenerator\";\r\n\r\nconst ReportTemplates = () => {\r\n  const theme = useTheme();\r\n  const colors = tokens;\r\n  const { user } = useAuth();\r\n\r\n  const [selectedTemplate, setSelectedTemplate] = useState(\r\n    \"asbestosClearanceNonFriable\"\r\n  );\r\n  const [templates, setTemplates] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [editingSection, setEditingSection] = useState(null);\r\n  const [editData, setEditData] = useState({});\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [saveStatus, setSaveStatus] = useState({\r\n    show: false,\r\n    message: \"\",\r\n    severity: \"success\",\r\n  });\r\n\r\n  const [previewData, setPreviewData] = useState({});\r\n  const [showPreview, setShowPreview] = useState(false);\r\n  const [generatingPDF, setGeneratingPDF] = useState(false);\r\n\r\n  const reportTypes = [\r\n    {\r\n      id: \"asbestosClearanceNonFriable\",\r\n      name: \"Non-Friable Asbestos Clearance Report\",\r\n      color: \"#FF6B6B\",\r\n    },\r\n    {\r\n      id: \"asbestosClearanceFriable\",\r\n      name: \"Friable Asbestos Clearance Report\",\r\n      color: \"#FF6B6B\",\r\n    },\r\n    {\r\n      id: \"asbestosAssessment\",\r\n      name: \"Asbestos Assessment Report\",\r\n      color: \"#FF6B6B\",\r\n    },\r\n    {\r\n      id: \"leadAssessment\",\r\n      name: \"Lead Assessment Report\",\r\n      color: \"#4ECDC4\",\r\n    },\r\n    {\r\n      id: \"mouldAssessment\",\r\n      name: \"Mould Assessment Report\",\r\n      color: \"#45B7D1\",\r\n    },\r\n    {\r\n      id: \"airMonitoringReport\",\r\n      name: \"Air Monitoring Report\",\r\n      color: \"#6C5CE7\",\r\n    },\r\n    {\r\n      id: \"fibreIdentificationReport\",\r\n      name: \"Fibre Identification Report\",\r\n      color: \"#00B894\",\r\n    },\r\n    {\r\n      id: \"inspectionReport\",\r\n      name: \"Inspection Report\",\r\n      color: \"#E17055\",\r\n    },\r\n    {\r\n      id: \"complianceReport\",\r\n      name: \"Compliance Report\",\r\n      color: \"#74B9FF\",\r\n    },\r\n    {\r\n      id: \"riskAssessmentReport\",\r\n      name: \"Risk Assessment Report\",\r\n      color: \"#A29BFE\",\r\n    },\r\n    {\r\n      id: \"managementPlanReport\",\r\n      name: \"Management Plan Report\",\r\n      color: \"#FD79A8\",\r\n    },\r\n  ];\r\n\r\n  // Sample data for preview\r\n  const getSampleData = (templateType) => {\r\n    // Asbestos clearance templates\r\n    if (\r\n      templateType === \"asbestosClearanceNonFriable\" ||\r\n      templateType === \"asbestosClearanceFriable\"\r\n    ) {\r\n      const isFriable = templateType === \"asbestosClearanceFriable\";\r\n      return {\r\n        CLIENT_NAME: \"Sample Client Pty Ltd\",\r\n        ASBESTOS_TYPE: isFriable ? \"friable\" : \"non-friable\",\r\n        SITE_NAME: \"123 Sample Street, Canberra ACT\",\r\n        ASBESTOS_REMOVALIST: \"Professional Asbestos Removal\",\r\n        LAA_NAME: \"Patrick Cerone\",\r\n        LAA_LICENSE: \"AA00031\",\r\n        INSPECTION_TIME: \"09:00 AM\",\r\n        INSPECTION_DATE: \"25 July 2024\",\r\n        REPORT_TYPE: isFriable ? \"Friable\" : \"Non-friable\",\r\n        PROJECT_NAME: \"Sample Asbestos Removal Project\",\r\n        PROJECT_NUMBER: \"PRJ-2024-001\",\r\n        SITE_ADDRESS: \"123 Sample Street, Canberra ACT 2600\",\r\n        CLEARANCE_DATE: \"25 July 2024\",\r\n        CLEARANCE_TIME: \"09:00 AM\",\r\n      };\r\n    }\r\n\r\n    // Lead assessment template\r\n    if (templateType === \"leadAssessment\") {\r\n      return {\r\n        SITE_NAME: \"456 Lead Assessment Site, Canberra ACT\",\r\n        SITE_ADDRESS: \"456 Lead Assessment Site, Canberra ACT 2600\",\r\n        BUILDING_DESCRIPTION: \"Commercial office building with multiple floors\",\r\n        CONSTRUCTION_YEAR: \"1985\",\r\n        NUMBER_OF_SAMPLES: \"15\",\r\n        NUMBER_OF_ISSUES: \"3\",\r\n        REPORT_DATE: \"25 July 2024\",\r\n        ASSESSOR_NAME: \"Patrick Cerone\",\r\n        ASSESSOR_LICENSE: \"LA00031\",\r\n      };\r\n    }\r\n\r\n    // Default sample data\r\n    return {\r\n      CLIENT_NAME: \"Sample Client Pty Ltd\",\r\n      SITE_NAME: \"123 Sample Street, Canberra ACT\",\r\n      SITE_ADDRESS: \"123 Sample Street, Canberra ACT 2600\",\r\n    };\r\n  };\r\n\r\n  const sampleData = getSampleData(selectedTemplate);\r\n\r\n  // Template sections organized by page for detailed editing\r\n  const getTemplateSections = (templateType) => {\r\n    // Asbestos clearance templates (both non-friable and friable)\r\n    if (\r\n      templateType === \"asbestosClearanceNonFriable\" ||\r\n      templateType === \"asbestosClearanceFriable\"\r\n    ) {\r\n      const baseSections = {\r\n        \"Background Information\": [\r\n          \"backgroundInformationTitle\",\r\n          \"backgroundInformationContent\",\r\n        ],\r\n        \"Legislative Requirements\": [\r\n          \"legislativeRequirementsTitle\",\r\n          \"legislativeRequirementsContent\",\r\n        ],\r\n        \"Inspection Details\": [\r\n          \"inspectionDetailsTitle\",\r\n          \"inspectionDetailsContent\",\r\n        ],\r\n        \"Inspection Exclusions\": [\r\n          \"inspectionExclusionsTitle\",\r\n          \"inspectionExclusionsContent\",\r\n        ],\r\n        \"Clearance Certification\": [\r\n          \"clearanceCertificationTitle\",\r\n          \"clearanceCertificationContent\",\r\n        ],\r\n        \"Sign-off\": [\"signOffContent\"],\r\n        Footer: [\"footerText\"],\r\n      };\r\n\r\n      // Add template-specific limitations sections\r\n      if (templateType === \"asbestosClearanceNonFriable\") {\r\n        baseSections[\"Non-Friable Clearance Certificate Limitations\"] = [\r\n          \"nonFriableClearanceCertificateLimitationsTitle\",\r\n          \"nonFriableClearanceCertificateLimitationsContent\",\r\n        ];\r\n      } else if (templateType === \"asbestosClearanceFriable\") {\r\n        baseSections[\"Friable Clearance Certificate Limitations\"] = [\r\n          \"friableClearanceCertificateLimitationsTitle\",\r\n          \"friableClearanceCertificateLimitationsContent\",\r\n        ];\r\n      }\r\n\r\n      return baseSections;\r\n    }\r\n\r\n    // Lead assessment template\r\n    if (templateType === \"leadAssessment\") {\r\n      return {\r\n        \"Executive Summary\": [\r\n          \"executiveSummaryTitle\",\r\n          \"executiveSummaryContent\",\r\n        ],\r\n        \"Site Description\": [\"siteDescriptionTitle\", \"siteDescriptionContent\"],\r\n        \"Assessment Methodology\": [\r\n          \"assessmentMethodologyTitle\",\r\n          \"assessmentMethodologyContent\",\r\n        ],\r\n        \"Sampling Results\": [\"samplingResultsTitle\", \"samplingResultsContent\"],\r\n        \"Risk Assessment\": [\"riskAssessmentTitle\", \"riskAssessmentContent\"],\r\n        Recommendations: [\"recommendationsTitle\", \"recommendationsContent\"],\r\n        Conclusion: [\"conclusionTitle\", \"conclusionContent\"],\r\n        Footer: [\"footerText\"],\r\n      };\r\n    }\r\n\r\n    // Default empty sections for unknown template types\r\n    return {};\r\n  };\r\n\r\n  // Get template sections based on selected template\r\n  const templateSections = getTemplateSections(selectedTemplate);\r\n\r\n  // Load templates on component mount\r\n  useEffect(() => {\r\n    const loadTemplates = async () => {\r\n      try {\r\n        setLoading(true);\r\n        // Remove automatic initialization to prevent overwriting custom changes\r\n        // await reportTemplateService.initializeDefaultTemplates();\r\n\r\n        // Load all templates\r\n        const allTemplates = await reportTemplateService.getAllTemplates();\r\n\r\n        // Convert array to object with templateType as key\r\n        const templatesObj = {};\r\n        allTemplates.forEach((template) => {\r\n          templatesObj[template.templateType] = template;\r\n        });\r\n\r\n        setTemplates(templatesObj);\r\n\r\n        // Set initial preview data\r\n        setPreviewData(getSampleData(selectedTemplate));\r\n      } catch (error) {\r\n        console.error(\"Error loading templates:\", error);\r\n        setSaveStatus({\r\n          show: true,\r\n          message: \"Error loading templates. Please refresh the page.\",\r\n          severity: \"error\",\r\n        });\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadTemplates();\r\n  }, []);\r\n\r\n  const handleTemplateChange = (event) => {\r\n    const newTemplateType = event.target.value;\r\n    setSelectedTemplate(newTemplateType);\r\n    setPreviewData(getSampleData(newTemplateType));\r\n  };\r\n\r\n  const handleEdit = (section, data) => {\r\n    setEditingSection(section);\r\n    setEditData(data);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    try {\r\n      const currentTemplate = selectedTemplate;\r\n\r\n      // Update template via API\r\n      await reportTemplateService.updateTemplate(currentTemplate, {\r\n        [editingSection]: editData,\r\n      });\r\n\r\n      // Update local state\r\n      setTemplates((prev) => ({\r\n        ...prev,\r\n        [currentTemplate]: {\r\n          ...prev[currentTemplate],\r\n          [editingSection]: editData,\r\n        },\r\n      }));\r\n\r\n      setSaveStatus({\r\n        show: true,\r\n        message: `${editingSection} updated successfully!`,\r\n        severity: \"success\",\r\n      });\r\n\r\n      setOpenDialog(false);\r\n      setEditingSection(null);\r\n      setEditData({});\r\n\r\n      // Hide success message after 3 seconds\r\n      setTimeout(() => {\r\n        setSaveStatus({ show: false, message: \"\", severity: \"success\" });\r\n      }, 3000);\r\n    } catch (error) {\r\n      console.error(\"Error saving template:\", error);\r\n      setSaveStatus({\r\n        show: true,\r\n        message: \"Error saving changes. Please try again.\",\r\n        severity: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setOpenDialog(false);\r\n    setEditingSection(null);\r\n    setEditData({});\r\n  };\r\n\r\n  const handlePreviewToggle = () => {\r\n    setShowPreview(!showPreview);\r\n  };\r\n\r\n  const replacePlaceholders = (text) => {\r\n    if (!text) return \"\";\r\n    let result = text;\r\n    Object.entries(previewData).forEach(([key, value]) => {\r\n      result = result.replace(new RegExp(`{${key}}`, \"g\"), value);\r\n    });\r\n    return result;\r\n  };\r\n\r\n  const handleDetailedEdit = (field, data) => {\r\n    setEditingSection(field);\r\n    setEditData(data);\r\n  };\r\n\r\n  const handleDetailedSave = async () => {\r\n    try {\r\n      const currentTemplate = selectedTemplate;\r\n      const template = templates[currentTemplate];\r\n\r\n      // Determine which section key to use based on template type\r\n      const sectionKey = template.standardSections\r\n        ? \"standardSections\"\r\n        : \"leadAssessmentSections\";\r\n\r\n      // Update template via API\r\n      await reportTemplateService.updateTemplate(currentTemplate, {\r\n        [sectionKey]: {\r\n          [editingSection]: editData,\r\n        },\r\n      });\r\n\r\n      // Update local state\r\n      setTemplates((prev) => ({\r\n        ...prev,\r\n        [currentTemplate]: {\r\n          ...prev[currentTemplate],\r\n          [sectionKey]: {\r\n            ...prev[currentTemplate]?.[sectionKey],\r\n            [editingSection]: editData,\r\n          },\r\n        },\r\n      }));\r\n\r\n      setSaveStatus({\r\n        show: true,\r\n        message: `${editingSection} updated successfully!`,\r\n        severity: \"success\",\r\n      });\r\n\r\n      setEditingSection(null);\r\n      setEditData({});\r\n\r\n      // Hide success message after 3 seconds\r\n      setTimeout(() => {\r\n        setSaveStatus({ show: false, message: \"\", severity: \"success\" });\r\n      }, 3000);\r\n    } catch (error) {\r\n      console.error(\"Error saving template:\", error);\r\n      setSaveStatus({\r\n        show: true,\r\n        message: \"Error saving changes. Please try again.\",\r\n        severity: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const generatePDFPreview = async () => {\r\n    const currentTemplate = selectedTemplate;\r\n    const template = templates[currentTemplate];\r\n    if (!template) return;\r\n\r\n    setGeneratingPDF(true);\r\n    try {\r\n      // Use the utility function to generate PDF\r\n      const fileName = await generateTemplatePDF(\r\n        template,\r\n        previewData,\r\n        replacePlaceholders\r\n      );\r\n\r\n      setSaveStatus({\r\n        show: true,\r\n        message: \"PDF preview generated successfully!\",\r\n        severity: \"success\",\r\n      });\r\n\r\n      // Hide success message after 3 seconds\r\n      setTimeout(() => {\r\n        setSaveStatus({ show: false, message: \"\", severity: \"success\" });\r\n      }, 3000);\r\n    } catch (error) {\r\n      console.error(\"Error generating PDF:\", error);\r\n      setSaveStatus({\r\n        show: true,\r\n        message: \"Error generating PDF. Please try again.\",\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      setGeneratingPDF(false);\r\n    }\r\n  };\r\n\r\n  const handleGeneratePDF = async () => {\r\n    try {\r\n      setGeneratingPDF(true);\r\n      const template = templates[selectedTemplate];\r\n      if (!template) {\r\n        throw new Error(\"Template not found\");\r\n      }\r\n\r\n      await generateTemplatePDF(template, previewData);\r\n      setSaveStatus({\r\n        show: true,\r\n        message: \"PDF generated successfully!\",\r\n        severity: \"success\",\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error generating PDF:\", error);\r\n      setSaveStatus({\r\n        show: true,\r\n        message: \"Error generating PDF\",\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      setGeneratingPDF(false);\r\n    }\r\n  };\r\n\r\n  const renderSectionEditor = () => {\r\n    if (!editingSection || !editData) return null;\r\n\r\n    const currentTemplate = templates[selectedTemplate];\r\n    const sectionData = currentTemplate[editingSection];\r\n\r\n    if (editingSection === \"companyDetails\") {\r\n      return (\r\n        <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\r\n          {Object.keys(sectionData).map((key) => (\r\n            <TextField\r\n              key={key}\r\n              label={\r\n                key.charAt(0).toUpperCase() +\r\n                key.slice(1).replace(/([A-Z])/g, \" $1\")\r\n              }\r\n              value={editData[key] || \"\"}\r\n              onChange={(e) =>\r\n                setEditData((prev) => ({ ...prev, [key]: e.target.value }))\r\n              }\r\n              fullWidth\r\n              variant=\"outlined\"\r\n            />\r\n          ))}\r\n        </Box>\r\n      );\r\n    }\r\n\r\n    if (editingSection === \"standardSections\") {\r\n      return (\r\n        <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\r\n          {Object.keys(sectionData).map((key) => (\r\n            <TextField\r\n              key={key}\r\n              label={\r\n                key.charAt(0).toUpperCase() +\r\n                key.slice(1).replace(/([A-Z])/g, \" $1\")\r\n              }\r\n              value={editData[key] || \"\"}\r\n              onChange={(e) =>\r\n                setEditData((prev) => ({ ...prev, [key]: e.target.value }))\r\n              }\r\n              fullWidth\r\n              multiline\r\n              rows={4}\r\n              variant=\"outlined\"\r\n            />\r\n          ))}\r\n        </Box>\r\n      );\r\n    }\r\n\r\n    if (editingSection === \"reportHeaders\") {\r\n      return (\r\n        <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\r\n          {Object.keys(sectionData).map((key) => (\r\n            <TextField\r\n              key={key}\r\n              label={\r\n                key.charAt(0).toUpperCase() +\r\n                key.slice(1).replace(/([A-Z])/g, \" $1\")\r\n              }\r\n              value={editData[key] || \"\"}\r\n              onChange={(e) =>\r\n                setEditData((prev) => ({ ...prev, [key]: e.target.value }))\r\n              }\r\n              fullWidth\r\n              variant=\"outlined\"\r\n            />\r\n          ))}\r\n        </Box>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const renderDetailedTemplateSection = (sectionName, fields) => {\r\n    const currentTemplate = selectedTemplate;\r\n    const template = templates[currentTemplate];\r\n    if (!template) return null;\r\n\r\n    return (\r\n      <Grid item xs={12} key={sectionName}>\r\n        <Card>\r\n          <CardContent>\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n                mb: 2,\r\n              }}\r\n            >\r\n              <Typography variant=\"h6\" color=\"black\">\r\n                {sectionName}\r\n              </Typography>\r\n            </Box>\r\n            <Grid container spacing={2}>\r\n              {fields.map((field) => (\r\n                <Grid item xs={12} key={field}>\r\n                  <Box\r\n                    sx={{\r\n                      p: 2,\r\n                      border: `1px solid ${colors.grey[700]}`,\r\n                      borderRadius: 1,\r\n                      position: \"relative\",\r\n                    }}\r\n                  >\r\n                    <Box\r\n                      sx={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        alignItems: \"center\",\r\n                        mb: 1,\r\n                      }}\r\n                    >\r\n                      <Typography variant=\"subtitle2\" color=\"black\">\r\n                        {field.charAt(0).toUpperCase() +\r\n                          field.slice(1).replace(/([A-Z])/g, \" $1\")}\r\n                      </Typography>\r\n                      <IconButton\r\n                        onClick={() =>\r\n                          handleDetailedEdit(\r\n                            field,\r\n                            template.standardSections[field] || \"\"\r\n                          )\r\n                        }\r\n                        size=\"small\"\r\n                      >\r\n                        <EditIcon />\r\n                      </IconButton>\r\n                    </Box>\r\n                    <Typography\r\n                      variant=\"body2\"\r\n                      color=\"black\"\r\n                      sx={{ whiteSpace: \"pre-line\" }}\r\n                    >\r\n                      {template.standardSections[field] || \"\"}\r\n                    </Typography>\r\n                  </Box>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  const renderDetailedEditor = () => {\r\n    if (!editingSection || !editData) return null;\r\n\r\n    // Available placeholders for reference\r\n    const availablePlaceholders = [\r\n      \"CLIENT_NAME\",\r\n      \"ASBESTOS_TYPE\",\r\n      \"SITE_NAME\",\r\n      \"ASBESTOS_REMOVALIST\",\r\n      \"LAA_NAME\",\r\n      \"LAA_LICENSE\",\r\n      \"INSPECTION_TIME\",\r\n      \"INSPECTION_DATE\",\r\n      \"REPORT_TYPE\",\r\n      \"PROJECT_NAME\",\r\n      \"PROJECT_NUMBER\",\r\n      \"SITE_ADDRESS\",\r\n      \"REMOVAL_CONTRACTOR\",\r\n      \"REMOVAL_LICENSE\",\r\n      \"INSPECTOR_NAME\",\r\n      \"INSPECTOR_LICENSE\",\r\n      \"INSPECTION_DATETIME\",\r\n      \"CLEARANCE_DATE\",\r\n      \"CLEARANCE_TIME\",\r\n      \"SIGNATURE_IMAGE\",\r\n    ];\r\n\r\n    return (\r\n      <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\r\n        <TextField\r\n          label={\r\n            editingSection.charAt(0).toUpperCase() +\r\n            editingSection.slice(1).replace(/([A-Z])/g, \" $1\")\r\n          }\r\n          value={editData}\r\n          onChange={(e) => setEditData(e.target.value)}\r\n          fullWidth\r\n          multiline\r\n          rows={8}\r\n          variant=\"outlined\"\r\n          helperText=\"Use {PLACEHOLDER_NAME} for dynamic content. Available placeholders will be replaced with actual data when generating reports.\"\r\n        />\r\n\r\n        {/* Available Placeholders */}\r\n        <Box sx={{ p: 2, backgroundColor: \"#f5f5f5\", borderRadius: 1 }}>\r\n          <Typography variant=\"subtitle2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n            Available Placeholders:\r\n          </Typography>\r\n          <Box sx={{ display: \"flex\", flexWrap: \"wrap\", gap: 0.5 }}>\r\n            {availablePlaceholders.map((placeholder) => (\r\n              <Chip\r\n                key={placeholder}\r\n                label={`{${placeholder}}`}\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                sx={{ fontSize: \"0.7rem\", cursor: \"pointer\" }}\r\n                onClick={() => {\r\n                  const textField = document.querySelector(\r\n                    'textarea[aria-label*=\"' +\r\n                      editingSection.charAt(0).toUpperCase() +\r\n                      editingSection.slice(1).replace(/([A-Z])/g, \" $1\") +\r\n                      '\"]'\r\n                  );\r\n                  if (textField) {\r\n                    const start = textField.selectionStart;\r\n                    const end = textField.selectionEnd;\r\n                    const newValue =\r\n                      editData.substring(0, start) +\r\n                      `{${placeholder}}` +\r\n                      editData.substring(end);\r\n                    setEditData(newValue);\r\n                    // Focus back to text field\r\n                    setTimeout(() => textField.focus(), 0);\r\n                  }\r\n                }}\r\n              />\r\n            ))}\r\n          </Box>\r\n        </Box>\r\n        <Box sx={{ display: \"flex\", gap: 1, justifyContent: \"flex-end\" }}>\r\n          <Button onClick={handleCancel} startIcon={<CancelIcon />}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleDetailedSave}\r\n            variant=\"contained\"\r\n            startIcon={<SaveIcon />}\r\n          >\r\n            Save\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const renderPreview = () => {\r\n    const currentTemplate = selectedTemplate;\r\n    const template = templates[currentTemplate];\r\n    if (!template || !showPreview) return null;\r\n\r\n    return (\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <CardContent>\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n                mb: 2,\r\n              }}\r\n            >\r\n              <Typography variant=\"h6\" color=\"black\">\r\n                Live Preview\r\n              </Typography>\r\n              <Box sx={{ display: \"flex\", gap: 1 }}>\r\n                <Button\r\n                  onClick={generatePDFPreview}\r\n                  startIcon={<DownloadIcon />}\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n                  disabled={generatingPDF}\r\n                  sx={{\r\n                    backgroundColor: \"#2e7d32\",\r\n                    \"&:hover\": { backgroundColor: \"#1b5e20\" },\r\n                  }}\r\n                >\r\n                  {generatingPDF ? \"Generating...\" : \"Generate PDF\"}\r\n                </Button>\r\n                <Button\r\n                  onClick={handlePreviewToggle}\r\n                  startIcon={<PreviewIcon />}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                >\r\n                  Hide Preview\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n            <Paper\r\n              sx={{\r\n                p: 3,\r\n                backgroundColor: \"white\",\r\n                color: \"black\",\r\n                maxHeight: \"600px\",\r\n                overflow: \"auto\",\r\n                fontFamily: \"Arial, sans-serif\",\r\n              }}\r\n            >\r\n              <Typography variant=\"h4\" sx={{ mb: 2, color: \"#009900\" }}>\r\n                {replacePlaceholders(\r\n                  template.standardSections.backgroundInformationTitle\r\n                )}\r\n              </Typography>\r\n              <Typography\r\n                variant=\"body1\"\r\n                sx={{ mb: 3, whiteSpace: \"pre-line\" }}\r\n              >\r\n                {replacePlaceholders(\r\n                  template.standardSections.backgroundInformationContent\r\n                )}\r\n              </Typography>\r\n\r\n              <Divider sx={{ my: 2 }} />\r\n\r\n              <Typography variant=\"h5\" sx={{ mb: 2 }}>\r\n                {replacePlaceholders(\r\n                  template.standardSections.legislativeRequirementsTitle\r\n                )}\r\n              </Typography>\r\n              <Typography\r\n                variant=\"body1\"\r\n                sx={{ mb: 2, whiteSpace: \"pre-line\" }}\r\n              >\r\n                {replacePlaceholders(\r\n                  template.standardSections.legislativeRequirementsContent\r\n                )}\r\n              </Typography>\r\n\r\n              <Divider sx={{ my: 2 }} />\r\n\r\n              <Typography variant=\"h5\" sx={{ mb: 2 }}>\r\n                {replacePlaceholders(\r\n                  template.standardSections\r\n                    .nonFriableClearanceCertificateLimitationsTitle\r\n                )}\r\n              </Typography>\r\n              <Typography\r\n                variant=\"body1\"\r\n                sx={{ mb: 2, whiteSpace: \"pre-line\" }}\r\n              >\r\n                {replacePlaceholders(\r\n                  template.standardSections\r\n                    .nonFriableClearanceCertificateLimitationsContent\r\n                )}\r\n              </Typography>\r\n\r\n              <Divider sx={{ my: 2 }} />\r\n\r\n              <Typography variant=\"h5\" sx={{ mb: 2 }}>\r\n                {replacePlaceholders(\r\n                  template.standardSections.inspectionDetailsTitle\r\n                )}\r\n              </Typography>\r\n              <Typography\r\n                variant=\"body1\"\r\n                sx={{ mb: 2, whiteSpace: \"pre-line\" }}\r\n              >\r\n                {replacePlaceholders(\r\n                  template.standardSections.inspectionDetailsContent\r\n                )}\r\n              </Typography>\r\n\r\n              <Divider sx={{ my: 2 }} />\r\n\r\n              <Typography variant=\"h5\" sx={{ mb: 2 }}>\r\n                {replacePlaceholders(\r\n                  template.standardSections.inspectionExclusionsTitle\r\n                )}\r\n              </Typography>\r\n              <Typography\r\n                variant=\"body1\"\r\n                sx={{ mb: 2, whiteSpace: \"pre-line\" }}\r\n              >\r\n                {replacePlaceholders(\r\n                  template.standardSections.inspectionExclusionsContent\r\n                )}\r\n              </Typography>\r\n\r\n              <Divider sx={{ my: 2 }} />\r\n\r\n              <Typography variant=\"h5\" sx={{ mb: 2 }}>\r\n                {replacePlaceholders(\r\n                  template.standardSections.clearanceCertificationTitle\r\n                )}\r\n              </Typography>\r\n              <Typography\r\n                variant=\"body1\"\r\n                sx={{ mb: 2, whiteSpace: \"pre-line\" }}\r\n              >\r\n                {replacePlaceholders(\r\n                  template.standardSections.clearanceCertificationContent\r\n                )}\r\n              </Typography>\r\n\r\n              <Divider sx={{ my: 2 }} />\r\n\r\n              <Typography\r\n                variant=\"body1\"\r\n                sx={{ mb: 2, whiteSpace: \"pre-line\" }}\r\n              >\r\n                {replacePlaceholders(template.standardSections.signOffContent)}\r\n              </Typography>\r\n            </Paper>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  const renderCompanyDetails = () => {\r\n    // Use the first template's company details since they're constant\r\n    const firstTemplate = Object.values(templates)[0];\r\n    if (!firstTemplate?.companyDetails) {\r\n      return null;\r\n    }\r\n\r\n    const companyDetails = firstTemplate.companyDetails;\r\n    const entries = Object.entries(companyDetails);\r\n    const leftColumn = entries.slice(0, 3);\r\n    const rightColumn = entries.slice(3);\r\n\r\n    return (\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <CardContent>\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n                mb: 2,\r\n              }}\r\n            >\r\n              <Typography variant=\"h6\" color=\"black\">\r\n                Company Details\r\n              </Typography>\r\n              <IconButton\r\n                onClick={() => handleEdit(\"companyDetails\", companyDetails)}\r\n                size=\"small\"\r\n              >\r\n                <EditIcon />\r\n              </IconButton>\r\n            </Box>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} md={6}>\r\n                <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n                  {leftColumn.map(([key, value]) => (\r\n                    <Box\r\n                      key={key}\r\n                      sx={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                    >\r\n                      <Typography variant=\"body2\" color=\"black\">\r\n                        {key.charAt(0).toUpperCase() +\r\n                          key.slice(1).replace(/([A-Z])/g, \" $1\")}\r\n                        :\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"black\">\r\n                        {value}\r\n                      </Typography>\r\n                    </Box>\r\n                  ))}\r\n                </Box>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n                  {rightColumn.map(([key, value]) => (\r\n                    <Box\r\n                      key={key}\r\n                      sx={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                    >\r\n                      <Typography variant=\"body2\" color=\"black\">\r\n                        {key.charAt(0).toUpperCase() +\r\n                          key.slice(1).replace(/([A-Z])/g, \" $1\")}\r\n                        :\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"black\">\r\n                        {value}\r\n                      </Typography>\r\n                    </Box>\r\n                  ))}\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  const renderAvailablePlaceholders = () => {\r\n    // Available placeholders for reference\r\n    const basePlaceholders = [\"CLIENT_NAME\", \"SITE_NAME\", \"SITE_ADDRESS\"];\r\n\r\n    const asbestosPlaceholders = [\r\n      \"ASBESTOS_TYPE\",\r\n      \"ASBESTOS_REMOVALIST\",\r\n      \"LAA_NAME\",\r\n      \"LAA_LICENSE\",\r\n      \"INSPECTION_TIME\",\r\n      \"INSPECTION_DATE\",\r\n      \"REPORT_TYPE\",\r\n      \"PROJECT_NAME\",\r\n      \"PROJECT_NUMBER\",\r\n      \"CLEARANCE_DATE\",\r\n      \"CLEARANCE_TIME\",\r\n      \"SIGNATURE_IMAGE\",\r\n    ];\r\n\r\n    const leadPlaceholders = [\r\n      \"BUILDING_DESCRIPTION\",\r\n      \"CONSTRUCTION_YEAR\",\r\n      \"NUMBER_OF_SAMPLES\",\r\n      \"NUMBER_OF_ISSUES\",\r\n      \"REPORT_DATE\",\r\n      \"ASSESSOR_NAME\",\r\n      \"ASSESSOR_LICENSE\",\r\n    ];\r\n\r\n    // Determine which placeholders to show based on selected template\r\n    let availablePlaceholders = basePlaceholders;\r\n\r\n    if (\r\n      selectedTemplate === \"asbestosClearanceNonFriable\" ||\r\n      selectedTemplate === \"asbestosClearanceFriable\"\r\n    ) {\r\n      availablePlaceholders = [...basePlaceholders, ...asbestosPlaceholders];\r\n    } else if (selectedTemplate === \"leadAssessment\") {\r\n      availablePlaceholders = [...basePlaceholders, ...leadPlaceholders];\r\n    }\r\n\r\n    return (\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <CardContent>\r\n            <Typography variant=\"h6\" color=\"black\" sx={{ mb: 2 }}>\r\n              Available Placeholders\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n              Use these placeholders in your template content. They will be\r\n              automatically replaced with actual data when generating reports.\r\n            </Typography>\r\n            <Box sx={{ display: \"flex\", flexWrap: \"wrap\", gap: 1 }}>\r\n              {availablePlaceholders.map((placeholder) => (\r\n                <Chip\r\n                  key={placeholder}\r\n                  label={`{${placeholder}}`}\r\n                  size=\"small\"\r\n                  variant=\"outlined\"\r\n                  sx={{ fontSize: \"0.8rem\" }}\r\n                />\r\n              ))}\r\n            </Box>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  const renderTemplateContent = (templateId) => {\r\n    const template = templates[templateId];\r\n\r\n    // Return loading state if template doesn't exist yet\r\n    if (!template) {\r\n      return (\r\n        <Box\r\n          sx={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            minHeight: \"200px\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h6\" color=\"black\">\r\n            Loading template...\r\n          </Typography>\r\n        </Box>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Grid container spacing={3}>\r\n        {/* Report Headers */}\r\n        <Grid item xs={12} md={6}>\r\n          <Card>\r\n            <CardContent>\r\n              <Box\r\n                sx={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  alignItems: \"center\",\r\n                  mb: 2,\r\n                }}\r\n              >\r\n                <Typography variant=\"h6\" color=\"black\">\r\n                  Report Headers\r\n                </Typography>\r\n                <IconButton\r\n                  onClick={() =>\r\n                    handleEdit(\"reportHeaders\", template.reportHeaders || {})\r\n                  }\r\n                  size=\"small\"\r\n                >\r\n                  <EditIcon />\r\n                </IconButton>\r\n              </Box>\r\n              <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n                {template.reportHeaders &&\r\n                  Object.entries(template.reportHeaders).map(([key, value]) => (\r\n                    <Box\r\n                      key={key}\r\n                      sx={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                    >\r\n                      <Typography variant=\"body2\" color=\"black\">\r\n                        {key.charAt(0).toUpperCase() +\r\n                          key.slice(1).replace(/([A-Z])/g, \" $1\")}\r\n                        :\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"black\">\r\n                        {value}\r\n                      </Typography>\r\n                    </Box>\r\n                  ))}\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Template Sections */}\r\n        <Grid item xs={12}>\r\n          <Card>\r\n            <CardContent>\r\n              <Box\r\n                sx={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  alignItems: \"center\",\r\n                  mb: 2,\r\n                }}\r\n              >\r\n                <Typography variant=\"h6\" color=\"black\">\r\n                  Template Sections\r\n                </Typography>\r\n                <IconButton\r\n                  onClick={() => {\r\n                    const sections =\r\n                      template.standardSections ||\r\n                      template.leadAssessmentSections ||\r\n                      {};\r\n                    const sectionKey = template.standardSections\r\n                      ? \"standardSections\"\r\n                      : \"leadAssessmentSections\";\r\n                    handleEdit(sectionKey, sections);\r\n                  }}\r\n                  size=\"small\"\r\n                >\r\n                  <EditIcon />\r\n                </IconButton>\r\n              </Box>\r\n              <Grid container spacing={2}>\r\n                {(template.standardSections ||\r\n                  template.leadAssessmentSections) &&\r\n                  Object.entries(\r\n                    template.standardSections || template.leadAssessmentSections\r\n                  ).map(([key, value]) => (\r\n                    <Grid item xs={12} md={6} key={key}>\r\n                      <Box\r\n                        sx={{\r\n                          p: 2,\r\n                          border: `1px solid ${colors.grey[700]}`,\r\n                          borderRadius: 1,\r\n                        }}\r\n                      >\r\n                        <Typography\r\n                          variant=\"subtitle2\"\r\n                          color=\"black\"\r\n                          sx={{ mb: 1 }}\r\n                        >\r\n                          {key.charAt(0).toUpperCase() +\r\n                            key.slice(1).replace(/([A-Z])/g, \" $1\")}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"black\">\r\n                          {value && value.length > 150\r\n                            ? `${value.substring(0, 150)}...`\r\n                            : value}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                  ))}\r\n              </Grid>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <PermissionGate requiredPermissions={[\"admin.view\"]}>\r\n      <Box m=\"20px\">\r\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Typography\r\n            variant=\"h2\"\r\n            color=\"black\"\r\n            fontWeight=\"bold\"\r\n            sx={{ mb: \"5px\" }}\r\n          >\r\n            Report Templates\r\n          </Typography>\r\n          <Box sx={{ display: \"flex\", gap: 2 }}>\r\n            <Button\r\n              onClick={handlePreviewToggle}\r\n              startIcon={<PreviewIcon />}\r\n              variant=\"outlined\"\r\n            >\r\n              {showPreview ? \"Hide Preview\" : \"Show Preview\"}\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n        <Typography variant=\"h5\" color=\"black\">\r\n          Manage standardized content for different report types\r\n        </Typography>\r\n\r\n        {saveStatus.show && (\r\n          <Alert severity={saveStatus.severity} sx={{ mt: 2, mb: 2 }}>\r\n            {saveStatus.message}\r\n          </Alert>\r\n        )}\r\n\r\n        {/* Company Details - Full width at top */}\r\n        <Box sx={{ mt: 3 }}>\r\n          {loading ? (\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                minHeight: \"200px\",\r\n              }}\r\n            >\r\n              <Typography variant=\"h6\" color=\"black\">\r\n                Loading templates...\r\n              </Typography>\r\n            </Box>\r\n          ) : (\r\n            <Grid container spacing={3}>\r\n              {renderCompanyDetails()}\r\n            </Grid>\r\n          )}\r\n        </Box>\r\n\r\n        {/* Available Placeholders - Beneath company details */}\r\n        <Box sx={{ mt: 3 }}>\r\n          {!loading && (\r\n            <Grid container spacing={3}>\r\n              {renderAvailablePlaceholders()}\r\n            </Grid>\r\n          )}\r\n        </Box>\r\n\r\n        {/* Report Template Selection Dropdown */}\r\n        <Box sx={{ mt: 3, mb: 2 }}>\r\n          <FormControl fullWidth>\r\n            <InputLabel id=\"template-select-label\">\r\n              Select Report Template\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"template-select-label\"\r\n              value={selectedTemplate}\r\n              label=\"Select Report Template\"\r\n              onChange={handleTemplateChange}\r\n              sx={{\r\n                \"& .MuiSelect-select\": {\r\n                  color: \"black\",\r\n                },\r\n              }}\r\n            >\r\n              {reportTypes.map((type) => (\r\n                <MenuItem key={type.id} value={type.id}>\r\n                  {type.name}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n\r\n        {/* Template Content */}\r\n        <Box sx={{ mt: 3 }}>\r\n          {loading ? (\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                minHeight: \"200px\",\r\n              }}\r\n            >\r\n              <Typography variant=\"h6\" color=\"black\">\r\n                Loading templates...\r\n              </Typography>\r\n            </Box>\r\n          ) : (\r\n            <Grid container spacing={3}>\r\n              {/* Preview Section */}\r\n              {showPreview && renderPreview()}\r\n\r\n              {/* Detailed Template Sections */}\r\n              {Object.entries(templateSections).map(([sectionName, fields]) =>\r\n                renderDetailedTemplateSection(sectionName, fields)\r\n              )}\r\n            </Grid>\r\n          )}\r\n        </Box>\r\n\r\n        {/* Edit Dialog */}\r\n        <Dialog\r\n          open={openDialog}\r\n          onClose={handleCancel}\r\n          maxWidth=\"md\"\r\n          fullWidth\r\n        >\r\n          <DialogTitle>\r\n            Edit{\" \"}\r\n            {editingSection?.charAt(0).toUpperCase() +\r\n              editingSection?.slice(1).replace(/([A-Z])/g, \" $1\")}\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <Box sx={{ mt: 2 }}>{renderSectionEditor()}</Box>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleCancel} startIcon={<CancelIcon />}>\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              onClick={handleSave}\r\n              variant=\"contained\"\r\n              startIcon={<SaveIcon />}\r\n            >\r\n              Save Changes\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n\r\n        {/* Detailed Edit Dialog */}\r\n        {editingSection && (\r\n          <Box\r\n            sx={{\r\n              position: \"fixed\",\r\n              top: 0,\r\n              left: 0,\r\n              right: 0,\r\n              bottom: 0,\r\n              backgroundColor: \"rgba(0,0,0,0.8)\",\r\n              zIndex: 1300,\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              p: 2,\r\n            }}\r\n          >\r\n            <Paper\r\n              sx={{\r\n                p: 3,\r\n                maxWidth: \"800px\",\r\n                width: \"100%\",\r\n                maxHeight: \"80vh\",\r\n                overflow: \"auto\",\r\n              }}\r\n            >\r\n              <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n                Edit{\" \"}\r\n                {editingSection.charAt(0).toUpperCase() +\r\n                  editingSection.slice(1).replace(/([A-Z])/g, \" $1\")}\r\n              </Typography>\r\n              {renderDetailedEditor()}\r\n            </Paper>\r\n          </Box>\r\n        )}\r\n      </Box>\r\n    </PermissionGate>\r\n  );\r\n};\r\n\r\nexport default ReportTemplates;\r\n","import jsPDF from \"jspdf\";\nimport html2canvas from \"html2canvas\";\n\nexport const generateTemplatePDF = async (template, sampleData, replacePlaceholders) => {\n  // Create a new PDF document\n  const doc = new jsPDF();\n  \n  // Set up the page\n  const pageWidth = doc.internal.pageSize.getWidth();\n  const pageHeight = doc.internal.pageSize.getHeight();\n  const margin = 20;\n  const contentWidth = pageWidth - (2 * margin);\n  \n  let y = margin;\n\n  // Helper function to add text with proper spacing\n  const addText = (text, fontSize = 11, fontStyle = \"normal\", spacing = 8) => {\n    if (!text) return y;\n    \n    doc.setFontSize(fontSize);\n    doc.setFont(\"helvetica\", fontStyle);\n    \n    const lines = doc.splitTextToSize(text, contentWidth);\n    doc.text(text, margin, y, { maxWidth: contentWidth });\n    \n    y += (lines.length * fontSize * 1.2) + spacing;\n    return y;\n  };\n\n  // Helper function to add header\n  const addHeader = (text, fontSize = 14, fontStyle = \"bold\") => {\n    return addText(text, fontSize, fontStyle, 12);\n  };\n\n  // Front Cover\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.frontCoverTitle || \"Non-friable Asbestos Removal Clearance\"\n    ),\n    16,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.frontCoverSubtitle || \"\"),\n    12,\n    \"normal\",\n    20\n  );\n\n  // Add a line break\n  y += 10;\n\n  // Company Details\n  if (template.companyDetails) {\n    y = addHeader(\"Company Details\", 12, \"bold\");\n    Object.entries(template.companyDetails).forEach(([key, value]) => {\n      const label = key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, \" $1\");\n      y = addText(`${label}: ${value}`, 10, \"normal\", 4);\n    });\n    y += 10;\n  }\n\n  // Inspection Details\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.inspectionDetailsTitle || \"Inspection Details\"\n    ),\n    12,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.inspectionIntroduction || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.inspectionSpecifics || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.tableIntroduction || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n\n  // Add a sample inspection table\n  y = addText(\"Sample Inspection Results:\", 10, \"bold\", 4);\n  \n  // Simple table structure\n  const tableData = [\n    [\"Area\", \"Material Type\", \"Condition\", \"Result\"],\n    [\"Kitchen\", \"Vinyl Floor Tiles\", \"Good\", \"Pass\"],\n    [\"Bathroom\", \"Vinyl Floor Tiles\", \"Good\", \"Pass\"],\n    [\"Living Room\", \"Vinyl Floor Tiles\", \"Good\", \"Pass\"],\n  ];\n\n  tableData.forEach((row, index) => {\n    const isHeader = index === 0;\n    const fontStyle = isHeader ? \"bold\" : \"normal\";\n    const fontSize = isHeader ? 10 : 9;\n    \n    // Calculate column widths\n    const colWidths = [40, 50, 40, 30];\n    let x = margin;\n    \n    row.forEach((cell, colIndex) => {\n      doc.setFontSize(fontSize);\n      doc.setFont(\"helvetica\", fontStyle);\n      doc.text(cell, x, y, { maxWidth: colWidths[colIndex] });\n      x += colWidths[colIndex] + 5;\n    });\n    \n    y += fontSize * 1.2 + 2;\n  });\n  \n  y += 10;\n\n  // Check if we need a new page\n  if (y > pageHeight - 100) {\n    doc.addPage();\n    y = margin;\n  }\n\n  // Clearance Certification\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.clearanceCertificationTitle || \"Clearance Certification\"\n    ),\n    12,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.clearanceCertificationText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.riskAssessmentText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.contactText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.behalfText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.signatureTitle || \"\"),\n    10,\n    \"bold\",\n    8\n  );\n\n  // Check if we need a new page\n  if (y > pageHeight - 100) {\n    doc.addPage();\n    y = margin;\n  }\n\n  // Background Information\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.backgroundTitle || \"Background Information\"\n    ),\n    12,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.backgroundIntroduction || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.bulletPoint1 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.bulletPoint2 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.requirementsText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.bulletPoint3 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.bulletPoint4 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.bulletPoint5 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n\n  // Check if we need a new page\n  if (y > pageHeight - 100) {\n    doc.addPage();\n    y = margin;\n  }\n\n  // Legislative Requirements\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.legislativeTitle || \"Legislative Requirements\"\n    ),\n    12,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.legislativeIntroduction || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.legislativePoint1 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.legislativePoint2 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.legislativePoint3 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n\n  // Limitations\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.limitationsTitle || \"Limitations\"\n    ),\n    12,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.limitationsText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n\n  // Check if we need a new page for signature\n  if (y > pageHeight - 150) {\n    doc.addPage();\n    y = margin;\n  }\n\n  // Signature Section\n  y = addHeader(\"Authorised Signature\", 12, \"bold\");\n  y += 20; // Space for signature line\n  \n  // Signature line\n  doc.setLineWidth(0.5);\n  doc.line(margin, y, margin + 80, y);\n  y += 5;\n  \n  // Signature details\n  y = addText(\"Name: John Smith\", 10, \"normal\", 4);\n  y = addText(\"License: AI000456\", 10, \"normal\", 4);\n  y = addText(\"Date: 25 July 2024\", 10, \"normal\", 4);\n  \n  y += 20;\n\n  // Footer\n  y = addText(\n    replacePlaceholders(template.standardSections.footerText || \"\"),\n    9,\n    \"normal\",\n    8\n  );\n\n  // Save the PDF\n  const fileName = `asbestos-clearance-template-preview-${new Date().toISOString().split('T')[0]}.pdf`;\n  doc.save(fileName);\n\n  return fileName;\n};\n\n/**\n * Generate PDF from HTML templates using server-side Puppeteer\n * @param {string} templateType - Type of template (e.g., 'asbestos-clearance')\n * @param {Object} data - Clearance data\n * @returns {Promise<string>} - Generated PDF filename\n */\nexport const generateHTMLPDF = async (templateType, data) => {\n  return generateHTMLTemplatePDF(templateType, data);\n    };\n\nexport const generateHTMLTemplatePDF = async (templateType, data) => {\n  try {\n    console.log('Starting server-side PDF generation with data:', data);\n    \n    // Get the API base URL from the environment\n    const apiBaseUrl = process.env.NODE_ENV === 'development' \n      ? \"http://localhost:5000/api\" \n      : \"https://landd-app-backend1.onrender.com/api\";\n    \n    const requestUrl = `${apiBaseUrl}/pdf/generate-asbestos-clearance?t=${Date.now()}`;\n    console.log('Calling backend URL:', requestUrl);\n\n    // Call the server-side PDF generation endpoint with cache busting\n    const response = await fetch(requestUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      },\n      body: JSON.stringify({ clearanceData: data })\n    });\n\n    console.log('Response status:', response.status);\n    console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to generate PDF');\n    }\n\n    // Get the PDF blob\n    const pdfBlob = await response.blob();\n    console.log('PDF blob size:', pdfBlob.size, 'bytes');\n\n    // Create a download link\n    const url = window.URL.createObjectURL(pdfBlob);\n    const link = document.createElement('a');\n    link.href = url;\n\n    // Generate filename\n    const fileName = `asbestos-clearance-${data.projectId?.name || 'report'}-${new Date().toISOString().split('T')[0]}.pdf`;\n    link.download = fileName;\n\n    // Trigger download\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    // Clean up\n    window.URL.revokeObjectURL(url);\n    \n    console.log('PDF generation completed successfully:', fileName);\n    return fileName;\n    \n  } catch (error) {\n    console.error(\"Error generating HTML template PDF:\", error);\n    console.error(\"Error stack:\", error.stack);\n    throw error;\n  }\n}; ","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5zM19 9h-4V3H9v6H5l7 7z\"\n}), 'Download');"],"names":["reportTemplateService","getAllTemplates","async","asbestosClearanceTemplates","leadAssessmentTemplates","Promise","all","api","get","data","error","console","getTemplateByType","response","templateType","concat","Error","createTemplate","templateData","post","updateTemplate","updateData","put","deleteTemplate","delete","initializeDefaultTemplates","defaultTemplates","companyDetails","name","address","email","phone","website","abn","reportHeaders","title","subtitle","template","_error$response","status","log","createSvgIcon","_jsx","d","ReportTemplates","useTheme","colors","tokens","user","useAuth","selectedTemplate","setSelectedTemplate","useState","templates","setTemplates","loading","setLoading","editingSection","setEditingSection","editData","setEditData","openDialog","setOpenDialog","saveStatus","setSaveStatus","show","message","severity","previewData","setPreviewData","showPreview","setShowPreview","generatingPDF","setGeneratingPDF","getSampleData","isFriable","CLIENT_NAME","ASBESTOS_TYPE","SITE_NAME","ASBESTOS_REMOVALIST","LAA_NAME","LAA_LICENSE","INSPECTION_TIME","INSPECTION_DATE","REPORT_TYPE","PROJECT_NAME","PROJECT_NUMBER","SITE_ADDRESS","CLEARANCE_DATE","CLEARANCE_TIME","BUILDING_DESCRIPTION","CONSTRUCTION_YEAR","NUMBER_OF_SAMPLES","NUMBER_OF_ISSUES","REPORT_DATE","ASSESSOR_NAME","ASSESSOR_LICENSE","templateSections","baseSections","Footer","Recommendations","Conclusion","getTemplateSections","useEffect","allTemplates","templatesObj","forEach","loadTemplates","handleEdit","section","handleCancel","handlePreviewToggle","replacePlaceholders","text","result","Object","entries","_ref","key","value","replace","RegExp","handleDetailedSave","currentTemplate","sectionKey","standardSections","prev","_prev$currentTemplate","_objectSpread","setTimeout","generatePDFPreview","generateTemplatePDF","renderDetailedTemplateSection","sectionName","fields","Grid","item","xs","children","Card","_jsxs","CardContent","Box","sx","display","justifyContent","alignItems","mb","Typography","variant","color","container","spacing","map","field","p","border","grey","borderRadius","position","charAt","toUpperCase","slice","IconButton","onClick","handleDetailedEdit","size","EditIcon","whiteSpace","PermissionGate","requiredPermissions","m","fontWeight","gap","Button","startIcon","PreviewIcon","Alert","mt","minHeight","renderCompanyDetails","firstTemplate","values","leftColumn","rightColumn","md","flexDirection","_ref2","_ref3","renderAvailablePlaceholders","basePlaceholders","asbestosPlaceholders","leadPlaceholders","availablePlaceholders","flexWrap","placeholder","Chip","label","fontSize","FormControl","fullWidth","InputLabel","id","Select","labelId","onChange","event","newTemplateType","target","type","MenuItem","renderPreview","DownloadIcon","disabled","backgroundColor","Paper","maxHeight","overflow","fontFamily","backgroundInformationTitle","backgroundInformationContent","Divider","my","legislativeRequirementsTitle","legislativeRequirementsContent","nonFriableClearanceCertificateLimitationsTitle","nonFriableClearanceCertificateLimitationsContent","inspectionDetailsTitle","inspectionDetailsContent","inspectionExclusionsTitle","inspectionExclusionsContent","clearanceCertificationTitle","clearanceCertificationContent","signOffContent","_ref6","Dialog","open","onClose","maxWidth","DialogTitle","DialogContent","renderSectionEditor","sectionData","keys","TextField","e","multiline","rows","DialogActions","CancelIcon","SaveIcon","top","left","right","bottom","zIndex","width","renderDetailedEditor","helperText","cursor","textField","document","querySelector","start","selectionStart","end","selectionEnd","newValue","substring","focus","sampleData","doc","jsPDF","pageWidth","internal","pageSize","getWidth","pageHeight","getHeight","margin","contentWidth","y","addText","arguments","length","undefined","fontStyle","setFontSize","setFont","lines","splitTextToSize","addHeader","frontCoverTitle","frontCoverSubtitle","inspectionIntroduction","inspectionSpecifics","tableIntroduction","row","index","isHeader","colWidths","x","cell","colIndex","addPage","clearanceCertificationText","riskAssessmentText","contactText","behalfText","signatureTitle","backgroundTitle","backgroundIntroduction","bulletPoint1","bulletPoint2","requirementsText","bulletPoint3","bulletPoint4","bulletPoint5","legislativeTitle","legislativeIntroduction","legislativePoint1","legislativePoint2","legislativePoint3","limitationsTitle","limitationsText","setLineWidth","line","footerText","fileName","Date","toISOString","split","save","generateHTMLPDF","generateHTMLTemplatePDF","_data$projectId","requestUrl","now","fetch","method","headers","localStorage","getItem","body","JSON","stringify","clearanceData","fromEntries","ok","errorData","json","pdfBlob","blob","url","window","URL","createObjectURL","link","createElement","href","projectId","download","appendChild","click","removeChild","revokeObjectURL","stack"],"sourceRoot":""}