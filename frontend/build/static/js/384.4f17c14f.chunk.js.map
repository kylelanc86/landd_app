{"version":3,"file":"static/js/384.4f17c14f.chunk.js","mappings":"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","sources":["services/reportTemplateService.js","utils/templateDataBinding.js","utils/templateIntegrationExample.js","scenes/admin/TemplateTestPage.jsx"],"sourcesContent":["import api from './api';\r\n\r\nexport const reportTemplateService = {\r\n  // Get all report templates from all endpoints\r\n  getAllTemplates: async () => {\r\n    try {\r\n      // Fetch from all template endpoints\r\n      const [asbestosClearanceTemplates, leadAssessmentTemplates] = await Promise.all([\r\n        api.get('/asbestos-clearance-templates'),\r\n        api.get('/lead-assessment-templates')\r\n      ]);\r\n\r\n      // Combine all templates\r\n      const allTemplates = [\r\n        ...asbestosClearanceTemplates.data,\r\n        ...leadAssessmentTemplates.data\r\n      ];\r\n\r\n      return allTemplates;\r\n    } catch (error) {\r\n      console.error('Error fetching report templates:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get a specific template by type\r\n  getTemplateByType: async (templateType) => {\r\n    try {\r\n      let response;\r\n      \r\n      if (templateType === 'asbestosClearanceNonFriable' || templateType === 'asbestosClearanceFriable') {\r\n        response = await api.get(`/asbestos-clearance-templates/${templateType}`);\r\n      } else if (templateType === 'leadAssessment') {\r\n        response = await api.get(`/lead-assessment-templates/${templateType}`);\r\n      } else {\r\n        throw new Error(`Unknown template type: ${templateType}`);\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching report template:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Create a new template\r\n  createTemplate: async (templateData) => {\r\n    try {\r\n      const { templateType } = templateData;\r\n      let response;\r\n      \r\n      if (templateType === 'asbestosClearanceNonFriable' || templateType === 'asbestosClearanceFriable') {\r\n        response = await api.post('/asbestos-clearance-templates', templateData);\r\n      } else if (templateType === 'leadAssessment') {\r\n        response = await api.post('/lead-assessment-templates', templateData);\r\n      } else {\r\n        throw new Error(`Unknown template type: ${templateType}`);\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating report template:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update an existing template\r\n  updateTemplate: async (templateType, updateData) => {\r\n    try {\r\n      let response;\r\n      \r\n      if (templateType === 'asbestosClearanceNonFriable' || templateType === 'asbestosClearanceFriable') {\r\n        response = await api.put(`/asbestos-clearance-templates/${templateType}`, updateData);\r\n      } else if (templateType === 'leadAssessment') {\r\n        response = await api.put(`/lead-assessment-templates/${templateType}`, updateData);\r\n      } else {\r\n        throw new Error(`Unknown template type: ${templateType}`);\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating report template:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete a template\r\n  deleteTemplate: async (templateType) => {\r\n    try {\r\n      let response;\r\n      \r\n      if (templateType === 'asbestosClearanceNonFriable' || templateType === 'asbestosClearanceFriable') {\r\n        response = await api.delete(`/asbestos-clearance-templates/${templateType}`);\r\n      } else if (templateType === 'leadAssessment') {\r\n        response = await api.delete(`/lead-assessment-templates/${templateType}`);\r\n      } else {\r\n        throw new Error(`Unknown template type: ${templateType}`);\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error deleting report template:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Initialize default templates if they don't exist\r\n  initializeDefaultTemplates: async () => {\r\n    const defaultTemplates = [\r\n      {\r\n        templateType: \"asbestosClearanceNonFriable\",\r\n        companyDetails: {\r\n          name: \"Lancaster & Dickenson Consulting Pty Ltd\",\r\n          address: \"4/6 Dacre Street, Mitchell ACT 2911\",\r\n          email: \"enquiries@landd.com.au\",\r\n          phone: \"(02) 6241 2779\",\r\n          website: \"www.landd.com.au\",\r\n          abn: \"74 169 785 915\"\r\n        },\r\n        reportHeaders: {\r\n          title: \"ASBESTOS REMOVAL CLEARANCE CERTIFICATE\",\r\n          subtitle: \"Clearance Inspection Report\"\r\n        }\r\n      },\r\n      {\r\n        templateType: \"asbestosClearanceFriable\",\r\n        companyDetails: {\r\n          name: \"Lancaster & Dickenson Consulting Pty Ltd\",\r\n          address: \"4/6 Dacre Street, Mitchell ACT 2911\",\r\n          email: \"enquiries@landd.com.au\",\r\n          phone: \"(02) 6241 2779\",\r\n          website: \"www.landd.com.au\",\r\n          abn: \"74 169 785 915\"\r\n        },\r\n        reportHeaders: {\r\n          title: \"ASBESTOS REMOVAL CLEARANCE CERTIFICATE\",\r\n          subtitle: \"Clearance Inspection Report\"\r\n        }\r\n      },\r\n      {\r\n        templateType: \"leadAssessment\",\r\n        companyDetails: {\r\n          name: \"Lancaster & Dickenson Consulting Pty Ltd\",\r\n          address: \"4/6 Dacre Street, Mitchell ACT 2911\",\r\n          email: \"enquiries@landd.com.au\",\r\n          phone: \"(02) 6241 2779\",\r\n          website: \"www.landd.com.au\",\r\n          abn: \"74 169 785 915\"\r\n        },\r\n        reportHeaders: {\r\n          title: \"LEAD ASSESSMENT REPORT\",\r\n          subtitle: \"Lead Hazard Assessment\"\r\n        }\r\n      }\r\n    ];\r\n\r\n    try {\r\n      // Check if templates exist and create them if they don't\r\n      for (const template of defaultTemplates) {\r\n        try {\r\n          await reportTemplateService.getTemplateByType(template.templateType);\r\n        } catch (error) {\r\n          if (error.response?.status === 404) {\r\n            // Template doesn't exist, create it\r\n            await reportTemplateService.createTemplate(template);\r\n            console.log(`Created default template for ${template.templateType}`);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error initializing default templates:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default reportTemplateService; ","import reportTemplateService from '../services/reportTemplateService';\r\n\r\n/**\r\n * Populates template content with job-specific data\r\n * @param {Object} clearance - The clearance object with job data\r\n * @param {Object} template - The template object (optional, will fetch if not provided)\r\n * @returns {Promise<Object>} - Populated template content\r\n */\r\nexport const populateTemplateContent = async (clearance, template = null) => {\r\n  try {\r\n    // Fetch template if not provided\r\n    if (!template) {\r\n      template = await reportTemplateService.getTemplateByType(\"asbestosClearance\");\r\n    }\r\n\r\n    // Extract job data\r\n    const jobData = {\r\n      CLIENT_NAME: clearance.projectId?.client?.name || \"Client Name\",\r\n      ASBESTOS_TYPE: clearance.clearanceType?.toLowerCase() || \"non-friable\",\r\n      SITE_NAME: clearance.projectId?.name || \"Site Name\",\r\n      SITE_ADDRESS: clearance.projectId?.address || \"Site Address\",\r\n      PROJECT_ID: clearance.projectId?.projectID || \"Project ID\",\r\n      CLEARANCE_DATE: clearance.clearanceDate \r\n        ? new Date(clearance.clearanceDate).toLocaleDateString(\"en-GB\")\r\n        : \"Clearance Date\",\r\n      ASBESTOS_REMOVALIST: clearance.asbestosRemovalist || \"Asbestos Removalist\",\r\n      LAA_NAME: clearance.LAA || \"LAA Name\",\r\n      LAA_LICENSE: clearance.LAA_LICENSE || \"AA00031\", // Use clearance LAA_LICENSE if available, otherwise default\r\n      INSPECTION_TIME: \"Inspection Time\", // This could be added to clearance model\r\n      INSPECTION_DATE: clearance.clearanceDate \r\n        ? new Date(clearance.clearanceDate).toLocaleDateString(\"en-GB\")\r\n        : \"Inspection Date\",\r\n      REPORT_TYPE: clearance.clearanceType || \"Non-friable\",\r\n      LOGO_URL: \"/images/logo.png\",\r\n      // Signature placeholder\r\n      SIGNATURE_IMAGE: \"[SIGNATURE_PLACEHOLDER]\"\r\n    };\r\n\r\n    // Populate template sections\r\n    const populatedSections = {};\r\n    Object.entries(template.standardSections).forEach(([key, value]) => {\r\n      let populatedValue = replacePlaceholders(value, jobData);\r\n      \r\n      // Special handling for inspection exclusions to append job-specific exclusions\r\n      if (key === 'inspectionExclusionsContent' && clearance.jobSpecificExclusions) {\r\n        populatedValue += '\\n\\n' + clearance.jobSpecificExclusions;\r\n      }\r\n      \r\n      populatedSections[key] = populatedValue;\r\n    });\r\n\r\n    return {\r\n      ...template,\r\n      standardSections: populatedSections,\r\n      jobData,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error populating template content:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Replaces placeholders in text with actual data\r\n * @param {string} text - Text containing placeholders\r\n * @param {Object} data - Data object with replacement values\r\n * @returns {string} - Text with placeholders replaced\r\n */\r\nexport const replacePlaceholders = (text, data) => {\r\n  if (!text) return \"\";\r\n  \r\n  let result = text;\r\n  Object.entries(data).forEach(([key, value]) => {\r\n    const placeholder = `{${key}}`;\r\n    result = result.replace(new RegExp(placeholder, 'g'), value || \"\");\r\n  });\r\n  \r\n  return result;\r\n};\r\n\r\n/**\r\n * Gets template content for a specific section\r\n * @param {Object} template - The template object\r\n * @param {string} sectionKey - The section key to retrieve\r\n * @param {Object} jobData - Job-specific data for placeholder replacement\r\n * @returns {string} - Populated section content\r\n */\r\nexport const getSectionContent = (template, sectionKey, jobData = {}) => {\r\n  if (!template?.standardSections?.[sectionKey]) {\r\n    return \"\";\r\n  }\r\n  \r\n  return replacePlaceholders(template.standardSections[sectionKey], jobData);\r\n};\r\n\r\n/**\r\n * Validates that all required placeholders are provided\r\n * @param {Object} template - The template object\r\n * @param {Object} jobData - Job-specific data\r\n * @returns {Object} - Validation result with missing placeholders\r\n */\r\nexport const validateTemplateData = (template, jobData) => {\r\n  const missingPlaceholders = [];\r\n  const allPlaceholders = new Set();\r\n\r\n  // Extract all placeholders from template\r\n  Object.values(template.standardSections).forEach(text => {\r\n    if (text) {\r\n      const matches = text.match(/\\{([^}]+)\\}/g);\r\n      if (matches) {\r\n        matches.forEach(match => {\r\n          allPlaceholders.add(match.slice(1, -1)); // Remove { and }\r\n        });\r\n      }\r\n    }\r\n  });\r\n\r\n  // Check which placeholders are missing from jobData\r\n  allPlaceholders.forEach(placeholder => {\r\n    if (!jobData[placeholder]) {\r\n      missingPlaceholders.push(placeholder);\r\n    }\r\n  });\r\n\r\n  return {\r\n    isValid: missingPlaceholders.length === 0,\r\n    missingPlaceholders,\r\n    totalPlaceholders: allPlaceholders.size,\r\n  };\r\n};\r\n\r\n/**\r\n * Creates a preview data object for testing templates\r\n * @returns {Object} - Sample data for preview\r\n */\r\nexport const getPreviewData = () => {\r\n  return {\r\n    CLIENT_NAME: \"Sample Client Pty Ltd\",\r\n    ASBESTOS_TYPE: \"non-friable\",\r\n    SITE_NAME: \"123 Sample Street, Canberra ACT\",\r\n    SITE_ADDRESS: \"123 Sample Street, Canberra ACT 2600\",\r\n    PROJECT_ID: \"PROJ-2024-001\",\r\n    CLEARANCE_DATE: \"25 July 2024\",\r\n    ASBESTOS_REMOVALIST: \"Professional Asbestos Removal\",\r\n    LAA_NAME: \"Patrick Cerone\",\r\n    LAA_LICENSE: \"AA00031\",\r\n    INSPECTION_TIME: \"09:00 AM\",\r\n    INSPECTION_DATE: \"25 July 2024\",\r\n    REPORT_TYPE: \"Non-friable\",\r\n    LOGO_URL: \"/images/logo.png\",\r\n  };\r\n}; ","import { populateTemplateContent, getSectionContent } from './templateDataBinding';\n\n/**\n * Example of how to integrate template content with existing PDF generation\n * This shows how to replace hardcoded text in your clearance report generation\n */\nexport const integrateTemplateWithPDF = async (clearance, setError, options = {}) => {\n  try {\n    // Step 1: Populate template with job data\n    const populatedTemplate = await populateTemplateContent(clearance);\n    \n    // Step 2: Use template content instead of hardcoded text\n    // This is how you would replace the hardcoded content in your PDF generation\n    \n    // Example replacements for your existing clearance report generation:\n    \n    // Instead of:\n    // doc.text(\"ASBESTOS REMOVAL CLEARANCE CERTIFICATE\", leftMargin, y);\n    // Use:\n    const reportTitle = populatedTemplate.standardSections.frontCoverTitle;\n    // doc.text(reportTitle, leftMargin, y);\n    \n    // Instead of:\n    // doc.text(\"Inspection Details\", headerPadding3, y3);\n    // Use:\n    const inspectionTitle = populatedTemplate.standardSections.inspectionDetailsTitle;\n    // doc.text(inspectionTitle, headerPadding3, y3);\n    \n    // Instead of:\n    // const inspectionText = `Following discussions with ${clearance.projectId?.client?.name || \"{Client Name}\"}, Lancaster and Dickenson Consulting (L & D) were contracted to undertake a visual clearance inspection following the removal of ${clearance.clearanceType?.toLowerCase() || \"non-friable\"} asbestos from ${clearance.projectId?.name || \"{Site Address}\"} (herein referred to as 'the Site').`;\n    // Use:\n    const inspectionIntro = populatedTemplate.standardSections.inspectionIntroduction;\n    // doc.text(inspectionIntro, headerPadding3, y3, { maxWidth: pageWidth - headerPadding3 * 2, align: \"justify\" });\n    \n    // Instead of:\n    // doc.text(\"Clearance Certification\", headerPadding3, y3);\n    // Use:\n    const certificationTitle = populatedTemplate.standardSections.clearanceCertificationTitle;\n    // doc.text(certificationTitle, headerPadding3, y3);\n    \n    // Instead of:\n    // const certificationText = `An inspection of the asbestos removal area and the surrounding areas (including access and egress pathways) was undertaken on ${clearance.clearanceDate ? new Date(clearance.clearanceDate).toLocaleDateString(\"en-GB\") : \"25 July 2024\"}. The LAA found no visible asbestos residue from asbestos removal work in the asbestos removal area, or in the vicinity of the area, where the asbestos removal works were carried out.`;\n    // Use:\n    const certificationText = populatedTemplate.standardSections.clearanceCertificationText;\n    // doc.text(certificationText, headerPadding3, y3, { maxWidth: pageWidth - headerPadding3 * 2, align: \"justify\" });\n    \n    // Instead of:\n    // const riskText = \"The LAA considers that the asbestos removal area does not pose a risk to health and safety from exposure to asbestos and may be re-occupied.\";\n    // Use:\n    const riskText = populatedTemplate.standardSections.riskAssessmentText;\n    // doc.text(riskText, headerPadding3, y3, { maxWidth: pageWidth - headerPadding3 * 2, align: \"justify\" });\n    \n    // Instead of:\n    // const contactText = \"Please do not hesitate to contact the undersigned should you have any queries regarding this report.\";\n    // Use:\n    const contactText = populatedTemplate.standardSections.contactText;\n    // doc.text(contactText, headerPadding3, y3, { maxWidth: pageWidth - headerPadding3 * 2, align: \"justify\" });\n    \n    // Instead of:\n    // const behalfText = \"For and on behalf of Lancaster and Dickenson Consulting.\";\n    // Use:\n    const behalfText = populatedTemplate.standardSections.behalfText;\n    // doc.text(behalfText, headerPadding3, y3, { maxWidth: pageWidth - headerPadding3 * 2, align: \"justify\" });\n    \n    // Instead of:\n    // doc.text(\"ACT Licensed Asbestos Assessor - AA00004\", headerPadding3, y3);\n    // Use:\n    const signatureTitle = populatedTemplate.standardSections.signatureTitle;\n    // doc.text(signatureTitle, headerPadding3, y3);\n    \n    // Instead of:\n    // const backgroundText = \"Following completion of non-friable asbestos removal works undertaken by a suitably licenced Asbestos Removal Contractor, a clearance inspection must be completed by an independent LAA / a competent person. The clearance inspection includes an assessment of the following:\";\n    // Use:\n    const backgroundText = populatedTemplate.standardSections.backgroundIntroduction;\n    // doc.text(backgroundText, headerPadding4, y4, { maxWidth: pageWidth - headerPadding4 * 2, align: \"justify\" });\n    \n    // Instead of:\n    // const bulletPoint1 = \"• Visual inspection of the work area for asbestos dust or debris\";\n    // Use:\n    const bulletPoint1 = populatedTemplate.standardSections.bulletPoint1;\n    // doc.text(bulletPoint1, headerPadding4 + 10, y4, { maxWidth: pageWidth - headerPadding4 * 2 - 10 });\n    \n    // Instead of:\n    // const legislativeText = \"Non-Friable Clearance Certificates should be written in general accordance with and with reference to:\";\n    // Use:\n    const legislativeText = populatedTemplate.standardSections.legislativeIntroduction;\n    // doc.text(legislativeText, headerPadding4, y4, { maxWidth: pageWidth - headerPadding4 * 2, align: \"justify\" });\n    \n    // Instead of:\n    // const limitationsText = \"The visual clearance inspection was only carried out in the locations outlined within this document. L&D did not inspect any areas of the property that fall outside of the locations listed in this certificate and therefore make no comment regarding the presence or condition of other ACM that may or may not be present. When undertaking the inspection, the LAA tries to inspect as much of the asbestos removal area as possible. However, no inspection is absolute. Should suspect ACM be identified following the inspection, works should cease until an assessment of the materials is completed.\";\n    // Use:\n    const limitationsText = populatedTemplate.standardSections.limitationsText;\n    // doc.text(limitationsText, headerPadding4, y4, { maxWidth: pageWidth - headerPadding4 * 2, align: \"justify\" });\n    \n    // Instead of:\n    // const footerText = `${clearance.clearanceType || \"Non-friable\"} Clearance Certificate: ${clearance.projectId?.name || \"{Site Name}\"}`;\n    // Use:\n    const footerText = populatedTemplate.standardSections.footerText;\n    // doc.text(footerText, footerPadding, footerY + 3);\n    \n    console.log(\"Template integration example - populated content:\", {\n      reportTitle,\n      inspectionTitle,\n      inspectionIntro,\n      certificationTitle,\n      certificationText,\n      riskText,\n      contactText,\n      behalfText,\n      signatureTitle,\n      backgroundText,\n      bulletPoint1,\n      legislativeText,\n      limitationsText,\n      footerText,\n    });\n    \n    return populatedTemplate;\n    \n  } catch (error) {\n    console.error(\"Error integrating template with PDF:\", error);\n    if (setError) {\n      setError(\"Failed to load template content\");\n    }\n    throw error;\n  }\n};\n\n/**\n * Example of how to get specific section content\n */\nexport const getSpecificSectionExample = async (clearance, sectionKey) => {\n  try {\n    const populatedTemplate = await populateTemplateContent(clearance);\n    return getSectionContent(populatedTemplate, sectionKey, populatedTemplate.jobData);\n  } catch (error) {\n    console.error(\"Error getting section content:\", error);\n    return \"\";\n  }\n};\n\n/**\n * Example of how to validate template data before generating PDF\n */\nexport const validateTemplateBeforePDF = async (clearance) => {\n  try {\n    const populatedTemplate = await populateTemplateContent(clearance);\n    \n    // Check if all required sections have content\n    const requiredSections = [\n      'frontCoverTitle',\n      'inspectionDetailsTitle',\n      'clearanceCertificationTitle',\n      'clearanceCertificationText',\n      'riskAssessmentText',\n    ];\n    \n    const missingSections = requiredSections.filter(\n      section => !populatedTemplate.standardSections[section]\n    );\n    \n    if (missingSections.length > 0) {\n      console.warn(\"Missing template sections:\", missingSections);\n      return false;\n    }\n    \n    return true;\n  } catch (error) {\n    console.error(\"Error validating template:\", error);\n    return false;\n  }\n}; ","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Button,\r\n  Paper,\r\n  Divider,\r\n  useTheme,\r\n  Alert,\r\n} from \"@mui/material\";\r\nimport { tokens } from \"../../theme\";\r\nimport { useAuth } from \"../../context/AuthContext\";\r\nimport PermissionGate from \"../../components/PermissionGate\";\r\nimport {\r\n  integrateTemplateWithPDF,\r\n  getSpecificSectionExample,\r\n} from \"../../utils/templateIntegrationExample\";\r\n\r\nconst TemplateTestPage = () => {\r\n  const theme = useTheme();\r\n  const colors = tokens;\r\n  const { user } = useAuth();\r\n\r\n  const [templateData, setTemplateData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Sample clearance data for testing\r\n  const sampleClearance = {\r\n    _id: \"test-clearance-123\",\r\n    clearanceType: \"Non-friable\",\r\n    clearanceDate: \"2024-07-25\",\r\n    asbestosRemovalist: \"Professional Asbestos Removal Pty Ltd\",\r\n    LAA: \"Patrick Cerone\",\r\n    projectId: {\r\n      name: \"123 Sample Street, Canberra ACT\",\r\n      address: \"123 Sample Street, Canberra ACT 2600\",\r\n      projectID: \"PROJ-2024-001\",\r\n      client: {\r\n        name: \"Sample Client Pty Ltd\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const testTemplateIntegration = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const result = await integrateTemplateWithPDF(sampleClearance, setError);\r\n      setTemplateData(result);\r\n      console.log(\"Template integration successful:\", result);\r\n    } catch (err) {\r\n      console.error(\"Template integration failed:\", err);\r\n      setError(\"Failed to load template data\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const testSpecificSection = async (sectionKey) => {\r\n    try {\r\n      const content = await getSpecificSectionExample(\r\n        sampleClearance,\r\n        sectionKey\r\n      );\r\n      console.log(`Section ${sectionKey}:`, content);\r\n      alert(`${sectionKey}: ${content}`);\r\n    } catch (err) {\r\n      console.error(\"Error getting section:\", err);\r\n      setError(\"Failed to get section content\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Auto-load template data on component mount\r\n    testTemplateIntegration();\r\n  }, []);\r\n\r\n  const renderTemplatePreview = () => {\r\n    if (!templateData) return null;\r\n\r\n    return (\r\n      <Grid container spacing={3}>\r\n        {/* Front Cover Preview */}\r\n        <Grid item xs={12} md={6}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" color=\"black\" sx={{ mb: 2 }}>\r\n                Front Cover Preview\r\n              </Typography>\r\n              <Paper\r\n                sx={{\r\n                  p: 3,\r\n                  backgroundColor: \"white\",\r\n                  color: \"black\",\r\n                  minHeight: \"300px\",\r\n                  fontFamily: \"Arial, sans-serif\",\r\n                }}\r\n              >\r\n                <Typography\r\n                  variant=\"h4\"\r\n                  sx={{ mb: 2, color: \"#009900\", fontWeight: \"bold\" }}\r\n                >\r\n                  {templateData.standardSections.frontCoverTitle}\r\n                </Typography>\r\n                <Typography variant=\"h6\" sx={{ mb: 3 }}>\r\n                  {templateData.standardSections.frontCoverSubtitle}\r\n                </Typography>\r\n\r\n                <Divider sx={{ my: 2 }} />\r\n\r\n                <Typography variant=\"body1\" sx={{ mb: 1 }}>\r\n                  <strong>Site:</strong> {templateData.jobData.SITE_NAME}\r\n                </Typography>\r\n                <Typography variant=\"body1\" sx={{ mb: 1 }}>\r\n                  <strong>Client:</strong> {templateData.jobData.CLIENT_NAME}\r\n                </Typography>\r\n                <Typography variant=\"body1\" sx={{ mb: 1 }}>\r\n                  <strong>Date:</strong> {templateData.jobData.CLEARANCE_DATE}\r\n                </Typography>\r\n              </Paper>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Inspection Details Preview */}\r\n        <Grid item xs={12} md={6}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" color=\"black\" sx={{ mb: 2 }}>\r\n                Inspection Details Preview\r\n              </Typography>\r\n              <Paper\r\n                sx={{\r\n                  p: 3,\r\n                  backgroundColor: \"white\",\r\n                  color: \"black\",\r\n                  minHeight: \"300px\",\r\n                  fontFamily: \"Arial, sans-serif\",\r\n                }}\r\n              >\r\n                <Typography variant=\"h5\" sx={{ mb: 2, fontWeight: \"bold\" }}>\r\n                  {templateData.standardSections.inspectionDetailsTitle}\r\n                </Typography>\r\n                <Typography\r\n                  variant=\"body1\"\r\n                  sx={{ mb: 2, textAlign: \"justify\" }}\r\n                >\r\n                  {templateData.standardSections.inspectionIntroduction}\r\n                </Typography>\r\n                <Typography\r\n                  variant=\"body1\"\r\n                  sx={{ mb: 2, textAlign: \"justify\" }}\r\n                >\r\n                  {templateData.standardSections.inspectionSpecifics}\r\n                </Typography>\r\n                <Typography\r\n                  variant=\"body1\"\r\n                  sx={{ mb: 2, textAlign: \"justify\" }}\r\n                >\r\n                  {templateData.standardSections.tableIntroduction}\r\n                </Typography>\r\n              </Paper>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Clearance Certification Preview */}\r\n        <Grid item xs={12} md={6}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" color=\"black\" sx={{ mb: 2 }}>\r\n                Clearance Certification Preview\r\n              </Typography>\r\n              <Paper\r\n                sx={{\r\n                  p: 3,\r\n                  backgroundColor: \"white\",\r\n                  color: \"black\",\r\n                  minHeight: \"300px\",\r\n                  fontFamily: \"Arial, sans-serif\",\r\n                }}\r\n              >\r\n                <Typography variant=\"h5\" sx={{ mb: 2, fontWeight: \"bold\" }}>\r\n                  {templateData.standardSections.clearanceCertificationTitle}\r\n                </Typography>\r\n                <Typography\r\n                  variant=\"body1\"\r\n                  sx={{ mb: 2, textAlign: \"justify\" }}\r\n                >\r\n                  {templateData.standardSections.clearanceCertificationText}\r\n                </Typography>\r\n                <Typography\r\n                  variant=\"body1\"\r\n                  sx={{ mb: 2, textAlign: \"justify\" }}\r\n                >\r\n                  {templateData.standardSections.riskAssessmentText}\r\n                </Typography>\r\n                <Typography\r\n                  variant=\"body1\"\r\n                  sx={{ mb: 2, textAlign: \"justify\" }}\r\n                >\r\n                  {templateData.standardSections.contactText}\r\n                </Typography>\r\n                <Typography\r\n                  variant=\"body1\"\r\n                  sx={{ mb: 2, textAlign: \"justify\" }}\r\n                >\r\n                  {templateData.standardSections.behalfText}\r\n                </Typography>\r\n                <Typography variant=\"body1\" sx={{ fontWeight: \"bold\" }}>\r\n                  {templateData.standardSections.signatureTitle}\r\n                </Typography>\r\n              </Paper>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Background Information Preview */}\r\n        <Grid item xs={12} md={6}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" color=\"black\" sx={{ mb: 2 }}>\r\n                Background Information Preview\r\n              </Typography>\r\n              <Paper\r\n                sx={{\r\n                  p: 3,\r\n                  backgroundColor: \"white\",\r\n                  color: \"black\",\r\n                  minHeight: \"300px\",\r\n                  fontFamily: \"Arial, sans-serif\",\r\n                }}\r\n              >\r\n                <Typography variant=\"h5\" sx={{ mb: 2, fontWeight: \"bold\" }}>\r\n                  {templateData.standardSections.backgroundTitle}\r\n                </Typography>\r\n                <Typography\r\n                  variant=\"body1\"\r\n                  sx={{ mb: 2, textAlign: \"justify\" }}\r\n                >\r\n                  {templateData.standardSections.backgroundIntroduction}\r\n                </Typography>\r\n                <Typography variant=\"body1\" sx={{ mb: 1 }}>\r\n                  • {templateData.standardSections.bulletPoint1}\r\n                </Typography>\r\n                <Typography variant=\"body1\" sx={{ mb: 1 }}>\r\n                  • {templateData.standardSections.bulletPoint2}\r\n                </Typography>\r\n                <Typography\r\n                  variant=\"body1\"\r\n                  sx={{ mb: 2, textAlign: \"justify\" }}\r\n                >\r\n                  {templateData.standardSections.requirementsText}\r\n                </Typography>\r\n                <Typography variant=\"body1\" sx={{ mb: 1 }}>\r\n                  • {templateData.standardSections.bulletPoint3}\r\n                </Typography>\r\n                <Typography variant=\"body1\" sx={{ mb: 1 }}>\r\n                  • {templateData.standardSections.bulletPoint4}\r\n                </Typography>\r\n                <Typography variant=\"body1\" sx={{ mb: 1 }}>\r\n                  • {templateData.standardSections.bulletPoint5}\r\n                </Typography>\r\n              </Paper>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <PermissionGate requiredPermissions={[\"admin.view\"]}>\r\n      <Box m=\"20px\">\r\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Typography\r\n            variant=\"h2\"\r\n            color=\"black\"\r\n            fontWeight=\"bold\"\r\n            sx={{ mb: \"5px\" }}\r\n          >\r\n            Template System Test\r\n          </Typography>\r\n          <Button\r\n            onClick={testTemplateIntegration}\r\n            variant=\"contained\"\r\n            disabled={loading}\r\n          >\r\n            {loading ? \"Loading...\" : \"Reload Template Data\"}\r\n          </Button>\r\n        </Box>\r\n        <Typography variant=\"h5\" color=\"black\">\r\n          Test the template system with sample data\r\n        </Typography>\r\n\r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ mt: 2, mb: 2 }}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n\r\n        {/* Test Buttons */}\r\n        <Box sx={{ mt: 3, mb: 3 }}>\r\n          <Typography variant=\"h6\" color=\"black\" sx={{ mb: 2 }}>\r\n            Test Individual Sections\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            {[\r\n              \"frontCoverTitle\",\r\n              \"inspectionDetailsTitle\",\r\n              \"clearanceCertificationTitle\",\r\n              \"backgroundTitle\",\r\n              \"legislativeTitle\",\r\n              \"limitationsTitle\",\r\n            ].map((section) => (\r\n              <Grid item key={section}>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  onClick={() => testSpecificSection(section)}\r\n                  size=\"small\"\r\n                >\r\n                  Test {section}\r\n                </Button>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Box>\r\n\r\n        {/* Template Previews */}\r\n        {templateData && renderTemplatePreview()}\r\n\r\n        {/* Job Data Display */}\r\n        {templateData && (\r\n          <Card sx={{ mt: 3 }}>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" color=\"black\" sx={{ mb: 2 }}>\r\n                Job Data Used for Template Population\r\n              </Typography>\r\n              <Grid container spacing={2}>\r\n                {Object.entries(templateData.jobData).map(([key, value]) => (\r\n                  <Grid item xs={12} md={6} key={key}>\r\n                    <Box\r\n                      sx={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                    >\r\n                      <Typography variant=\"body2\" color=\"black\">\r\n                        {key}:\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"black\">\r\n                        {value}\r\n                      </Typography>\r\n                    </Box>\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </Box>\r\n    </PermissionGate>\r\n  );\r\n};\r\n\r\nexport default TemplateTestPage;\r\n"],"names":["reportTemplateService","getAllTemplates","async","asbestosClearanceTemplates","leadAssessmentTemplates","Promise","all","api","get","data","error","console","getTemplateByType","response","templateType","concat","Error","createTemplate","templateData","post","updateTemplate","updateData","put","deleteTemplate","delete","initializeDefaultTemplates","defaultTemplates","companyDetails","name","address","email","phone","website","abn","reportHeaders","title","subtitle","template","_error$response","status","log","populateTemplateContent","clearance","arguments","length","undefined","_clearance$projectId","_clearance$projectId$","_clearance$clearanceT","_clearance$projectId2","_clearance$projectId3","_clearance$projectId4","jobData","CLIENT_NAME","projectId","client","ASBESTOS_TYPE","clearanceType","toLowerCase","SITE_NAME","SITE_ADDRESS","PROJECT_ID","projectID","CLEARANCE_DATE","clearanceDate","Date","toLocaleDateString","ASBESTOS_REMOVALIST","asbestosRemovalist","LAA_NAME","LAA","LAA_LICENSE","INSPECTION_TIME","INSPECTION_DATE","REPORT_TYPE","LOGO_URL","SIGNATURE_IMAGE","populatedSections","Object","entries","standardSections","forEach","_ref","key","value","populatedValue","replacePlaceholders","jobSpecificExclusions","_objectSpread","text","result","_ref2","placeholder","replace","RegExp","getSpecificSectionExample","sectionKey","populatedTemplate","_template$standardSec","getSectionContent","TemplateTestPage","useTheme","tokens","user","useAuth","setTemplateData","useState","loading","setLoading","setError","sampleClearance","_id","testTemplateIntegration","reportTitle","frontCoverTitle","inspectionTitle","inspectionDetailsTitle","inspectionIntro","inspectionIntroduction","certificationTitle","clearanceCertificationTitle","certificationText","clearanceCertificationText","riskText","riskAssessmentText","contactText","behalfText","signatureTitle","backgroundText","backgroundIntroduction","bulletPoint1","legislativeText","legislativeIntroduction","limitationsText","footerText","integrateTemplateWithPDF","err","useEffect","_jsx","PermissionGate","requiredPermissions","children","_jsxs","Box","m","display","justifyContent","alignItems","Typography","variant","color","fontWeight","sx","mb","Button","onClick","disabled","Alert","severity","mt","Grid","container","spacing","map","section","item","content","alert","testSpecificSection","size","xs","md","Card","CardContent","Paper","p","backgroundColor","minHeight","fontFamily","frontCoverSubtitle","Divider","my","textAlign","inspectionSpecifics","tableIntroduction","backgroundTitle","bulletPoint2","requirementsText","bulletPoint3","bulletPoint4","bulletPoint5"],"sourceRoot":""}