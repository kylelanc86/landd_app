{"version":3,"file":"static/js/228.adff7a43.chunk.js","mappings":"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","sources":["scenes/clearances/AsbestosClearance.jsx","utils/templatePDFGenerator.js","services/asbestosClearanceService.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Box,\n  Typography,\n  useTheme,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Button,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControlLabel,\n  Checkbox,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  Alert,\n  CircularProgress,\n  Card,\n  CardContent,\n  Snackbar,\n} from \"@mui/material\";\nimport { useNavigate } from \"react-router-dom\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport DescriptionIcon from \"@mui/icons-material/Description\";\nimport PictureAsPdfIcon from \"@mui/icons-material/PictureAsPdf\";\nimport VisibilityIcon from \"@mui/icons-material/Visibility\";\nimport Header from \"../../components/Header\";\nimport { tokens } from \"../../theme\";\nimport { projectService, userService } from \"../../services/api\";\nimport asbestosClearanceService from \"../../services/asbestosClearanceService\";\nimport PermissionGate from \"../../components/PermissionGate\";\nimport { generateHTMLTemplatePDF } from \"../../utils/templatePDFGenerator\";\n\n// ASBESTOS_REMOVALISTS array from air monitoring modal\nconst ASBESTOS_REMOVALISTS = [\n  \"AGH\",\n  \"Aztech Services\",\n  \"Capstone\",\n  \"Crown Asbestos Removals\",\n  \"Empire Contracting\",\n  \"Glade Group\",\n  \"IAR\",\n  \"Jesco\",\n  \"Ozbestos\",\n  \"Spec Services\",\n];\n\nconst AsbestosClearance = () => {\n  const colors = tokens;\n  const navigate = useNavigate();\n\n  const [clearances, setClearances] = useState([]);\n  const [projects, setProjects] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingClearance, setEditingClearance] = useState(null);\n  const [generatingPDF, setGeneratingPDF] = useState(false);\n  const [snackbar, setSnackbar] = useState({\n    open: false,\n    message: \"\",\n    severity: \"success\",\n  });\n\n  const [form, setForm] = useState({\n    projectId: \"\",\n    clearanceDate: \"\",\n    clearanceType: \"Non-friable\",\n    LAA: \"\",\n    asbestosRemovalist: \"\",\n    airMonitoring: false,\n    airMonitoringReport: null,\n    jobSpecificExclusions: \"\",\n    notes: \"\",\n  });\n\n  // Fetch clearances, projects, and users on component mount\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      const [clearancesData, projectsData, usersData] = await Promise.all([\n        asbestosClearanceService.getAll(),\n        projectService.getAll({\n          limit: 1000,\n          status:\n            \"Assigned,In progress,Samples submitted,Lab Analysis Complete,Report sent for review,Ready for invoicing,Invoice sent\",\n        }),\n        userService.getAll(),\n      ]);\n\n      console.log(\"Clearances API response:\", clearancesData);\n      console.log(\"Projects API response:\", projectsData);\n      console.log(\"Projects API response type:\", typeof projectsData);\n      console.log(\n        \"Projects API response keys:\",\n        projectsData ? Object.keys(projectsData) : \"null/undefined\"\n      );\n      console.log(\"Users API response:\", usersData);\n\n      setClearances(\n        clearancesData.clearances || clearancesData.data || clearancesData || []\n      );\n\n      // Ensure projects is always an array - handle different response structures\n      let projectsArray = [];\n      if (projectsData) {\n        // Handle the standard API response structure: { data: [...], pagination: {...} }\n        if (projectsData.data && Array.isArray(projectsData.data)) {\n          projectsArray = projectsData.data;\n        } else if (Array.isArray(projectsData)) {\n          projectsArray = projectsData;\n        } else if (\n          projectsData.data &&\n          projectsData.data.data &&\n          Array.isArray(projectsData.data.data)\n        ) {\n          projectsArray = projectsData.data.data;\n        }\n      }\n      console.log(\"Projects array:\", projectsArray);\n      console.log(\"Projects array length:\", projectsArray.length);\n      console.log(\"First project (if any):\", projectsArray[0]);\n      setProjects(projectsArray);\n\n      // Filter active users and transform for dropdown\n      const activeUsers = (usersData.data || usersData).filter(\n        (user) => user.isActive\n      );\n      setUsers(activeUsers);\n    } catch (err) {\n      console.error(\"Error fetching data:\", err);\n      setError(\"Failed to load data\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      if (editingClearance) {\n        await asbestosClearanceService.update(editingClearance._id, form);\n        setSnackbar({\n          open: true,\n          message: \"Clearance updated successfully\",\n          severity: \"success\",\n        });\n      } else {\n        await asbestosClearanceService.create(form);\n        setSnackbar({\n          open: true,\n          message: \"Clearance created successfully\",\n          severity: \"success\",\n        });\n      }\n\n      setDialogOpen(false);\n      setEditingClearance(null);\n      resetForm();\n      fetchData();\n    } catch (err) {\n      console.error(\"Error saving clearance:\", err);\n      setSnackbar({\n        open: true,\n        message: \"Failed to save clearance\",\n        severity: \"error\",\n      });\n    }\n  };\n\n  const handleEdit = (clearance) => {\n    setEditingClearance(clearance);\n    setForm({\n      projectId: clearance.projectId._id || clearance.projectId,\n      clearanceDate: clearance.clearanceDate\n        ? new Date(clearance.clearanceDate).toISOString().split(\"T\")[0]\n        : \"\",\n      clearanceType: clearance.clearanceType,\n      LAA: clearance.LAA,\n      asbestosRemovalist: clearance.asbestosRemovalist,\n      airMonitoring: clearance.airMonitoring || false,\n      airMonitoringReport: clearance.airMonitoringReport || null,\n      jobSpecificExclusions: clearance.jobSpecificExclusions || \"\",\n      notes: clearance.notes || \"\",\n    });\n    setDialogOpen(true);\n  };\n\n  const handleDelete = async (clearance) => {\n    if (window.confirm(\"Are you sure you want to delete this clearance?\")) {\n      try {\n        await asbestosClearanceService.delete(clearance._id);\n        setSnackbar({\n          open: true,\n          message: \"Clearance deleted successfully\",\n          severity: \"success\",\n        });\n        fetchData();\n      } catch (err) {\n        console.error(\"Error deleting clearance:\", err);\n        setSnackbar({\n          open: true,\n          message: \"Failed to delete clearance\",\n          severity: \"error\",\n        });\n      }\n    }\n  };\n\n  const handleViewItems = (clearance) => {\n    navigate(`/clearances/${clearance._id}/items`);\n  };\n\n  const handleGeneratePDF = async (clearance) => {\n    try {\n      console.log(\"handleGeneratePDF called with clearance:\", clearance);\n      setGeneratingPDF(true);\n\n      // Get the full clearance data with populated project\n      console.log(\"Fetching full clearance data...\");\n      const fullClearance = await asbestosClearanceService.getById(\n        clearance._id\n      );\n      console.log(\"Full clearance data:\", fullClearance);\n\n      // Use the new HTML template-based PDF generation\n      console.log(\"Calling generateHTMLTemplatePDF...\");\n      const fileName = await generateHTMLTemplatePDF(\n        \"asbestos-clearance\", // template type\n        fullClearance // clearance data\n      );\n      console.log(\"PDF generation completed, fileName:\", fileName);\n\n      setSnackbar({\n        open: true,\n        message: `PDF generated successfully: ${fileName}`,\n        severity: \"success\",\n      });\n    } catch (err) {\n      console.error(\"Error generating PDF:\", err);\n      setSnackbar({\n        open: true,\n        message: \"Failed to generate PDF\",\n        severity: \"error\",\n      });\n    } finally {\n      console.log(\"Setting generatingPDF to false\");\n      setGeneratingPDF(false);\n    }\n  };\n\n  const resetForm = () => {\n    setForm({\n      projectId: \"\",\n      clearanceDate: \"\",\n      clearanceType: \"Non-friable\",\n      LAA: \"\",\n      asbestosRemovalist: \"\",\n      airMonitoring: false,\n      airMonitoringReport: null,\n      jobSpecificExclusions: \"\",\n      notes: \"\",\n    });\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case \"complete\":\n        return \"success\";\n      case \"in progress\":\n        return \"warning\";\n      case \"Site Work Complete\":\n        return \"info\";\n      default:\n        return \"default\";\n    }\n  };\n\n  const getProjectName = (projectId) => {\n    // Ensure projects is an array\n    if (!Array.isArray(projects)) {\n      console.warn(\"Projects is not an array:\", projects);\n      return \"Unknown Project\";\n    }\n\n    // Handle case where projectId is an object with _id\n    const projectIdValue = projectId?._id || projectId;\n    const project = projects.find((p) => p._id === projectIdValue);\n    return project ? project.projectID : \"Unknown Project\";\n  };\n\n  const getProjectDisplayName = (projectId) => {\n    // Ensure projects is an array\n    if (!Array.isArray(projects)) {\n      console.warn(\"Projects is not an array:\", projects);\n      return \"Unknown Project\";\n    }\n\n    // Handle case where projectId is an object with _id\n    const projectIdValue = projectId?._id || projectId;\n    const project = projects.find((p) => p._id === projectIdValue);\n    return project ? project.name : \"Unknown Project\";\n  };\n\n  if (loading) {\n    return (\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        height=\"400px\"\n      >\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box m=\"20px\">\n        <Alert severity=\"error\">{error}</Alert>\n      </Box>\n    );\n  }\n\n  return (\n    <PermissionGate requiredPermissions={[\"asbestos.view\"]}>\n      <Box m=\"20px\">\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Typography\n            variant=\"h4\"\n            color={colors.grey[500]}\n            fontWeight=\"bold\"\n            sx={{ mb: \"5px\" }}\n          >\n            Asbestos Clearances\n          </Typography>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              setEditingClearance(null);\n              resetForm();\n              setDialogOpen(true);\n            }}\n            startIcon={<AddIcon />}\n          >\n            Add Clearance\n          </Button>\n        </Box>\n\n        <Card sx={{ mt: 3 }}>\n          <CardContent>\n            {loading ? (\n              <Box\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                height=\"200px\"\n              >\n                <CircularProgress />\n              </Box>\n            ) : (\n              <TableContainer component={Paper}>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Project ID</TableCell>\n                      <TableCell>Clearance Date</TableCell>\n                      <TableCell>Project Name</TableCell>\n                      <TableCell>Type</TableCell>\n                      <TableCell>Air Monitoring</TableCell>\n                      <TableCell>Status</TableCell>\n                      <TableCell>Actions</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {Array.isArray(clearances) &&\n                      (clearances || []).map((clearance) => (\n                        <TableRow key={clearance._id}>\n                          <TableCell>\n                            {getProjectName(clearance.projectId)}\n                          </TableCell>\n                          <TableCell>\n                            {clearance.clearanceDate\n                              ? new Date(\n                                  clearance.clearanceDate\n                                ).toLocaleDateString(\"en-GB\", {\n                                  day: \"2-digit\",\n                                  month: \"2-digit\",\n                                  year: \"numeric\",\n                                })\n                              : \"N/A\"}\n                          </TableCell>\n                          <TableCell>\n                            {getProjectDisplayName(clearance.projectId)}\n                          </TableCell>\n                          <TableCell>{clearance.clearanceType}</TableCell>\n                          <TableCell>\n                            <Chip\n                              label={clearance.airMonitoring ? \"Yes\" : \"No\"}\n                              color={\n                                clearance.airMonitoring ? \"success\" : \"default\"\n                              }\n                              size=\"small\"\n                            />\n                          </TableCell>\n                          <TableCell>\n                            <Chip\n                              label={clearance.status}\n                              color={getStatusColor(clearance.status)}\n                              size=\"small\"\n                            />\n                          </TableCell>\n                          <TableCell>\n                            <IconButton\n                              onClick={() => handleViewItems(clearance)}\n                              color=\"info\"\n                              size=\"small\"\n                              title=\"View Items\"\n                            >\n                              <VisibilityIcon />\n                            </IconButton>\n                            <IconButton\n                              onClick={() => handleEdit(clearance)}\n                              color=\"primary\"\n                              size=\"small\"\n                              title=\"Edit\"\n                            >\n                              <EditIcon />\n                            </IconButton>\n                            <IconButton\n                              onClick={() => handleGeneratePDF(clearance)}\n                              color=\"secondary\"\n                              size=\"small\"\n                              disabled={generatingPDF}\n                              title=\"Generate PDF\"\n                            >\n                              <PictureAsPdfIcon />\n                            </IconButton>\n                            <IconButton\n                              onClick={() => handleDelete(clearance)}\n                              color=\"error\"\n                              size=\"small\"\n                              title=\"Delete\"\n                            >\n                              <DeleteIcon />\n                            </IconButton>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Add/Edit Dialog */}\n        <Dialog\n          open={dialogOpen}\n          onClose={() => setDialogOpen(false)}\n          maxWidth=\"md\"\n          fullWidth\n        >\n          <DialogTitle>\n            {editingClearance ? \"Edit Clearance\" : \"Add New Clearance\"}\n          </DialogTitle>\n          <form onSubmit={handleSubmit}>\n            <DialogContent>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <FormControl fullWidth required>\n                    <InputLabel>Project</InputLabel>\n                    <Select\n                      value={form.projectId}\n                      onChange={(e) =>\n                        setForm({ ...form, projectId: e.target.value })\n                      }\n                      label=\"Project\"\n                    >\n                      {(projects || []).length > 0 ? (\n                        (projects || []).map((project) => (\n                          <MenuItem key={project._id} value={project._id}>\n                            {project.projectID}: {project.name}\n                          </MenuItem>\n                        ))\n                      ) : (\n                        <MenuItem disabled>No projects available</MenuItem>\n                      )}\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <TextField\n                    fullWidth\n                    type=\"date\"\n                    label=\"Clearance Date\"\n                    value={form.clearanceDate}\n                    onChange={(e) =>\n                      setForm({ ...form, clearanceDate: e.target.value })\n                    }\n                    required\n                    InputLabelProps={{ shrink: true }}\n                  />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <FormControl fullWidth required>\n                    <InputLabel>Clearance Type</InputLabel>\n                    <Select\n                      value={form.clearanceType}\n                      onChange={(e) =>\n                        setForm({ ...form, clearanceType: e.target.value })\n                      }\n                      label=\"Clearance Type\"\n                    >\n                      <MenuItem value=\"Non-friable\">Non-friable</MenuItem>\n                      <MenuItem value=\"Friable\">Friable</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <FormControl fullWidth required>\n                    <InputLabel>LAA</InputLabel>\n                    <Select\n                      value={form.LAA}\n                      onChange={(e) =>\n                        setForm({ ...form, LAA: e.target.value })\n                      }\n                      label=\"LAA\"\n                    >\n                      {(users || []).map((user) => (\n                        <MenuItem\n                          key={user._id}\n                          value={`${user.firstName} ${user.lastName}`}\n                        >\n                          {user.firstName} {user.lastName}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <FormControl fullWidth required>\n                    <InputLabel>Asbestos Removalist</InputLabel>\n                    <Select\n                      value={form.asbestosRemovalist}\n                      onChange={(e) =>\n                        setForm({ ...form, asbestosRemovalist: e.target.value })\n                      }\n                      label=\"Asbestos Removalist\"\n                    >\n                      {ASBESTOS_REMOVALISTS.map((removalist) => (\n                        <MenuItem key={removalist} value={removalist}>\n                          {removalist}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={form.airMonitoring}\n                        onChange={(e) =>\n                          setForm({ ...form, airMonitoring: e.target.checked })\n                        }\n                        color=\"primary\"\n                      />\n                    }\n                    label=\"Include Air Monitoring Report\"\n                  />\n                </Grid>\n                {form.airMonitoring && (\n                  <Grid item xs={12}>\n                    <input\n                      accept=\".pdf\"\n                      style={{ display: \"none\" }}\n                      id=\"air-monitoring-report-upload\"\n                      type=\"file\"\n                      onChange={(e) => {\n                        const file = e.target.files[0];\n                        if (file) {\n                          const reader = new FileReader();\n                          reader.onload = (event) => {\n                            // Extract just the base64 data from the data URL\n                            const dataUrl = event.target.result;\n                            const base64Data = dataUrl.split(\",\")[1]; // Remove the \"data:application/pdf;base64,\" prefix\n                            setForm({\n                              ...form,\n                              airMonitoringReport: base64Data,\n                            });\n                          };\n                          reader.readAsDataURL(file);\n                        }\n                      }}\n                    />\n                    <label htmlFor=\"air-monitoring-report-upload\">\n                      <Button\n                        variant=\"outlined\"\n                        component=\"span\"\n                        startIcon={<PictureAsPdfIcon />}\n                      >\n                        Upload Air Monitoring Report (PDF)\n                      </Button>\n                    </label>\n                    {form.airMonitoringReport && (\n                      <Typography\n                        variant=\"body2\"\n                        color=\"success.main\"\n                        sx={{ mt: 1 }}\n                      >\n                        ✓ Report uploaded successfully\n                      </Typography>\n                    )}\n                  </Grid>\n                )}\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    label=\"Job Specific Exclusions\"\n                    value={form.jobSpecificExclusions}\n                    onChange={(e) =>\n                      setForm({\n                        ...form,\n                        jobSpecificExclusions: e.target.value,\n                      })\n                    }\n                    multiline\n                    rows={3}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    label=\"Notes\"\n                    value={form.notes}\n                    onChange={(e) =>\n                      setForm({ ...form, notes: e.target.value })\n                    }\n                    multiline\n                    rows={3}\n                  />\n                </Grid>\n              </Grid>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={() => setDialogOpen(false)}>Cancel</Button>\n              <Button type=\"submit\" variant=\"contained\">\n                {editingClearance ? \"Update\" : \"Create\"}\n              </Button>\n            </DialogActions>\n          </form>\n        </Dialog>\n\n        {/* Snackbar for notifications */}\n        <Snackbar\n          open={snackbar.open}\n          autoHideDuration={6000}\n          onClose={() => setSnackbar({ ...snackbar, open: false })}\n        >\n          <Alert\n            onClose={() => setSnackbar({ ...snackbar, open: false })}\n            severity={snackbar.severity}\n          >\n            {snackbar.message}\n          </Alert>\n        </Snackbar>\n      </Box>\n    </PermissionGate>\n  );\n};\n\nexport default AsbestosClearance;\n","import jsPDF from \"jspdf\";\nimport html2canvas from \"html2canvas\";\n\nexport const generateTemplatePDF = async (template, sampleData, replacePlaceholders) => {\n  // Create a new PDF document\n  const doc = new jsPDF();\n  \n  // Set up the page\n  const pageWidth = doc.internal.pageSize.getWidth();\n  const pageHeight = doc.internal.pageSize.getHeight();\n  const margin = 20;\n  const contentWidth = pageWidth - (2 * margin);\n  \n  let y = margin;\n\n  // Helper function to add text with proper spacing\n  const addText = (text, fontSize = 11, fontStyle = \"normal\", spacing = 8) => {\n    if (!text) return y;\n    \n    doc.setFontSize(fontSize);\n    doc.setFont(\"helvetica\", fontStyle);\n    \n    const lines = doc.splitTextToSize(text, contentWidth);\n    doc.text(text, margin, y, { maxWidth: contentWidth });\n    \n    y += (lines.length * fontSize * 1.2) + spacing;\n    return y;\n  };\n\n  // Helper function to add header\n  const addHeader = (text, fontSize = 14, fontStyle = \"bold\") => {\n    return addText(text, fontSize, fontStyle, 12);\n  };\n\n  // Front Cover\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.frontCoverTitle || \"Non-friable Asbestos Removal Clearance\"\n    ),\n    16,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.frontCoverSubtitle || \"\"),\n    12,\n    \"normal\",\n    20\n  );\n\n  // Add a line break\n  y += 10;\n\n  // Company Details\n  if (template.companyDetails) {\n    y = addHeader(\"Company Details\", 12, \"bold\");\n    Object.entries(template.companyDetails).forEach(([key, value]) => {\n      const label = key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, \" $1\");\n      y = addText(`${label}: ${value}`, 10, \"normal\", 4);\n    });\n    y += 10;\n  }\n\n  // Inspection Details\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.inspectionDetailsTitle || \"Inspection Details\"\n    ),\n    12,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.inspectionIntroduction || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.inspectionSpecifics || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.tableIntroduction || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n\n  // Add a sample inspection table\n  y = addText(\"Sample Inspection Results:\", 10, \"bold\", 4);\n  \n  // Simple table structure\n  const tableData = [\n    [\"Area\", \"Material Type\", \"Condition\", \"Result\"],\n    [\"Kitchen\", \"Vinyl Floor Tiles\", \"Good\", \"Pass\"],\n    [\"Bathroom\", \"Vinyl Floor Tiles\", \"Good\", \"Pass\"],\n    [\"Living Room\", \"Vinyl Floor Tiles\", \"Good\", \"Pass\"],\n  ];\n\n  tableData.forEach((row, index) => {\n    const isHeader = index === 0;\n    const fontStyle = isHeader ? \"bold\" : \"normal\";\n    const fontSize = isHeader ? 10 : 9;\n    \n    // Calculate column widths\n    const colWidths = [40, 50, 40, 30];\n    let x = margin;\n    \n    row.forEach((cell, colIndex) => {\n      doc.setFontSize(fontSize);\n      doc.setFont(\"helvetica\", fontStyle);\n      doc.text(cell, x, y, { maxWidth: colWidths[colIndex] });\n      x += colWidths[colIndex] + 5;\n    });\n    \n    y += fontSize * 1.2 + 2;\n  });\n  \n  y += 10;\n\n  // Check if we need a new page\n  if (y > pageHeight - 100) {\n    doc.addPage();\n    y = margin;\n  }\n\n  // Clearance Certification\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.clearanceCertificationTitle || \"Clearance Certification\"\n    ),\n    12,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.clearanceCertificationText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.riskAssessmentText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.contactText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.behalfText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.signatureTitle || \"\"),\n    10,\n    \"bold\",\n    8\n  );\n\n  // Check if we need a new page\n  if (y > pageHeight - 100) {\n    doc.addPage();\n    y = margin;\n  }\n\n  // Background Information\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.backgroundTitle || \"Background Information\"\n    ),\n    12,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.backgroundIntroduction || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.bulletPoint1 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.bulletPoint2 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.requirementsText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.bulletPoint3 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.bulletPoint4 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.bulletPoint5 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n\n  // Check if we need a new page\n  if (y > pageHeight - 100) {\n    doc.addPage();\n    y = margin;\n  }\n\n  // Legislative Requirements\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.legislativeTitle || \"Legislative Requirements\"\n    ),\n    12,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.legislativeIntroduction || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.legislativePoint1 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.legislativePoint2 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.legislativePoint3 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n\n  // Limitations\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.limitationsTitle || \"Limitations\"\n    ),\n    12,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.limitationsText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n\n  // Check if we need a new page for signature\n  if (y > pageHeight - 150) {\n    doc.addPage();\n    y = margin;\n  }\n\n  // Signature Section\n  y = addHeader(\"Authorised Signature\", 12, \"bold\");\n  y += 20; // Space for signature line\n  \n  // Signature line\n  doc.setLineWidth(0.5);\n  doc.line(margin, y, margin + 80, y);\n  y += 5;\n  \n  // Signature details\n  y = addText(\"Name: John Smith\", 10, \"normal\", 4);\n  y = addText(\"License: AI000456\", 10, \"normal\", 4);\n  y = addText(\"Date: 25 July 2024\", 10, \"normal\", 4);\n  \n  y += 20;\n\n  // Footer\n  y = addText(\n    replacePlaceholders(template.standardSections.footerText || \"\"),\n    9,\n    \"normal\",\n    8\n  );\n\n  // Save the PDF\n  const fileName = `asbestos-clearance-template-preview-${new Date().toISOString().split('T')[0]}.pdf`;\n  doc.save(fileName);\n\n  return fileName;\n};\n\n/**\n * Generate PDF from HTML templates using server-side Puppeteer\n * @param {string} templateType - Type of template (e.g., 'asbestos-clearance')\n * @param {Object} data - Clearance data\n * @returns {Promise<string>} - Generated PDF filename\n */\nexport const generateHTMLPDF = async (templateType, data) => {\n  return generateHTMLTemplatePDF(templateType, data);\n    };\n\nexport const generateHTMLTemplatePDF = async (templateType, data) => {\n  try {\n    console.log('Starting server-side PDF generation with data:', data);\n    \n    // Get the API base URL from the environment\n    const apiBaseUrl = process.env.NODE_ENV === 'development' \n      ? \"http://localhost:5000/api\" \n      : \"https://landd-app-backend1.onrender.com/api\";\n    \n    const requestUrl = `${apiBaseUrl}/pdf/generate-asbestos-clearance?t=${Date.now()}`;\n    console.log('Calling backend URL:', requestUrl);\n\n    // Call the server-side PDF generation endpoint with cache busting\n    const response = await fetch(requestUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      },\n      body: JSON.stringify({ clearanceData: data })\n    });\n\n    console.log('Response status:', response.status);\n    console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to generate PDF');\n    }\n\n    // Get the PDF blob\n    const pdfBlob = await response.blob();\n    console.log('PDF blob size:', pdfBlob.size, 'bytes');\n\n    // Create a download link\n    const url = window.URL.createObjectURL(pdfBlob);\n    const link = document.createElement('a');\n    link.href = url;\n\n    // Generate filename\n    const fileName = `asbestos-clearance-${data.projectId?.name || 'report'}-${new Date().toISOString().split('T')[0]}.pdf`;\n    link.download = fileName;\n\n    // Trigger download\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    // Clean up\n    window.URL.revokeObjectURL(url);\n    \n    console.log('PDF generation completed successfully:', fileName);\n    return fileName;\n    \n  } catch (error) {\n    console.error(\"Error generating HTML template PDF:\", error);\n    console.error(\"Error stack:\", error.stack);\n    throw error;\n  }\n}; ","import axios from './axios';\r\n\r\nconst API_BASE_URL = '/asbestos-clearances';\r\n\r\nconst asbestosClearanceService = {\r\n  // Get all asbestos clearances with optional filters\r\n  getAll: async (params = {}) => {\r\n    const response = await axios.get(API_BASE_URL, { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Get single asbestos clearance by ID\r\n  getById: async (id) => {\r\n    const response = await axios.get(`${API_BASE_URL}/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create new asbestos clearance\r\n  create: async (clearanceData) => {\r\n    const response = await axios.post(API_BASE_URL, clearanceData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update asbestos clearance\r\n  update: async (id, clearanceData) => {\r\n    const response = await axios.put(`${API_BASE_URL}/${id}`, clearanceData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete asbestos clearance\r\n  delete: async (id) => {\r\n    const response = await axios.delete(`${API_BASE_URL}/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update status only\r\n  updateStatus: async (id, status) => {\r\n    const response = await axios.patch(`${API_BASE_URL}/${id}/status`, { status });\r\n    return response.data;\r\n  },\r\n\r\n  // Get statistics\r\n  getStats: async () => {\r\n    const response = await axios.get(`${API_BASE_URL}/stats/overview`);\r\n    return response.data;\r\n  },\r\n\r\n  // Search clearances\r\n  search: async (searchTerm, filters = {}) => {\r\n    const params = {\r\n      search: searchTerm,\r\n      ...filters\r\n    };\r\n    const response = await axios.get(API_BASE_URL, { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Get clearances by status\r\n  getByStatus: async (status) => {\r\n    const response = await axios.get(API_BASE_URL, { \r\n      params: { status } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get clearances by asbestos removalist\r\n  getByRemovalist: async (asbestosRemovalist) => {\r\n    const response = await axios.get(API_BASE_URL, { \r\n      params: { asbestosRemovalist } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Upload air monitoring report\r\n  uploadAirMonitoringReport: async (id, reportData) => {\r\n    const response = await axios.post(`${API_BASE_URL}/${id}/air-monitoring-report`, reportData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get clearance items\r\n  getItems: async (clearanceId) => {\r\n    const response = await axios.get(`${API_BASE_URL}/${clearanceId}/items`);\r\n    return response.data;\r\n  },\r\n\r\n  // Add clearance item\r\n  addItem: async (clearanceId, itemData) => {\r\n    const response = await axios.post(`${API_BASE_URL}/${clearanceId}/items`, itemData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update clearance item\r\n  updateItem: async (clearanceId, itemId, itemData) => {\r\n    const response = await axios.put(`${API_BASE_URL}/${clearanceId}/items/${itemId}`, itemData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete clearance item\r\n  deleteItem: async (clearanceId, itemId) => {\r\n    const response = await axios.delete(`${API_BASE_URL}/${clearanceId}/items/${itemId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get air monitoring reports for a project\r\n  getAirMonitoringReports: async (projectId) => {\r\n    const response = await axios.get(`${API_BASE_URL}/air-monitoring-reports/${projectId}`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default asbestosClearanceService; "],"names":["ASBESTOS_REMOVALISTS","AsbestosClearance","colors","tokens","navigate","useNavigate","clearances","setClearances","useState","projects","setProjects","users","setUsers","loading","setLoading","error","setError","dialogOpen","setDialogOpen","editingClearance","setEditingClearance","generatingPDF","setGeneratingPDF","snackbar","setSnackbar","open","message","severity","form","setForm","projectId","clearanceDate","clearanceType","LAA","asbestosRemovalist","airMonitoring","airMonitoringReport","jobSpecificExclusions","notes","useEffect","fetchData","async","clearancesData","projectsData","usersData","Promise","all","asbestosClearanceService","getAll","projectService","limit","status","userService","console","log","Object","keys","data","projectsArray","Array","isArray","length","activeUsers","filter","user","isActive","err","resetForm","getStatusColor","getProjectName","warn","projectIdValue","_id","project","find","p","projectID","getProjectDisplayName","name","_jsx","Box","display","justifyContent","alignItems","height","children","CircularProgress","m","Alert","PermissionGate","requiredPermissions","_jsxs","Typography","variant","color","grey","fontWeight","sx","mb","Button","onClick","startIcon","AddIcon","Card","mt","CardContent","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","clearance","Date","toLocaleDateString","day","month","year","Chip","label","size","IconButton","concat","handleViewItems","title","VisibilityIcon","toISOString","split","handleEdit","EditIcon","fullClearance","getById","fileName","generateHTMLTemplatePDF","handleGeneratePDF","disabled","PictureAsPdfIcon","window","confirm","delete","handleDelete","DeleteIcon","Dialog","onClose","maxWidth","fullWidth","DialogTitle","onSubmit","e","preventDefault","update","create","DialogContent","Grid","container","spacing","item","xs","FormControl","required","InputLabel","Select","value","onChange","_objectSpread","target","MenuItem","md","TextField","type","InputLabelProps","shrink","firstName","lastName","removalist","FormControlLabel","control","Checkbox","checked","accept","style","id","file","files","reader","FileReader","onload","event","base64Data","result","readAsDataURL","htmlFor","multiline","rows","DialogActions","Snackbar","autoHideDuration","generateTemplatePDF","template","sampleData","replacePlaceholders","doc","jsPDF","pageWidth","internal","pageSize","getWidth","pageHeight","getHeight","margin","contentWidth","y","addText","text","fontSize","arguments","undefined","fontStyle","setFontSize","setFont","lines","splitTextToSize","addHeader","standardSections","frontCoverTitle","frontCoverSubtitle","companyDetails","entries","forEach","_ref","key","charAt","toUpperCase","slice","replace","inspectionDetailsTitle","inspectionIntroduction","inspectionSpecifics","tableIntroduction","row","index","isHeader","colWidths","x","cell","colIndex","addPage","clearanceCertificationTitle","clearanceCertificationText","riskAssessmentText","contactText","behalfText","signatureTitle","backgroundTitle","backgroundIntroduction","bulletPoint1","bulletPoint2","requirementsText","bulletPoint3","bulletPoint4","bulletPoint5","legislativeTitle","legislativeIntroduction","legislativePoint1","legislativePoint2","legislativePoint3","limitationsTitle","limitationsText","setLineWidth","line","footerText","save","generateHTMLPDF","templateType","_data$projectId","requestUrl","now","response","fetch","method","headers","localStorage","getItem","body","JSON","stringify","clearanceData","fromEntries","ok","errorData","json","Error","pdfBlob","blob","url","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","revokeObjectURL","stack","API_BASE_URL","params","axios","get","post","put","updateStatus","patch","getStats","search","searchTerm","filters","getByStatus","getByRemovalist","uploadAirMonitoringReport","reportData","getItems","clearanceId","addItem","itemData","updateItem","itemId","deleteItem","getAirMonitoringReports"],"sourceRoot":""}