{"version":3,"file":"static/js/375.875b060e.chunk.js","mappings":"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","sources":["scenes/air-monitoring/new-sample.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n  Stack,\r\n  useTheme,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n  Checkbox,\r\n  FormControlLabel,\r\n} from \"@mui/material\";\r\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport AccessTimeIcon from \"@mui/icons-material/AccessTime\";\r\nimport {\r\n  sampleService,\r\n  shiftService,\r\n  jobService,\r\n  userService,\r\n} from \"../../services/api\";\r\nimport airPumpService from \"../../services/airPumpService\";\r\nimport { equipmentService } from \"../../services/equipmentService\";\r\nimport { useAuth } from \"../../context/AuthContext\";\r\nimport { formatDateForInput } from \"../../utils/dateUtils\";\r\n\r\nconst SAMPLES_KEY = \"ldc_samples\";\r\nconst SHIFTS_KEY = \"ldc_shifts\";\r\nconst JOBS_KEY = \"ldc_jobs\";\r\n\r\nconst NewSample = () => {\r\n  const theme = useTheme();\r\n  const { shiftId } = useParams();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { currentUser } = useAuth();\r\n  const [users, setUsers] = useState([]);\r\n  const [airPumps, setAirPumps] = useState([]);\r\n  const [flowmeters, setFlowmeters] = useState([]);\r\n  const [form, setForm] = useState({\r\n    sampleNumber: \"\",\r\n    type: \"Background\",\r\n    location: \"\",\r\n    pumpNo: \"\",\r\n    flowmeter: \"\",\r\n    cowlNo: \"\",\r\n    filterSize: \"25mm\",\r\n    startTime: \"\",\r\n    endTime: \"\",\r\n    initialFlowrate: \"\",\r\n    finalFlowrate: \"\",\r\n    averageFlowrate: \"\",\r\n    notes: \"\",\r\n    isFieldBlank: false,\r\n    sampler: \"\",\r\n  });\r\n  const [projectID, setProjectID] = useState(null);\r\n  const [job, setJob] = useState(null);\r\n  const [error, setError] = useState(\"\");\r\n  const [fieldErrors, setFieldErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [shift, setShift] = useState(null);\r\n\r\n  // Fetch users when component mounts\r\n  useEffect(() => {\r\n    const fetchUsers = async () => {\r\n      try {\r\n        const response = await userService.getAll();\r\n        setUsers(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching users:\", error);\r\n      }\r\n    };\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  // Fetch active air pumps when component mounts\r\n  useEffect(() => {\r\n    const fetchActiveAirPumps = async () => {\r\n      try {\r\n        const response = await airPumpService.filterByStatus(\"Active\");\r\n        const pumps = response.data || response;\r\n        setAirPumps(pumps);\r\n      } catch (error) {\r\n        console.error(\"Error fetching active air pumps:\", error);\r\n      }\r\n    };\r\n    fetchActiveAirPumps();\r\n  }, []);\r\n\r\n  // Fetch active flowmeters when component mounts\r\n  useEffect(() => {\r\n    const fetchActiveFlowmeters = async () => {\r\n      try {\r\n        console.log(\"Fetching flowmeters...\");\r\n        const response = await equipmentService.getAll();\r\n        console.log(\"Equipment response:\", response);\r\n\r\n        if (!response) {\r\n          console.error(\"No response from equipment service\");\r\n          return;\r\n        }\r\n\r\n        const allEquipment = response.equipment || response.data || response;\r\n        console.log(\"All equipment:\", allEquipment);\r\n\r\n        if (!Array.isArray(allEquipment)) {\r\n          console.error(\"Equipment data is not an array:\", allEquipment);\r\n          return;\r\n        }\r\n\r\n        const flowmeters = allEquipment.filter(\r\n          (equipment) =>\r\n            (equipment.equipmentType === \"Bubble flowmeter\" ||\r\n              equipment.equipmentType === \"Site flowmeter\") &&\r\n            equipment.status === \"active\"\r\n        );\r\n        console.log(\"Filtered flowmeters:\", flowmeters);\r\n        console.log(\"Flowmeter count:\", flowmeters.length);\r\n        setFlowmeters(flowmeters);\r\n      } catch (error) {\r\n        console.error(\"Error fetching active flowmeters:\", error);\r\n        console.error(\"Error details:\", error.response?.data || error.message);\r\n      }\r\n    };\r\n    fetchActiveFlowmeters();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchShift = async () => {\r\n      try {\r\n        const response = await shiftService.getById(shiftId);\r\n        console.log(\"Full shift response:\", response.data);\r\n        setShift(response.data);\r\n\r\n        // Get the next sample number from location state\r\n        const nextNumber = location.state?.nextSampleNumber;\r\n        console.log(\"Next sample number from location:\", nextNumber);\r\n\r\n        if (nextNumber) {\r\n          // Get the project ID from the shift's job\r\n          const projectID = response.data.job?.project?.projectID;\r\n          if (projectID) {\r\n            // Set just the number part as the sample number\r\n            setForm((prev) => ({\r\n              ...prev,\r\n              sampleNumber: nextNumber.toString(),\r\n            }));\r\n            // Store the project ID for later use in fullSampleID\r\n            setProjectID(projectID);\r\n          }\r\n        }\r\n\r\n        // Get the number of samples in this shift by querying the samples\r\n        const samplesResponse = await sampleService.getByShift(shiftId);\r\n        const samplesInShift = samplesResponse.data || [];\r\n        const shiftSampleNumber = samplesInShift.length + 1;\r\n        console.log(\"Number of samples in shift:\", samplesInShift.length);\r\n        console.log(\r\n          \"This will be sample number:\",\r\n          shiftSampleNumber,\r\n          \"in this shift\"\r\n        );\r\n\r\n        // If there's no default sampler but we have samples, check the first sample\r\n        if (!response.data.defaultSampler && samplesInShift.length > 0) {\r\n          const firstSample = samplesInShift[0];\r\n          console.log(\"First sample in shift:\", firstSample);\r\n\r\n          if (firstSample.collectedBy) {\r\n            console.log(\r\n              \"Setting default sampler from first sample:\",\r\n              firstSample.collectedBy\r\n            );\r\n            try {\r\n              const shiftUpdateResponse = await shiftService.update(shiftId, {\r\n                defaultSampler: firstSample.collectedBy,\r\n              });\r\n              console.log(\r\n                \"Shift updated with default sampler from first sample:\",\r\n                shiftUpdateResponse\r\n              );\r\n\r\n              // Set the sampler in the form\r\n              setForm((prev) => ({\r\n                ...prev,\r\n                sampler: firstSample.collectedBy,\r\n              }));\r\n            } catch (error) {\r\n              console.error(\r\n                \"Error setting default sampler from first sample:\",\r\n                error\r\n              );\r\n            }\r\n          }\r\n        }\r\n        // If there is a default sampler, use it for subsequent samples\r\n        else if (response.data.defaultSampler) {\r\n          console.log(\r\n            \"Setting default sampler from shift:\",\r\n            response.data.defaultSampler\r\n          );\r\n          const samplerId =\r\n            response.data.defaultSampler._id || response.data.defaultSampler;\r\n          console.log(\"Setting sampler ID to:\", samplerId);\r\n          setForm((prev) => ({\r\n            ...prev,\r\n            sampler: samplerId,\r\n          }));\r\n        }\r\n\r\n        // Handle default flowmeter logic\r\n        if (!response.data.defaultFlowmeter && samplesInShift.length > 0) {\r\n          const firstSample = samplesInShift[0];\r\n          console.log(\"First sample in shift for flowmeter:\", firstSample);\r\n\r\n          if (firstSample.flowmeter) {\r\n            console.log(\r\n              \"Setting default flowmeter from first sample:\",\r\n              firstSample.flowmeter\r\n            );\r\n            try {\r\n              const shiftUpdateResponse = await shiftService.update(shiftId, {\r\n                defaultFlowmeter: firstSample.flowmeter,\r\n              });\r\n              console.log(\r\n                \"Shift updated with default flowmeter from first sample:\",\r\n                shiftUpdateResponse\r\n              );\r\n\r\n              // Set the flowmeter in the form\r\n              setForm((prev) => ({\r\n                ...prev,\r\n                flowmeter: firstSample.flowmeter,\r\n              }));\r\n            } catch (error) {\r\n              console.error(\r\n                \"Error setting default flowmeter from first sample:\",\r\n                error\r\n              );\r\n            }\r\n          }\r\n        }\r\n        // If there is a default flowmeter, use it for subsequent samples\r\n        else if (response.data.defaultFlowmeter) {\r\n          console.log(\r\n            \"Setting default flowmeter from shift:\",\r\n            response.data.defaultFlowmeter\r\n          );\r\n          setForm((prev) => {\r\n            const updatedForm = {\r\n              ...prev,\r\n              flowmeter: response.data.defaultFlowmeter,\r\n            };\r\n            console.log(\"Updated form with flowmeter:\", updatedForm);\r\n            return updatedForm;\r\n          });\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error fetching shift:\", err);\r\n        setError(\"Failed to load shift details\");\r\n      }\r\n    };\r\n\r\n    fetchShift();\r\n  }, [shiftId, location.state]);\r\n\r\n  useEffect(() => {\r\n    const fetchShiftDetails = async () => {\r\n      if (!shiftId) {\r\n        setError(\"No shift ID provided\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        console.log(\"Fetching shift details for shiftId:\", shiftId);\r\n        const response = await shiftService.getById(shiftId);\r\n        console.log(\"Full shift response:\", response);\r\n        const shift = response.data;\r\n\r\n        // Get project ID from the job's project\r\n        if (shift.job && shift.job.project) {\r\n          setProjectID(shift.job.project.projectID);\r\n          console.log(\"Project ID set to:\", shift.job.project.projectID);\r\n        } else {\r\n          console.error(\"No project data found in job\");\r\n          setError(\"No project data found for this job\");\r\n          return;\r\n        }\r\n\r\n        // Fetch job details\r\n        const jobResponse = await jobService.getById(shift.job._id);\r\n        setJob(jobResponse.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching shift details:\", error);\r\n        setError(\"Failed to fetch shift details\");\r\n      }\r\n    };\r\n\r\n    fetchShiftDetails();\r\n  }, [shiftId]);\r\n\r\n  // Effect to handle flowmeter persistence when flowmeters are loaded\r\n  useEffect(() => {\r\n    if (flowmeters.length > 0 && shift && shift.defaultFlowmeter) {\r\n      console.log(\r\n        \"Flowmeters loaded, checking for default flowmeter:\",\r\n        shift.defaultFlowmeter\r\n      );\r\n      console.log(\r\n        \"Available flowmeter references:\",\r\n        flowmeters.map((f) => f.equipmentReference)\r\n      );\r\n\r\n      // Check if the default flowmeter exists in the available flowmeters\r\n      const defaultFlowmeterExists = flowmeters.some(\r\n        (f) => f.equipmentReference === shift.defaultFlowmeter\r\n      );\r\n\r\n      if (defaultFlowmeterExists && !form.flowmeter) {\r\n        console.log(\r\n          \"Setting default flowmeter from shift after flowmeters loaded\"\r\n        );\r\n        setForm((prev) => ({\r\n          ...prev,\r\n          flowmeter: shift.defaultFlowmeter,\r\n        }));\r\n      }\r\n    }\r\n  }, [flowmeters, shift, form.flowmeter]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value, checked } = e.target;\r\n\r\n    // Clear field error when user starts typing\r\n    if (fieldErrors[name]) {\r\n      setFieldErrors((prev) => ({ ...prev, [name]: undefined }));\r\n    }\r\n\r\n    if (name === \"isFieldBlank\") {\r\n      setForm((prev) => ({\r\n        ...prev,\r\n        [name]: checked,\r\n        location: checked ? \"Field blank\" : prev.location,\r\n      }));\r\n    } else {\r\n      setForm((prev) => ({\r\n        ...prev,\r\n        [name]: value,\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Calculate average flowrate when initial or final flowrate changes\r\n  useEffect(() => {\r\n    if (form.initialFlowrate) {\r\n      if (form.finalFlowrate) {\r\n        const avg =\r\n          (parseFloat(form.initialFlowrate) + parseFloat(form.finalFlowrate)) /\r\n          2;\r\n        setForm((prev) => ({\r\n          ...prev,\r\n          averageFlowrate: Math.round(avg).toString(),\r\n        }));\r\n      } else {\r\n        // If no final flowrate, use initial flowrate as average\r\n        setForm((prev) => ({\r\n          ...prev,\r\n          averageFlowrate: Math.round(\r\n            parseFloat(form.initialFlowrate)\r\n          ).toString(),\r\n        }));\r\n      }\r\n    }\r\n  }, [form.initialFlowrate, form.finalFlowrate]);\r\n\r\n  const setCurrentTime = (field) => {\r\n    const now = new Date();\r\n    const hours = now.getHours().toString().padStart(2, \"0\");\r\n    const minutes = now.getMinutes().toString().padStart(2, \"0\");\r\n    const timeString = `${hours}:${minutes}`;\r\n    setForm((prev) => ({ ...prev, [field]: timeString }));\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const errors = {};\r\n\r\n    if (!form.sampler) {\r\n      errors.sampler = \"Sampler is required\";\r\n    }\r\n\r\n    if (!form.sampleNumber) {\r\n      errors.sampleNumber = \"Sample number is required\";\r\n    }\r\n\r\n    if (!form.flowmeter) {\r\n      errors.flowmeter = \"Flowmeter is required\";\r\n    }\r\n\r\n    if (!form.isFieldBlank) {\r\n      if (!form.location) {\r\n        errors.location = \"Location is required\";\r\n      }\r\n      if (!form.type) {\r\n        errors.type = \"Type is required\";\r\n      }\r\n      if (!form.startTime) {\r\n        errors.startTime = \"Start time is required\";\r\n      }\r\n      if (!form.initialFlowrate) {\r\n        errors.initialFlowrate = \"Initial flowrate is required\";\r\n      }\r\n    }\r\n\r\n    setFieldErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError(\"\");\r\n    setFieldErrors({});\r\n\r\n    // Validate form before submission\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      if (!projectID) {\r\n        throw new Error(\"Project ID is required\");\r\n      }\r\n\r\n      if (!job?._id) {\r\n        throw new Error(\"Job ID is required\");\r\n      }\r\n\r\n      if (!shiftId) {\r\n        throw new Error(\"Shift ID is required\");\r\n      }\r\n\r\n      // Get the number of samples in this shift\r\n      const samplesResponse = await sampleService.getByShift(shiftId);\r\n      const samplesInShift = samplesResponse.data || [];\r\n      const shiftSampleNumber = samplesInShift.length + 1;\r\n\r\n      // If this is the first sample in the shift and we have a sampler, set it as the default\r\n      if (shiftSampleNumber === 1 && form.sampler) {\r\n        try {\r\n          await shiftService.update(shiftId, {\r\n            defaultSampler: form.sampler,\r\n          });\r\n        } catch (error) {\r\n          // Don't throw the error, just log it and continue\r\n        }\r\n      }\r\n\r\n      // If this is the first sample in the shift and we have a flowmeter, set it as the default\r\n      if (shiftSampleNumber === 1 && form.flowmeter) {\r\n        try {\r\n          await shiftService.update(shiftId, {\r\n            defaultFlowmeter: form.flowmeter,\r\n          });\r\n        } catch (error) {\r\n          // Don't throw the error, just log it and continue\r\n        }\r\n      }\r\n\r\n      // Create the sample\r\n      const sampleData = {\r\n        ...form,\r\n        shift: shiftId,\r\n        job: job._id,\r\n        fullSampleID: `${projectID}-${form.sampleNumber}`,\r\n        collectedBy: form.sampler,\r\n        flowmeter: form.flowmeter, // Explicitly include flowmeter\r\n      };\r\n\r\n      await sampleService.create(sampleData);\r\n\r\n      // Add a small delay before navigation to ensure the sample is saved\r\n      setTimeout(() => {\r\n        navigate(`/air-monitoring/shift/${shiftId}/samples`);\r\n      }, 500);\r\n    } catch (error) {\r\n      setError(\r\n        error.response?.data?.message ||\r\n          error.message ||\r\n          \"Failed to create sample\"\r\n      );\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  if (isSubmitting) {\r\n    return (\r\n      <Box sx={{ p: { xs: 2, sm: 3, md: 4 } }}>\r\n        <Typography>Submitting...</Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ p: { xs: 2, sm: 3, md: 4 } }}>\r\n      <Button\r\n        startIcon={<ArrowBackIcon />}\r\n        onClick={() => navigate(-1)}\r\n        sx={{ mb: 4 }}\r\n      >\r\n        Back to Samples\r\n      </Button>\r\n\r\n      <Typography\r\n        variant=\"h4\"\r\n        sx={{\r\n          color:\r\n            theme.palette.mode === \"dark\"\r\n              ? \"#fff\"\r\n              : theme.palette.secondary[200],\r\n          mb: 4,\r\n        }}\r\n      >\r\n        Add New Sample\r\n      </Typography>\r\n\r\n      {error && (\r\n        <Typography color=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Typography>\r\n      )}\r\n\r\n      <Box component=\"form\" onSubmit={handleSubmit} noValidate>\r\n        <Stack spacing={3} sx={{ maxWidth: 600 }}>\r\n          <FormControl fullWidth required error={!!fieldErrors.sampler}>\r\n            <InputLabel>Sampler</InputLabel>\r\n            <Select\r\n              name=\"sampler\"\r\n              value={form.sampler}\r\n              onChange={handleChange}\r\n              label=\"Sampler\"\r\n              required\r\n            >\r\n              {users.map((user) => (\r\n                <MenuItem key={user._id} value={user._id}>\r\n                  {user.firstName} {user.lastName}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n            {fieldErrors.sampler && (\r\n              <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5 }}>\r\n                {fieldErrors.sampler}\r\n              </Typography>\r\n            )}\r\n          </FormControl>\r\n          <TextField\r\n            name=\"sampleNumber\"\r\n            label=\"Sample Number\"\r\n            value={form.sampleNumber}\r\n            onChange={handleChange}\r\n            required\r\n            fullWidth\r\n            error={!!fieldErrors.sampleNumber}\r\n            helperText={\r\n              fieldErrors.sampleNumber\r\n                ? fieldErrors.sampleNumber\r\n                : projectID\r\n                ? `Full Sample ID will be: ${projectID}-${\r\n                    form.sampleNumber || \"XXX\"\r\n                  }`\r\n                : \"Loading job details...\"\r\n            }\r\n          />\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                name=\"isFieldBlank\"\r\n                checked={form.isFieldBlank}\r\n                onChange={handleChange}\r\n              />\r\n            }\r\n            label=\"Field Blank\"\r\n          />\r\n          {!form.isFieldBlank && (\r\n            <>\r\n              <FormControl fullWidth required error={!!fieldErrors.type}>\r\n                <InputLabel>Type</InputLabel>\r\n                <Select\r\n                  name=\"type\"\r\n                  value={form.type}\r\n                  onChange={handleChange}\r\n                  label=\"Type\"\r\n                >\r\n                  <MenuItem value=\"Background\">Background</MenuItem>\r\n                  <MenuItem value=\"Clearance\">Clearance</MenuItem>\r\n                  <MenuItem value=\"Exposure\">Exposure</MenuItem>\r\n                </Select>\r\n                {fieldErrors.type && (\r\n                  <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5 }}>\r\n                    {fieldErrors.type}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n              <TextField\r\n                name=\"location\"\r\n                label=\"Location\"\r\n                value={form.location}\r\n                onChange={handleChange}\r\n                required\r\n                fullWidth\r\n                error={!!fieldErrors.location}\r\n                helperText={fieldErrors.location}\r\n              />\r\n            </>\r\n          )}\r\n          {form.isFieldBlank && (\r\n            <TextField\r\n              name=\"location\"\r\n              label=\"Location\"\r\n              value=\"Field blank\"\r\n              disabled\r\n              required\r\n              fullWidth\r\n            />\r\n          )}\r\n          {!form.isFieldBlank && (\r\n            <>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Pump No.</InputLabel>\r\n                <Select\r\n                  name=\"pumpNo\"\r\n                  value={form.pumpNo}\r\n                  onChange={handleChange}\r\n                  label=\"Pump No.\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>Select a pump</em>\r\n                  </MenuItem>\r\n                  {airPumps.map((pump) => (\r\n                    <MenuItem key={pump._id} value={pump.pumpReference}>\r\n                      {pump.pumpReference} - {pump.pumpDetails}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <TextField\r\n                name=\"cowlNo\"\r\n                label=\"Cowl No.\"\r\n                value={form.cowlNo}\r\n                onChange={handleChange}\r\n                required\r\n                fullWidth\r\n              />\r\n              <FormControl fullWidth>\r\n                <InputLabel>Filter Size</InputLabel>\r\n                <Select\r\n                  name=\"filterSize\"\r\n                  value={form.filterSize}\r\n                  onChange={handleChange}\r\n                  label=\"Filter Size\"\r\n                >\r\n                  <MenuItem value=\"25mm\">25mm</MenuItem>\r\n                  <MenuItem value=\"13mm\">13mm</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </>\r\n          )}\r\n          <FormControl fullWidth required error={!!fieldErrors.flowmeter}>\r\n            <InputLabel>Flowmeter</InputLabel>\r\n            <Select\r\n              name=\"flowmeter\"\r\n              value={form.flowmeter}\r\n              onChange={handleChange}\r\n              label=\"Flowmeter\"\r\n              required\r\n            >\r\n              <MenuItem value=\"\">\r\n                <em>Select a flowmeter</em>\r\n              </MenuItem>\r\n              {flowmeters.map((flowmeter) => (\r\n                <MenuItem\r\n                  key={flowmeter._id}\r\n                  value={flowmeter.equipmentReference}\r\n                >\r\n                  {flowmeter.equipmentReference} - {flowmeter.brandModel} (\r\n                  {flowmeter.equipmentType})\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n            {fieldErrors.flowmeter && (\r\n              <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5 }}>\r\n                {fieldErrors.flowmeter}\r\n              </Typography>\r\n            )}\r\n            <Typography\r\n              variant=\"caption\"\r\n              sx={{ mt: 0.5, color: \"text.secondary\" }}\r\n            >\r\n              Current value: {form.flowmeter || \"None\"} | Available options:{\" \"}\r\n              {flowmeters.map((f) => f.equipmentReference).join(\", \")}\r\n            </Typography>\r\n          </FormControl>\r\n          {!form.isFieldBlank && (\r\n            <>\r\n              <Box sx={{ display: \"flex\", gap: 1 }}>\r\n                <TextField\r\n                  name=\"startTime\"\r\n                  label=\"Start Time\"\r\n                  type=\"time\"\r\n                  value={form.startTime}\r\n                  onChange={handleChange}\r\n                  required\r\n                  fullWidth\r\n                  error={!!fieldErrors.startTime}\r\n                  helperText={fieldErrors.startTime}\r\n                  InputLabelProps={{ shrink: true }}\r\n                  inputProps={{ step: 60 }}\r\n                />\r\n                <IconButton\r\n                  onClick={() => setCurrentTime(\"startTime\")}\r\n                  sx={{ alignSelf: \"flex-end\", mb: 1 }}\r\n                >\r\n                  <AccessTimeIcon />\r\n                </IconButton>\r\n              </Box>\r\n              <TextField\r\n                name=\"initialFlowrate\"\r\n                label=\"Initial Flowrate (L/min)\"\r\n                type=\"number\"\r\n                value={form.initialFlowrate}\r\n                onChange={handleChange}\r\n                required\r\n                fullWidth\r\n                error={!!fieldErrors.initialFlowrate}\r\n                helperText={fieldErrors.initialFlowrate}\r\n                inputProps={{ step: \"0.1\" }}\r\n              />\r\n              <Box sx={{ display: \"flex\", gap: 1 }}>\r\n                <TextField\r\n                  name=\"endTime\"\r\n                  label=\"End Time\"\r\n                  type=\"time\"\r\n                  value={form.endTime}\r\n                  onChange={handleChange}\r\n                  fullWidth\r\n                  InputLabelProps={{ shrink: true }}\r\n                  inputProps={{ step: 60 }}\r\n                />\r\n                <IconButton\r\n                  onClick={() => setCurrentTime(\"endTime\")}\r\n                  sx={{ alignSelf: \"flex-end\", mb: 1 }}\r\n                >\r\n                  <AccessTimeIcon />\r\n                </IconButton>\r\n              </Box>\r\n              <TextField\r\n                name=\"finalFlowrate\"\r\n                label=\"Final Flowrate (L/min)\"\r\n                type=\"number\"\r\n                value={form.finalFlowrate}\r\n                onChange={handleChange}\r\n                fullWidth\r\n                inputProps={{ step: \"0.1\" }}\r\n              />\r\n              <TextField\r\n                name=\"averageFlowrate\"\r\n                label=\"Average Flowrate\"\r\n                value={form.averageFlowrate}\r\n                disabled\r\n                required\r\n                fullWidth\r\n              />\r\n            </>\r\n          )}\r\n          <TextField\r\n            name=\"notes\"\r\n            label=\"Notes\"\r\n            value={form.notes}\r\n            onChange={handleChange}\r\n            multiline\r\n            rows={3}\r\n            fullWidth\r\n          />\r\n          <Box sx={{ display: \"flex\", gap: 2, justifyContent: \"flex-end\" }}>\r\n            <Button variant=\"outlined\" onClick={() => navigate(-1)}>\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              sx={{\r\n                backgroundColor: theme.palette.primary.main,\r\n                \"&:hover\": {\r\n                  backgroundColor: theme.palette.primary.dark,\r\n                },\r\n              }}\r\n            >\r\n              Save Sample\r\n            </Button>\r\n          </Box>\r\n        </Stack>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default NewSample;\r\n"],"names":["NewSample","theme","useTheme","shiftId","useParams","navigate","useNavigate","location","useLocation","currentUser","useAuth","users","setUsers","useState","airPumps","setAirPumps","flowmeters","setFlowmeters","form","setForm","sampleNumber","type","pumpNo","flowmeter","cowlNo","filterSize","startTime","endTime","initialFlowrate","finalFlowrate","averageFlowrate","notes","isFieldBlank","sampler","projectID","setProjectID","job","setJob","error","setError","fieldErrors","setFieldErrors","isSubmitting","setIsSubmitting","loading","setLoading","shift","setShift","useEffect","async","response","userService","getAll","data","console","fetchUsers","airPumpService","filterByStatus","pumps","fetchActiveAirPumps","log","equipmentService","allEquipment","equipment","Array","isArray","filter","equipmentType","status","length","_error$response","message","fetchActiveFlowmeters","_location$state","shiftService","getById","nextNumber","state","nextSampleNumber","_response$data$job","_response$data$job$pr","project","prev","_objectSpread","toString","samplesInShift","sampleService","getByShift","shiftSampleNumber","defaultSampler","firstSample","collectedBy","shiftUpdateResponse","update","samplerId","_id","defaultFlowmeter","updatedForm","err","fetchShift","jobResponse","jobService","fetchShiftDetails","map","f","equipmentReference","some","handleChange","e","name","value","checked","target","undefined","avg","parseFloat","Math","round","setCurrentTime","field","now","Date","hours","getHours","padStart","minutes","getMinutes","timeString","concat","_jsx","Box","sx","p","xs","sm","md","children","Typography","_jsxs","Button","startIcon","ArrowBackIcon","onClick","mb","variant","color","palette","mode","secondary","component","onSubmit","preventDefault","validateForm","errors","Object","keys","Error","samplesResponse","sampleData","fullSampleID","create","setTimeout","_error$response2","_error$response2$data","noValidate","Stack","spacing","maxWidth","FormControl","fullWidth","required","InputLabel","Select","onChange","label","user","MenuItem","firstName","lastName","mt","TextField","helperText","FormControlLabel","control","Checkbox","_Fragment","disabled","pump","pumpReference","pumpDetails","brandModel","join","display","gap","InputLabelProps","shrink","inputProps","step","IconButton","alignSelf","AccessTimeIcon","multiline","rows","justifyContent","backgroundColor","primary","main","dark"],"sourceRoot":""}