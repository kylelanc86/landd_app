{"version":3,"file":"static/js/549.fb4f1dcc.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Visibility.js","../node_modules/@mui/icons-material/esm/Print.js","services/asbestosClearanceReportService.js","utils/templatePDFGenerator.js","services/asbestosClearanceService.js","../node_modules/@mui/icons-material/esm/Download.js","services/projectService.js","scenes/reports/ProjectReports.jsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5M12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5m0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3\"\n}), 'Visibility');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 8H5c-1.66 0-3 1.34-3 3v6h4v4h12v-4h4v-6c0-1.66-1.34-3-3-3m-3 11H8v-5h8zm3-7c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1m-1-9H6v4h12z\"\n}), 'Print');","import api from './axios';\n\nconst BASE_URL = '/asbestos-clearance-reports';\n\nconst asbestosClearanceReportService = {\n  // Get all clearance reports with optional filtering\n  getAll: async (params = {}) => {\n    const response = await api.get(BASE_URL, { params });\n    return response.data;\n  },\n\n  // Get clearance reports by clearance ID\n  getByClearanceId: async (clearanceId) => {\n    const response = await api.get(`${BASE_URL}/clearance/${clearanceId}`);\n    return response.data;\n  },\n\n  // Get a single clearance report by ID\n  getById: async (id) => {\n    const response = await api.get(`${BASE_URL}/${id}`);\n    return response.data;\n  },\n\n  // Create a new clearance report\n  create: async (data) => {\n    const response = await api.post(BASE_URL, data);\n    return response.data;\n  },\n\n  // Update a clearance report\n  update: async (id, data) => {\n    const response = await api.put(`${BASE_URL}/${id}`, data);\n    return response.data;\n  },\n\n  // Delete a clearance report\n  delete: async (id) => {\n    const response = await api.delete(`${BASE_URL}/${id}`);\n    return response.data;\n  },\n};\n\nexport default asbestosClearanceReportService; ","import jsPDF from \"jspdf\";\nimport html2canvas from \"html2canvas\";\n\nexport const generateTemplatePDF = async (template, sampleData, replacePlaceholders) => {\n  // Create a new PDF document\n  const doc = new jsPDF();\n  \n  // Set up the page\n  const pageWidth = doc.internal.pageSize.getWidth();\n  const pageHeight = doc.internal.pageSize.getHeight();\n  const margin = 20;\n  const contentWidth = pageWidth - (2 * margin);\n  \n  let y = margin;\n\n  // Helper function to add text with proper spacing\n  const addText = (text, fontSize = 11, fontStyle = \"normal\", spacing = 8) => {\n    if (!text) return y;\n    \n    doc.setFontSize(fontSize);\n    doc.setFont(\"helvetica\", fontStyle);\n    \n    const lines = doc.splitTextToSize(text, contentWidth);\n    doc.text(text, margin, y, { maxWidth: contentWidth });\n    \n    y += (lines.length * fontSize * 1.2) + spacing;\n    return y;\n  };\n\n  // Helper function to add header\n  const addHeader = (text, fontSize = 14, fontStyle = \"bold\") => {\n    return addText(text, fontSize, fontStyle, 12);\n  };\n\n  // Front Cover\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.frontCoverTitle || \"Non-friable Asbestos Removal Clearance\"\n    ),\n    16,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.frontCoverSubtitle || \"\"),\n    12,\n    \"normal\",\n    20\n  );\n\n  // Add a line break\n  y += 10;\n\n  // Company Details\n  if (template.companyDetails) {\n    y = addHeader(\"Company Details\", 12, \"bold\");\n    Object.entries(template.companyDetails).forEach(([key, value]) => {\n      const label = key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, \" $1\");\n      y = addText(`${label}: ${value}`, 10, \"normal\", 4);\n    });\n    y += 10;\n  }\n\n  // Inspection Details\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.inspectionDetailsTitle || \"Inspection Details\"\n    ),\n    12,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.inspectionIntroduction || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.inspectionSpecifics || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.tableIntroduction || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n\n  // Add a sample inspection table\n  y = addText(\"Sample Inspection Results:\", 10, \"bold\", 4);\n  \n  // Simple table structure\n  const tableData = [\n    [\"Area\", \"Material Type\", \"Condition\", \"Result\"],\n    [\"Kitchen\", \"Vinyl Floor Tiles\", \"Good\", \"Pass\"],\n    [\"Bathroom\", \"Vinyl Floor Tiles\", \"Good\", \"Pass\"],\n    [\"Living Room\", \"Vinyl Floor Tiles\", \"Good\", \"Pass\"],\n  ];\n\n  tableData.forEach((row, index) => {\n    const isHeader = index === 0;\n    const fontStyle = isHeader ? \"bold\" : \"normal\";\n    const fontSize = isHeader ? 10 : 9;\n    \n    // Calculate column widths\n    const colWidths = [40, 50, 40, 30];\n    let x = margin;\n    \n    row.forEach((cell, colIndex) => {\n      doc.setFontSize(fontSize);\n      doc.setFont(\"helvetica\", fontStyle);\n      doc.text(cell, x, y, { maxWidth: colWidths[colIndex] });\n      x += colWidths[colIndex] + 5;\n    });\n    \n    y += fontSize * 1.2 + 2;\n  });\n  \n  y += 10;\n\n  // Check if we need a new page\n  if (y > pageHeight - 100) {\n    doc.addPage();\n    y = margin;\n  }\n\n  // Clearance Certification\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.clearanceCertificationTitle || \"Clearance Certification\"\n    ),\n    12,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.clearanceCertificationText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.riskAssessmentText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.contactText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.behalfText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.signatureTitle || \"\"),\n    10,\n    \"bold\",\n    8\n  );\n\n  // Check if we need a new page\n  if (y > pageHeight - 100) {\n    doc.addPage();\n    y = margin;\n  }\n\n  // Background Information\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.backgroundTitle || \"Background Information\"\n    ),\n    12,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.backgroundIntroduction || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.bulletPoint1 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.bulletPoint2 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.requirementsText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.bulletPoint3 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.bulletPoint4 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.bulletPoint5 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n\n  // Check if we need a new page\n  if (y > pageHeight - 100) {\n    doc.addPage();\n    y = margin;\n  }\n\n  // Legislative Requirements\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.legislativeTitle || \"Legislative Requirements\"\n    ),\n    12,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.legislativeIntroduction || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.legislativePoint1 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.legislativePoint2 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.legislativePoint3 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n\n  // Limitations\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.limitationsTitle || \"Limitations\"\n    ),\n    12,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.limitationsText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n\n  // Check if we need a new page for signature\n  if (y > pageHeight - 150) {\n    doc.addPage();\n    y = margin;\n  }\n\n  // Signature Section\n  y = addHeader(\"Authorised Signature\", 12, \"bold\");\n  y += 20; // Space for signature line\n  \n  // Signature line\n  doc.setLineWidth(0.5);\n  doc.line(margin, y, margin + 80, y);\n  y += 5;\n  \n  // Signature details\n  y = addText(\"Name: John Smith\", 10, \"normal\", 4);\n  y = addText(\"License: AI000456\", 10, \"normal\", 4);\n  y = addText(\"Date: 25 July 2024\", 10, \"normal\", 4);\n  \n  y += 20;\n\n  // Footer\n  y = addText(\n    replacePlaceholders(template.standardSections.footerText || \"\"),\n    9,\n    \"normal\",\n    8\n  );\n\n  // Save the PDF\n  const fileName = `asbestos-clearance-template-preview-${new Date().toISOString().split('T')[0]}.pdf`;\n  doc.save(fileName);\n\n  return fileName;\n};\n\n/**\n * Generate PDF from HTML templates using server-side Puppeteer\n * @param {string} templateType - Type of template (e.g., 'asbestos-clearance')\n * @param {Object} data - Clearance data\n * @returns {Promise<string>} - Generated PDF filename\n */\nexport const generateHTMLPDF = async (templateType, data) => {\n  return generateHTMLTemplatePDF(templateType, data);\n    };\n\nexport const generateHTMLTemplatePDF = async (templateType, data) => {\n  try {\n    console.log('Starting server-side PDF generation with data:', data);\n    \n    // Get the API base URL from the environment\n    const apiBaseUrl = process.env.NODE_ENV === 'development' \n      ? \"http://localhost:5000/api\" \n      : \"https://landd-app-backend1.onrender.com/api\";\n    \n    const requestUrl = `${apiBaseUrl}/pdf/generate-asbestos-clearance?t=${Date.now()}`;\n    console.log('Calling backend URL:', requestUrl);\n\n    // Call the server-side PDF generation endpoint with cache busting\n    const response = await fetch(requestUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      },\n      body: JSON.stringify({ clearanceData: data })\n    });\n\n    console.log('Response status:', response.status);\n    console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to generate PDF');\n    }\n\n    // Get the PDF blob\n    const pdfBlob = await response.blob();\n    console.log('PDF blob size:', pdfBlob.size, 'bytes');\n\n    // Create a download link\n    const url = window.URL.createObjectURL(pdfBlob);\n    const link = document.createElement('a');\n    link.href = url;\n\n    // Generate filename\n    const fileName = `asbestos-clearance-${data.projectId?.name || 'report'}-${new Date().toISOString().split('T')[0]}.pdf`;\n    link.download = fileName;\n\n    // Trigger download\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    // Clean up\n    window.URL.revokeObjectURL(url);\n    \n    console.log('PDF generation completed successfully:', fileName);\n    return fileName;\n    \n  } catch (error) {\n    console.error(\"Error generating HTML template PDF:\", error);\n    console.error(\"Error stack:\", error.stack);\n    throw error;\n  }\n}; ","import axios from './axios';\r\n\r\nconst API_BASE_URL = '/asbestos-clearances';\r\n\r\nconst asbestosClearanceService = {\r\n  // Get all asbestos clearances with optional filters\r\n  getAll: async (params = {}) => {\r\n    const response = await axios.get(API_BASE_URL, { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Get single asbestos clearance by ID\r\n  getById: async (id) => {\r\n    const response = await axios.get(`${API_BASE_URL}/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create new asbestos clearance\r\n  create: async (clearanceData) => {\r\n    const response = await axios.post(API_BASE_URL, clearanceData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update asbestos clearance\r\n  update: async (id, clearanceData) => {\r\n    const response = await axios.put(`${API_BASE_URL}/${id}`, clearanceData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete asbestos clearance\r\n  delete: async (id) => {\r\n    const response = await axios.delete(`${API_BASE_URL}/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update status only\r\n  updateStatus: async (id, status) => {\r\n    const response = await axios.patch(`${API_BASE_URL}/${id}/status`, { status });\r\n    return response.data;\r\n  },\r\n\r\n  // Get statistics\r\n  getStats: async () => {\r\n    const response = await axios.get(`${API_BASE_URL}/stats/overview`);\r\n    return response.data;\r\n  },\r\n\r\n  // Search clearances\r\n  search: async (searchTerm, filters = {}) => {\r\n    const params = {\r\n      search: searchTerm,\r\n      ...filters\r\n    };\r\n    const response = await axios.get(API_BASE_URL, { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Get clearances by status\r\n  getByStatus: async (status) => {\r\n    const response = await axios.get(API_BASE_URL, { \r\n      params: { status } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get clearances by asbestos removalist\r\n  getByRemovalist: async (asbestosRemovalist) => {\r\n    const response = await axios.get(API_BASE_URL, { \r\n      params: { asbestosRemovalist } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Upload air monitoring report\r\n  uploadAirMonitoringReport: async (id, reportData) => {\r\n    const response = await axios.post(`${API_BASE_URL}/${id}/air-monitoring-report`, reportData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get clearance items\r\n  getItems: async (clearanceId) => {\r\n    const response = await axios.get(`${API_BASE_URL}/${clearanceId}/items`);\r\n    return response.data;\r\n  },\r\n\r\n  // Add clearance item\r\n  addItem: async (clearanceId, itemData) => {\r\n    const response = await axios.post(`${API_BASE_URL}/${clearanceId}/items`, itemData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update clearance item\r\n  updateItem: async (clearanceId, itemId, itemData) => {\r\n    const response = await axios.put(`${API_BASE_URL}/${clearanceId}/items/${itemId}`, itemData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete clearance item\r\n  deleteItem: async (clearanceId, itemId) => {\r\n    const response = await axios.delete(`${API_BASE_URL}/${clearanceId}/items/${itemId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get air monitoring reports for a project\r\n  getAirMonitoringReports: async (projectId) => {\r\n    const response = await axios.get(`${API_BASE_URL}/air-monitoring-reports/${projectId}`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default asbestosClearanceService; ","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5zM19 9h-4V3H9v6H5l7 7z\"\n}), 'Download');","import axiosInstance from \"./axios\";\r\n\r\nconst projectService = {\r\n  getAll: async (params = {}) => {\r\n    const response = await axiosInstance.get(\"/projects\", { params });\r\n    return response.data;\r\n  },\r\n  getById: (id) => axiosInstance.get(`/projects/${id}`),\r\n  create: (data) => axiosInstance.post(\"/projects\", data),\r\n  update: (id, data) => axiosInstance.put(`/projects/${id}`, data),\r\n  delete: (id) => axiosInstance.delete(`/projects/${id}`),\r\n};\r\n\r\nexport default projectService; ","import React, { useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  CircularProgress,\r\n  Alert,\r\n  Chip,\r\n  IconButton,\r\n  Tooltip,\r\n  Button,\r\n} from \"@mui/material\";\r\nimport {\r\n  Visibility as VisibilityIcon,\r\n  Download as DownloadIcon,\r\n  Print as PrintIcon,\r\n  ArrowBack as ArrowBackIcon,\r\n} from \"@mui/icons-material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { tokens } from \"../../theme\";\r\nimport projectService from \"../../services/projectService\";\r\nimport asbestosClearanceReportService from \"../../services/asbestosClearanceReportService\";\r\nimport asbestosClearanceService from \"../../services/asbestosClearanceService\";\r\nimport asbestosRemovalJobService from \"../../services/asbestosRemovalJobService\";\r\nimport {\r\n  shiftService,\r\n  jobService,\r\n  sampleService,\r\n  clientService,\r\n} from \"../../services/api\";\r\nimport { generateShiftReport } from \"../../utils/generateShiftReport\";\r\n\r\nconst ProjectReports = () => {\r\n  const theme = useTheme();\r\n  const colors = tokens;\r\n  const { projectId } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  const [project, setProject] = useState(null);\r\n  const [reports, setReports] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    loadProjectReports();\r\n  }, [projectId]);\r\n\r\n  const loadProjectReports = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(\"\");\r\n\r\n      // Get project details\r\n      const projectResponse = await projectService.getById(projectId);\r\n      setProject(projectResponse.data);\r\n\r\n      const allReports = [];\r\n\r\n      // 1. Get asbestos clearance reports\r\n      try {\r\n        console.log(\"Fetching clearance reports for project:\", projectId);\r\n        const clearanceReports = await asbestosClearanceReportService.getAll({\r\n          projectId: projectId,\r\n        });\r\n        console.log(\"Clearance reports response:\", clearanceReports);\r\n        if (clearanceReports.reports) {\r\n          console.log(\r\n            \"Number of clearance reports found:\",\r\n            clearanceReports.reports.length\r\n          );\r\n\r\n          // Group reports by clearanceId to avoid duplicates\r\n          const clearanceGroups = {};\r\n          clearanceReports.reports.forEach((report) => {\r\n            const clearanceId = report.clearanceId?._id || report.clearanceId;\r\n            if (!clearanceGroups[clearanceId]) {\r\n              clearanceGroups[clearanceId] = {\r\n                id: clearanceId,\r\n                date: new Date(\r\n                  report.clearanceId?.clearanceDate || report.createdAt\r\n                ),\r\n                type: \"Asbestos Clearance Report\",\r\n                status: report.clearanceId?.status || \"Unknown\",\r\n                report: report,\r\n                category: \"clearance\",\r\n              };\r\n            }\r\n          });\r\n\r\n          // Add only one report per clearance\r\n          Object.values(clearanceGroups).forEach((report) => {\r\n            console.log(\"Adding clearance report:\", report.id, report.status);\r\n            allReports.push(report);\r\n          });\r\n        }\r\n      } catch (err) {\r\n        console.log(\"No clearance reports found for this project:\", err);\r\n      }\r\n\r\n      // 2. Get asbestos removal jobs - REMOVED: No longer displaying removal jobs\r\n\r\n      // 3. Get air monitoring reports (shifts) - ONLY if no clearance reports exist\r\n      if (allReports.length === 0) {\r\n        try {\r\n          console.log(\r\n            \"No clearance reports found, fetching air monitoring reports for project:\",\r\n            projectId\r\n          );\r\n          // First get all jobs for this project\r\n          const jobsResponse = await jobService.getAll();\r\n          console.log(\"All jobs response:\", jobsResponse);\r\n          const projectJobs =\r\n            jobsResponse.data?.filter(\r\n              (job) =>\r\n                job.project === projectId || job.project?._id === projectId\r\n            ) || [];\r\n          console.log(\"Project jobs found:\", projectJobs.length);\r\n\r\n          // Get shifts for each job\r\n          for (const job of projectJobs) {\r\n            try {\r\n              console.log(\"Fetching shifts for job:\", job._id, job.name);\r\n              const shiftsResponse = await shiftService.getByJob(job._id);\r\n              const shifts = shiftsResponse.data || [];\r\n              console.log(\"Shifts found for job:\", job.name, shifts.length);\r\n\r\n              shifts.forEach((shift) => {\r\n                console.log(\r\n                  \"Checking shift:\",\r\n                  shift._id,\r\n                  shift.name,\r\n                  \"status:\",\r\n                  shift.status\r\n                );\r\n                // Only include shifts that have reports (analysis complete or shift complete)\r\n                if (\r\n                  shift.status === \"analysis_complete\" ||\r\n                  shift.status === \"shift_complete\" ||\r\n                  shift.reportApprovedBy\r\n                ) {\r\n                  console.log(\r\n                    \"Adding air monitoring report for shift:\",\r\n                    shift._id\r\n                  );\r\n                  allReports.push({\r\n                    id: shift._id,\r\n                    date: new Date(\r\n                      shift.reportIssueDate ||\r\n                        shift.updatedAt ||\r\n                        shift.createdAt\r\n                    ),\r\n                    type: \"Air Monitoring Report\",\r\n                    status: shift.reportApprovedBy\r\n                      ? \"Authorized\"\r\n                      : shift.status,\r\n                    report: shift,\r\n                    jobName: job.name,\r\n                    shiftName: shift.name,\r\n                    category: \"air-monitoring\",\r\n                  });\r\n                }\r\n              });\r\n            } catch (err) {\r\n              console.log(`No shifts found for job ${job._id}:`, err);\r\n            }\r\n          }\r\n        } catch (err) {\r\n          console.log(\"No air monitoring reports found for this project:\", err);\r\n        }\r\n      }\r\n\r\n      // Sort reports by date (newest first) and take only the most recent one\r\n      allReports.sort((a, b) => b.date - a.date);\r\n\r\n      // Only keep the most recent report\r\n      const finalReports = allReports.length > 0 ? [allReports[0]] : [];\r\n\r\n      console.log(\"Final reports array (most recent only):\", finalReports);\r\n      console.log(\r\n        \"Reports by type:\",\r\n        finalReports.reduce((acc, report) => {\r\n          acc[report.type] = (acc[report.type] || 0) + 1;\r\n          return acc;\r\n        }, {})\r\n      );\r\n\r\n      setReports(finalReports);\r\n    } catch (err) {\r\n      console.error(\"Error loading project reports:\", err);\r\n      setError(\"Failed to load reports for this project\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleViewReport = async (report) => {\r\n    try {\r\n      if (report.type === \"Air Monitoring Report\") {\r\n        // Generate air monitoring report\r\n        const shift = report.report;\r\n        const jobResponse = await jobService.getById(\r\n          shift.job?._id || shift.job\r\n        );\r\n        const samplesResponse = await sampleService.getByShift(shift._id);\r\n\r\n        // Ensure we have the complete sample data including analysis\r\n        const samplesWithAnalysis = await Promise.all(\r\n          samplesResponse.data.map(async (sample) => {\r\n            if (!sample.analysis) {\r\n              // If analysis data is missing, fetch the complete sample data\r\n              const completeSample = await sampleService.getById(sample._id);\r\n              return completeSample.data;\r\n            }\r\n            return sample;\r\n          })\r\n        );\r\n\r\n        // Ensure project and client are fully populated\r\n        let project = jobResponse.data.project;\r\n        if (project && typeof project === \"string\") {\r\n          const projectResponse = await projectService.getById(project);\r\n          project = projectResponse.data;\r\n        }\r\n        if (project && project.client && typeof project.client === \"string\") {\r\n          const clientResponse = await clientService.getById(project.client);\r\n          project.client = clientResponse.data;\r\n        }\r\n\r\n        generateShiftReport({\r\n          shift: shift,\r\n          job: jobResponse.data,\r\n          samples: samplesWithAnalysis,\r\n          project: project,\r\n          openInNewTab: true, // Open in new tab for viewing\r\n        });\r\n      } else if (report.type === \"Asbestos Clearance Report\") {\r\n        // Generate asbestos clearance report\r\n        const clearanceReport = report.report;\r\n\r\n        // Extract the actual clearance ID - it could be a string or an object with _id\r\n        const clearanceId =\r\n          typeof clearanceReport.clearanceId === \"object\"\r\n            ? clearanceReport.clearanceId._id\r\n            : clearanceReport.clearanceId;\r\n\r\n        // Open PDF directly in browser using the existing endpoint\r\n        const api = require(\"../../services/axios\").default;\r\n        const response = await api.post(\r\n          \"/pdf/generate-asbestos-clearance\",\r\n          {\r\n            clearanceData: { _id: clearanceId },\r\n          },\r\n          {\r\n            responseType: \"blob\",\r\n          }\r\n        );\r\n\r\n        // Create blob URL and open in new tab\r\n        const blob = new Blob([response.data], { type: \"application/pdf\" });\r\n        const url = window.URL.createObjectURL(blob);\r\n        window.open(url, \"_blank\");\r\n\r\n        console.log(\"Asbestos clearance PDF opened in browser\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error viewing report:\", err);\r\n      setError(\"Failed to view report\");\r\n    }\r\n  };\r\n\r\n  const handleDownloadReport = async (report) => {\r\n    try {\r\n      if (report.type === \"Air Monitoring Report\") {\r\n        // Generate and download air monitoring report\r\n        const shift = report.report;\r\n        const jobResponse = await jobService.getById(\r\n          shift.job?._id || shift.job\r\n        );\r\n        const samplesResponse = await sampleService.getByShift(shift._id);\r\n\r\n        // Ensure we have the complete sample data including analysis\r\n        const samplesWithAnalysis = await Promise.all(\r\n          samplesResponse.data.map(async (sample) => {\r\n            if (!sample.analysis) {\r\n              // If analysis data is missing, fetch the complete sample data\r\n              const completeSample = await sampleService.getById(sample._id);\r\n              return completeSample.data;\r\n            }\r\n            return sample;\r\n          })\r\n        );\r\n\r\n        // Ensure project and client are fully populated\r\n        let project = jobResponse.data.project;\r\n        if (project && typeof project === \"string\") {\r\n          const projectResponse = await projectService.getById(project);\r\n          project = projectResponse.data;\r\n        }\r\n        if (project && project.client && typeof project.client === \"string\") {\r\n          const clientResponse = await clientService.getById(project.client);\r\n          project.client = clientResponse.data;\r\n        }\r\n\r\n        generateShiftReport({\r\n          shift: shift,\r\n          job: jobResponse.data,\r\n          samples: samplesWithAnalysis,\r\n          project: project,\r\n          openInNewTab: false, // Download instead of opening in new tab\r\n        });\r\n      } else if (report.type === \"Asbestos Clearance Report\") {\r\n        // Generate and download asbestos clearance report\r\n        const clearanceReport = report.report;\r\n\r\n        // Get the full clearance data with populated project\r\n        const asbestosClearanceService =\r\n          require(\"../../services/asbestosClearanceService\").default;\r\n\r\n        // Extract the actual clearance ID - it could be a string or an object with _id\r\n        const clearanceId =\r\n          typeof clearanceReport.clearanceId === \"object\"\r\n            ? clearanceReport.clearanceId._id\r\n            : clearanceReport.clearanceId;\r\n\r\n        const fullClearance = await asbestosClearanceService.getById(\r\n          clearanceId\r\n        );\r\n\r\n        // Use the HTML template-based PDF generation\r\n        const {\r\n          generateHTMLTemplatePDF,\r\n        } = require(\"../../utils/templatePDFGenerator\");\r\n        const fileName = await generateHTMLTemplatePDF(\r\n          \"asbestos-clearance\", // template type\r\n          fullClearance // clearance data\r\n        );\r\n\r\n        console.log(\r\n          \"Asbestos clearance PDF downloaded successfully:\",\r\n          fileName\r\n        );\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error downloading report:\", err);\r\n      setError(\"Failed to download report\");\r\n    }\r\n  };\r\n\r\n  const handlePrintReport = async (report) => {\r\n    try {\r\n      if (report.type === \"Air Monitoring Report\") {\r\n        // Generate and print air monitoring report\r\n        const shift = report.report;\r\n        const jobResponse = await jobService.getById(\r\n          shift.job?._id || shift.job\r\n        );\r\n        const samplesResponse = await sampleService.getByShift(shift._id);\r\n\r\n        // Ensure we have the complete sample data including analysis\r\n        const samplesWithAnalysis = await Promise.all(\r\n          samplesResponse.data.map(async (sample) => {\r\n            if (!sample.analysis) {\r\n              // If analysis data is missing, fetch the complete sample data\r\n              const completeSample = await sampleService.getById(sample._id);\r\n              return completeSample.data;\r\n            }\r\n            return sample;\r\n          })\r\n        );\r\n\r\n        // Ensure project and client are fully populated\r\n        let project = jobResponse.data.project;\r\n        if (project && typeof project === \"string\") {\r\n          const projectResponse = await projectService.getById(project);\r\n          project = projectResponse.data;\r\n        }\r\n        if (project && project.client && typeof project.client === \"string\") {\r\n          const clientResponse = await clientService.getById(project.client);\r\n          project.client = clientResponse.data;\r\n        }\r\n\r\n        // Generate report and open in new tab, then trigger print\r\n        generateShiftReport({\r\n          shift: shift,\r\n          job: jobResponse.data,\r\n          samples: samplesWithAnalysis,\r\n          project: project,\r\n          openInNewTab: true, // Open in new tab for printing\r\n        });\r\n\r\n        // Wait a moment for the PDF to load, then trigger print\r\n        setTimeout(() => {\r\n          window.print();\r\n        }, 1000);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error printing report:\", err);\r\n      setError(\"Failed to print report\");\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status?.toLowerCase()) {\r\n      case \"complete\":\r\n      case \"completed\":\r\n        return \"success\";\r\n      case \"in progress\":\r\n      case \"in_progress\":\r\n        return \"warning\";\r\n      case \"pending\":\r\n        return \"info\";\r\n      case \"cancelled\":\r\n        return \"error\";\r\n      default:\r\n        return \"default\";\r\n    }\r\n  };\r\n\r\n  const getCategoryColor = (category) => {\r\n    switch (category) {\r\n      case \"air-monitoring\":\r\n        return \"primary\";\r\n      case \"clearance\":\r\n        return \"secondary\";\r\n      case \"removal\":\r\n        return \"info\";\r\n      default:\r\n        return \"default\";\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ p: 3, textAlign: \"center\" }}>\r\n        <CircularProgress />\r\n        <Typography sx={{ mt: 2 }}>Loading project reports...</Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Box sx={{ p: 3 }}>\r\n        <Alert severity=\"error\">{error}</Alert>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      {/* Header */}\r\n      <Box sx={{ display: \"flex\", alignItems: \"center\", mb: 3 }}>\r\n        <IconButton onClick={() => navigate(\"/reports\")} sx={{ mr: 2 }}>\r\n          <ArrowBackIcon />\r\n        </IconButton>\r\n        <Box>\r\n          <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n            Project Reports\r\n          </Typography>\r\n          {project && (\r\n            <Typography variant=\"h6\" color=\"text.secondary\">\r\n              {project.projectID} - {project.name}\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Reports Table */}\r\n      <Paper sx={{ p: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          All Reports ({reports.length})\r\n        </Typography>\r\n\r\n        {reports.length > 0 ? (\r\n          <TableContainer>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow sx={{ backgroundColor: colors.primary[700] }}>\r\n                  <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }}>\r\n                    Date\r\n                  </TableCell>\r\n                  <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }}>\r\n                    Report Type\r\n                  </TableCell>\r\n                  <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }}>\r\n                    Status\r\n                  </TableCell>\r\n\r\n                  <TableCell\r\n                    sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                    align=\"center\"\r\n                  >\r\n                    Actions\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {reports.map((report) => (\r\n                  <TableRow key={report.id} hover>\r\n                    <TableCell>\r\n                      {report.date.toLocaleDateString(\"en-GB\")}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Box>\r\n                        <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                          {report.type}\r\n                        </Typography>\r\n                        {report.jobName && (\r\n                          <Typography variant=\"caption\" color=\"text.secondary\">\r\n                            {report.jobName} • {report.shiftName}\r\n                          </Typography>\r\n                        )}\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Chip\r\n                        label={report.status}\r\n                        color={getStatusColor(report.status)}\r\n                        size=\"small\"\r\n                      />\r\n                    </TableCell>\r\n\r\n                    <TableCell align=\"center\">\r\n                      <Box\r\n                        sx={{\r\n                          display: \"flex\",\r\n                          gap: 1,\r\n                          justifyContent: \"center\",\r\n                        }}\r\n                      >\r\n                        <Tooltip title=\"View Report\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => handleViewReport(report)}\r\n                            color=\"primary\"\r\n                          >\r\n                            <VisibilityIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Download Report\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => handleDownloadReport(report)}\r\n                            color=\"secondary\"\r\n                          >\r\n                            <DownloadIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Print Report\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => handlePrintReport(report)}\r\n                            color=\"info\"\r\n                          >\r\n                            <PrintIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </Box>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        ) : (\r\n          <Box sx={{ textAlign: \"center\", py: 4 }}>\r\n            <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\r\n              No Reports Found\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              No reports have been generated for this project yet.\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ProjectReports;\r\n"],"names":["createSvgIcon","_jsx","d","BASE_URL","getAll","async","params","arguments","length","undefined","api","get","data","getByClearanceId","concat","clearanceId","getById","id","create","post","update","put","delete","generateTemplatePDF","template","sampleData","replacePlaceholders","doc","jsPDF","pageWidth","internal","pageSize","getWidth","pageHeight","getHeight","margin","contentWidth","y","addText","text","fontSize","fontStyle","spacing","setFontSize","setFont","lines","splitTextToSize","maxWidth","addHeader","standardSections","frontCoverTitle","frontCoverSubtitle","companyDetails","Object","entries","forEach","_ref","key","value","label","charAt","toUpperCase","slice","replace","inspectionDetailsTitle","inspectionIntroduction","inspectionSpecifics","tableIntroduction","row","index","isHeader","colWidths","x","cell","colIndex","addPage","clearanceCertificationTitle","clearanceCertificationText","riskAssessmentText","contactText","behalfText","signatureTitle","backgroundTitle","backgroundIntroduction","bulletPoint1","bulletPoint2","requirementsText","bulletPoint3","bulletPoint4","bulletPoint5","legislativeTitle","legislativeIntroduction","legislativePoint1","legislativePoint2","legislativePoint3","limitationsTitle","limitationsText","setLineWidth","line","footerText","fileName","Date","toISOString","split","save","generateHTMLPDF","templateType","generateHTMLTemplatePDF","_data$projectId","console","log","requestUrl","now","response","fetch","method","headers","localStorage","getItem","body","JSON","stringify","clearanceData","status","fromEntries","ok","errorData","json","Error","error","pdfBlob","blob","size","url","window","URL","createObjectURL","link","document","createElement","href","projectId","name","download","appendChild","click","removeChild","revokeObjectURL","stack","API_BASE_URL","axios","updateStatus","patch","getStats","search","searchTerm","filters","_objectSpread","getByStatus","getByRemovalist","asbestosRemovalist","uploadAirMonitoringReport","reportData","getItems","addItem","itemData","updateItem","itemId","deleteItem","getAirMonitoringReports","axiosInstance","ProjectReports","useTheme","colors","tokens","useParams","navigate","useNavigate","project","setProject","useState","reports","setReports","loading","setLoading","setError","useEffect","loadProjectReports","projectResponse","projectService","allReports","clearanceReports","asbestosClearanceReportService","clearanceGroups","report","_report$clearanceId","_id","_report$clearanceId2","_report$clearanceId3","date","clearanceDate","createdAt","type","category","values","push","err","_jobsResponse$data","jobsResponse","jobService","projectJobs","filter","job","_job$project","shifts","shiftService","getByJob","shift","reportApprovedBy","reportIssueDate","updatedAt","jobName","shiftName","sort","a","b","finalReports","reduce","acc","getStatusColor","toLowerCase","_jsxs","Box","sx","p","textAlign","children","CircularProgress","Typography","mt","Alert","severity","display","alignItems","mb","IconButton","onClick","mr","ArrowBackIcon","variant","component","gutterBottom","color","projectID","Paper","TableContainer","Table","TableHead","TableRow","backgroundColor","primary","TableCell","fontWeight","align","TableBody","map","hover","toLocaleDateString","Chip","gap","justifyContent","Tooltip","title","_shift$job","jobResponse","samplesResponse","sampleService","getByShift","samplesWithAnalysis","Promise","all","sample","analysis","client","clientResponse","clientService","generateShiftReport","samples","openInNewTab","clearanceReport","require","responseType","Blob","open","handleViewReport","VisibilityIcon","_shift$job2","asbestosClearanceService","fullClearance","handleDownloadReport","DownloadIcon","_shift$job3","setTimeout","print","handlePrintReport","PrintIcon","py"],"sourceRoot":""}