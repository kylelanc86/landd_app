{"version":3,"file":"static/js/644.12e82868.chunk.js","mappings":"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","sources":["scenes/air-monitoring/analysis.jsx"],"sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useRef,\n  useMemo,\n  useCallback,\n} from \"react\";\nimport {\n  Box,\n  Typography,\n  Button,\n  TextField,\n  Stack,\n  useTheme,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Radio,\n  RadioGroup,\n  FormControlLabel,\n} from \"@mui/material\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport { sampleService, shiftService } from \"../../services/api\";\nimport { userService } from \"../../services/api\";\nimport { FixedSizeList as List } from \"react-window\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\n\nconst SAMPLES_KEY = \"ldc_samples\";\nconst ANALYSIS_PROGRESS_KEY = \"ldc_analysis_progress\";\n\n// Memoized Sample Form Component\nconst SampleForm = React.memo(\n  ({\n    sample,\n    analysis,\n    onAnalysisChange,\n    onFibreCountChange,\n    onKeyDown,\n    onClearTable,\n    isFilterUncountable,\n    calculateConcentration,\n    getReportedConcentration,\n    inputRefs,\n    isReadOnly,\n  }) => {\n    const theme = useTheme();\n\n    // Memoize the fibre counts table to prevent unnecessary re-renders\n    const fibreCountsTable = useMemo(\n      () => (\n        <TableContainer>\n          <Table size=\"small\" sx={{ tableLayout: \"fixed\" }}>\n            <TableHead>\n              <TableRow>\n                <TableCell sx={{ width: \"80px\" }}>Range</TableCell>\n                {Array.from({ length: 20 }, (_, i) => (\n                  <TableCell\n                    key={i}\n                    align=\"center\"\n                    sx={{ width: \"40px\", p: 0.5 }}\n                  >\n                    {i + 1}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {analysis.fibreCounts.map((row, rowIndex) => (\n                <TableRow key={rowIndex}>\n                  <TableCell sx={{ p: 0.5 }}>\n                    {`${rowIndex * 20 + 1}-${(rowIndex + 1) * 20}`}\n                  </TableCell>\n                  {row.map((cell, colIndex) => (\n                    <TableCell key={colIndex} align=\"center\" sx={{ p: 0.5 }}>\n                      <TextField\n                        type=\"text\"\n                        value={cell}\n                        onChange={(e) =>\n                          onFibreCountChange(\n                            sample._id,\n                            rowIndex,\n                            colIndex,\n                            e.target.value\n                          )\n                        }\n                        onKeyDown={(e) =>\n                          onKeyDown(e, sample._id, rowIndex, colIndex)\n                        }\n                        size=\"small\"\n                        disabled={isFilterUncountable(sample._id) || isReadOnly}\n                        inputRef={(el) => {\n                          inputRefs.current[\n                            `${sample._id}-${rowIndex}-${colIndex}`\n                          ] = el;\n                        }}\n                        sx={{\n                          width: \"40px\",\n                          \"& .MuiInputBase-input\": {\n                            p: 0.5,\n                            textAlign: \"center\",\n                          },\n                          \"& .MuiInputBase-input.Mui-disabled\": {\n                            WebkitTextFillColor: \"rgba(0, 0, 0, 0.6)\",\n                          },\n                        }}\n                      />\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n              <TableRow>\n                <TableCell colSpan={21}>\n                  <Stack direction=\"row\" spacing={4} justifyContent=\"center\">\n                    <Typography>\n                      Fibres Counted: {analysis.fibresCounted || 0}\n                    </Typography>\n                    <Typography>\n                      Fields Counted: {analysis.fieldsCounted || 0}\n                    </Typography>\n                  </Stack>\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell colSpan={21}>\n                  <Stack\n                    direction=\"row\"\n                    spacing={4}\n                    justifyContent=\"center\"\n                    sx={{ mt: 2 }}\n                  >\n                    <Box>\n                      <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                        Calculated Concentration\n                      </Typography>\n                      <Typography variant=\"h4\">\n                        {calculateConcentration(sample._id) || \"N/A\"} fibres/mL\n                      </Typography>\n                    </Box>\n                    <Box>\n                      <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                        Reported Concentration\n                      </Typography>\n                      <Typography variant=\"h4\">\n                        {getReportedConcentration(sample._id)} fibres/mL\n                      </Typography>\n                    </Box>\n                  </Stack>\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </TableContainer>\n      ),\n      [\n        analysis,\n        sample._id,\n        onFibreCountChange,\n        onKeyDown,\n        isFilterUncountable,\n        calculateConcentration,\n        getReportedConcentration,\n      ]\n    );\n\n    return (\n      <Paper sx={{ p: 3 }}>\n        <Stack spacing={3}>\n          <Typography variant=\"h3\">\n            {sample.fullSampleID} : Cowl {sample.cowlNo}\n          </Typography>\n          <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={3}>\n            <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={3}>\n              {/* Edges/Distribution and Background Dust only */}\n              <FormControl component=\"fieldset\">\n                <Typography variant=\"subtitle1\" sx={{ mb: 1 }}>\n                  Edges/Distribution\n                </Typography>\n                <RadioGroup\n                  row\n                  value={analysis.edgesDistribution || \"\"}\n                  onChange={(e) =>\n                    onAnalysisChange(\n                      sample._id,\n                      \"edgesDistribution\",\n                      e.target.value\n                    )\n                  }\n                >\n                  <FormControlLabel\n                    value=\"pass\"\n                    control={<Radio />}\n                    label=\"Pass\"\n                    disabled={isReadOnly}\n                  />\n                  <FormControlLabel\n                    value=\"fail\"\n                    control={<Radio />}\n                    label={<span style={{ color: \"red\" }}>Fail</span>}\n                    disabled={isReadOnly}\n                  />\n                </RadioGroup>\n              </FormControl>\n              <Box sx={{ width: 24 }} />\n              <FormControl component=\"fieldset\">\n                <Typography variant=\"subtitle1\" sx={{ mb: 1 }}>\n                  Background Dust\n                </Typography>\n                <RadioGroup\n                  row\n                  value={analysis.backgroundDust || \"\"}\n                  onChange={(e) =>\n                    onAnalysisChange(\n                      sample._id,\n                      \"backgroundDust\",\n                      e.target.value\n                    )\n                  }\n                >\n                  <FormControlLabel\n                    value=\"low\"\n                    control={<Radio />}\n                    label=\"Low\"\n                    disabled={isReadOnly}\n                  />\n                  <FormControlLabel\n                    value=\"medium\"\n                    control={<Radio />}\n                    label=\"Medium\"\n                    disabled={isReadOnly}\n                  />\n                  <FormControlLabel\n                    value=\"high\"\n                    control={<Radio />}\n                    label=\"High\"\n                    disabled={isReadOnly}\n                  />\n                  <FormControlLabel\n                    value=\"fail\"\n                    control={<Radio />}\n                    label={<span style={{ color: \"red\" }}>Fail</span>}\n                    disabled={isReadOnly}\n                  />\n                </RadioGroup>\n              </FormControl>\n            </Stack>\n          </Stack>\n\n          <Box sx={{ position: \"relative\" }}>\n            <Box\n              sx={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                mb: 2,\n              }}\n            >\n              <Typography variant=\"subtitle1\">Fibre Counts</Typography>\n              <Typography variant=\"subtitle2\">\"Spacebar\" = 10 zeros, \"/\" = half fibre</Typography>\n\n              \n              {!isReadOnly && (\n                <Button\n                  startIcon={<ClearIcon />}\n                  onClick={() => onClearTable(sample._id)}\n                  disabled={isFilterUncountable(sample._id)}\n                  size=\"small\"\n                  color=\"error\"\n                >\n                  Clear\n                </Button>\n              )}\n            </Box>\n            {isFilterUncountable(sample._id) && (\n              <Box\n                sx={{\n                  position: \"absolute\",\n                  top: \"50%\",\n                  left: \"50%\",\n                  transform: \"translate(-50%, -50%)\",\n                  zIndex: 1,\n                  pointerEvents: \"none\",\n                }}\n              >\n                <Typography\n                  variant=\"h4\"\n                  sx={{\n                    color: \"error.main\",\n                    fontWeight: \"bold\",\n                    textShadow: \"2px 2px 4px rgba(0,0,0,0.2)\",\n                  }}\n                >\n                  Filter Uncountable\n                </Typography>\n              </Box>\n            )}\n            {fibreCountsTable}\n          </Box>\n        </Stack>\n      </Paper>\n    );\n  }\n);\n\nconst Analysis = () => {\n  const theme = useTheme();\n  const { shiftId } = useParams();\n  const navigate = useNavigate();\n  const [samples, setSamples] = useState([]);\n  const [analysisDetails, setAnalysisDetails] = useState({\n    microscope: \"\",\n    testSlide: \"\",\n    testSlideLines: \"\",\n  });\n  const [sampleAnalyses, setSampleAnalyses] = useState({});\n  const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);\n  const [selectedSampleId, setSelectedSampleId] = useState(null);\n  const inputRefs = useRef({});\n  const [isAnalysisComplete, setIsAnalysisComplete] = useState(false);\n  const [cancelDialogOpen, setCancelDialogOpen] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isRendered, setIsRendered] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [analysedBy, setAnalysedBy] = useState(\"\");\n  const [shiftStatus, setShiftStatus] = useState(\"\");\n\n  // Monitor initial render time\n  useEffect(() => {\n    const renderStart = performance.now();\n    setIsRendered(true);\n    console.log(`Initial render took ${performance.now() - renderStart}ms`);\n  }, []);\n\n  // Load samples and in-progress analysis data\n  useEffect(() => {\n    let isMounted = true;\n    const fetchData = async () => {\n      const startTime = performance.now();\n      try {\n        setLoading(true);\n\n        console.log(\"Starting data fetch...\");\n        const fetchStart = performance.now();\n\n        // Always fetch fresh data\n        const samplesResponse = await sampleService.getByShift(shiftId);\n        const shiftResponse = await shiftService.getById(shiftId);\n\n        if (!isMounted) return;\n\n        // Set shift status\n        setShiftStatus(shiftResponse.data.status);\n\n        console.log(`API fetch took ${performance.now() - fetchStart}ms`);\n        console.log(\"Sample count:\", samplesResponse.data.length);\n\n        const sortStart = performance.now();\n        // Sort samples by the numeric part after the last hyphen\n        const sortedSamples = samplesResponse.data.sort((a, b) => {\n          const aMatch = a.fullSampleID.match(/-(\\d+)$/);\n          const bMatch = b.fullSampleID.match(/-(\\d+)$/);\n          const aNum = aMatch ? parseInt(aMatch[1], 10) : 0;\n          const bNum = bMatch ? parseInt(bMatch[1], 10) : 0;\n          return aNum - bNum;\n        });\n        console.log(`Sorting took ${performance.now() - sortStart}ms`);\n\n        const initStart = performance.now();\n        // Initialize analyses for each sample\n        const initialAnalyses = {};\n        sortedSamples.forEach((sample) => {\n          if (sample.analysis) {\n            initialAnalyses[sample._id] = {\n              microscope: sample.analysis.microscope || \"\",\n              testSlide: sample.analysis.testSlide || \"\",\n              testSlideLines: sample.analysis.testSlideLines || \"\",\n              edgesDistribution: sample.analysis.edgesDistribution || \"\",\n              backgroundDust: sample.analysis.backgroundDust || \"\",\n              fibreCounts:\n                Array.isArray(sample.analysis.fibreCounts) &&\n                sample.analysis.fibreCounts.length === 5\n                  ? sample.analysis.fibreCounts.map((row) =>\n                      Array.isArray(row) && row.length === 20\n                        ? row\n                        : Array(20).fill(\"\")\n                    )\n                  : Array(5)\n                      .fill()\n                      .map(() => Array(20).fill(\"\")),\n              fibresCounted: sample.analysis.fibresCounted || 0,\n              fieldsCounted: sample.analysis.fieldsCounted || 0,\n            };\n          } else {\n            initialAnalyses[sample._id] = {\n              microscope: \"\",\n              testSlide: \"\",\n              testSlideLines: \"\",\n              edgesDistribution: \"\",\n              backgroundDust: \"\",\n              fibreCounts: Array(5)\n                .fill()\n                .map(() => Array(20).fill(\"\")),\n              fibresCounted: 0,\n              fieldsCounted: 0,\n            };\n          }\n        });\n\n        // Set analysis details from the first sample that has them\n        const firstSampleWithAnalysis = sortedSamples.find(\n          (s) => s.analysis?.microscope\n        );\n        if (firstSampleWithAnalysis?.analysis) {\n          setAnalysisDetails({\n            microscope: firstSampleWithAnalysis.analysis.microscope || \"\",\n            testSlide: firstSampleWithAnalysis.analysis.testSlide || \"\",\n            testSlideLines:\n              firstSampleWithAnalysis.analysis.testSlideLines || \"\",\n          });\n        }\n\n        // Set analyst from shift data\n        if (shiftResponse.data?.analysedBy) {\n          setAnalysedBy(shiftResponse.data.analysedBy);\n        }\n\n        console.log(`Initialization took ${performance.now() - initStart}ms`);\n\n        const storageStart = performance.now();\n        // Load in-progress analysis data if present\n        const progressData = localStorage.getItem(ANALYSIS_PROGRESS_KEY);\n        if (progressData) {\n          const parsed = JSON.parse(progressData);\n          if (parsed.shiftId === shiftId) {\n            // Only merge if we don't have existing data\n            if (!firstSampleWithAnalysis?.analysis) {\n              setAnalysisDetails(parsed.analysisDetails);\n            }\n            // Merge saved analyses with all samples (preserve backend, add new)\n            const mergedAnalyses = { ...initialAnalyses };\n            Object.keys(parsed.sampleAnalyses).forEach((sampleId) => {\n              if (mergedAnalyses[sampleId]) {\n                mergedAnalyses[sampleId] = {\n                  ...mergedAnalyses[sampleId],\n                  ...parsed.sampleAnalyses[sampleId],\n                };\n              }\n            });\n            setSampleAnalyses(mergedAnalyses);\n          } else {\n            setSampleAnalyses(initialAnalyses);\n          }\n        } else {\n          setSampleAnalyses(initialAnalyses);\n        }\n        console.log(\n          `Storage operations took ${performance.now() - storageStart}ms`\n        );\n\n        setSamples(sortedSamples);\n        setError(null);\n\n        console.log(\n          `Total data operations took ${performance.now() - startTime}ms`\n        );\n      } catch (err) {\n        if (!isMounted) return;\n        console.error(\"Error fetching data:\", err);\n        setError(\"Failed to load data. Please try again later.\");\n      } finally {\n        if (isMounted) {\n          setLoading(false);\n        }\n      }\n    };\n\n    fetchData();\n\n    // Cleanup function\n    return () => {\n      isMounted = false;\n    };\n  }, [shiftId]);\n\n  // Monitor render time when samples change\n  useEffect(() => {\n    if (samples.length > 0) {\n      const renderStart = performance.now();\n      requestAnimationFrame(() => {\n        console.log(`Samples render took ${performance.now() - renderStart}ms`);\n      });\n    }\n  }, [samples]);\n\n  // Fetch users for analyst dropdown\n  useEffect(() => {\n    userService.getAll().then((res) => {\n      setUsers(res.data || []);\n    });\n  }, []);\n\n  const handleAnalysisDetailsChange = (e) => {\n    setAnalysisDetails({\n      ...analysisDetails,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  // Memoize handlers to prevent unnecessary re-renders\n  const handleSampleAnalysisChange = useCallback((sampleId, field, value) => {\n    setSampleAnalyses((prev) => ({\n      ...prev,\n      [sampleId]: {\n        ...prev[sampleId],\n        [field]: value,\n      },\n    }));\n  }, []);\n\n  const handleFibreCountChange = useCallback(\n    (sampleId, rowIndex, colIndex, value) => {\n      const newValue = value === \"/\" ? \"0.5\" : value;\n      if (isNaN(newValue) && value !== \"\") return;\n\n      setSampleAnalyses((prev) => {\n        const newAnalyses = { ...prev };\n        const newFibreCounts = [...newAnalyses[sampleId].fibreCounts];\n        newFibreCounts[rowIndex][colIndex] = newValue;\n\n        // Calculate fibres counted and fields counted\n        let fibresCounted = 0;\n        let fieldsCounted = 0;\n        newFibreCounts.forEach((row) => {\n          row.forEach((cell) => {\n            if (cell !== \"\") {\n              const numValue = parseFloat(cell);\n              if (!isNaN(numValue)) {\n                fibresCounted += numValue;\n                fieldsCounted += 1;\n              }\n            }\n          });\n        });\n\n        newAnalyses[sampleId] = {\n          ...newAnalyses[sampleId],\n          fibreCounts: newFibreCounts,\n          fibresCounted: parseFloat(fibresCounted.toFixed(1)),\n          fieldsCounted,\n        };\n        return newAnalyses;\n      });\n\n      // Move to next cell\n      const nextCol = colIndex + 1;\n      const nextRow = rowIndex;\n      if (nextCol < 20) {\n        // Move to next column in same row\n        const nextInput =\n          inputRefs.current[`${sampleId}-${nextRow}-${nextCol}`];\n        if (nextInput) {\n          nextInput.focus();\n        }\n      } else if (rowIndex < 4) {\n        // Move to first column of next row\n        const nextInput = inputRefs.current[`${sampleId}-${nextRow + 1}-0`];\n        if (nextInput) {\n          nextInput.focus();\n        }\n      }\n    },\n    []\n  );\n\n  const handleKeyDown = useCallback((e, sampleId, rowIndex, colIndex) => {\n    if (e.key === \" \") {\n      e.preventDefault();\n      setSampleAnalyses((prev) => {\n        const newAnalyses = { ...prev };\n        const newFibreCounts = [...newAnalyses[sampleId].fibreCounts];\n\n        // Fill next 10 cells with 0\n        let lastFilledRow = rowIndex;\n        let lastFilledCol = colIndex;\n        for (let i = 0; i < 10; i++) {\n          const nextCol = colIndex + i;\n          if (nextCol < 20) {\n            newFibreCounts[rowIndex][nextCol] = \"0\";\n            lastFilledRow = rowIndex;\n            lastFilledCol = nextCol;\n          } else {\n            const nextRow = rowIndex + 1;\n            if (nextRow < 5) {\n              newFibreCounts[nextRow][nextCol - 20] = \"0\";\n              lastFilledRow = nextRow;\n              lastFilledCol = nextCol - 20;\n            }\n          }\n        }\n\n        // Calculate new totals\n        let fibresCounted = 0;\n        let fieldsCounted = 0;\n        newFibreCounts.forEach((row) => {\n          row.forEach((cell) => {\n            if (cell !== \"\") {\n              const numValue = parseFloat(cell);\n              if (!isNaN(numValue)) {\n                fibresCounted += numValue;\n                fieldsCounted += 1;\n              }\n            }\n          });\n        });\n\n        newAnalyses[sampleId] = {\n          ...newAnalyses[sampleId],\n          fibreCounts: newFibreCounts,\n          fibresCounted: parseFloat(fibresCounted.toFixed(1)),\n          fieldsCounted,\n        };\n\n        // Find next empty cell after the last filled cell\n        let nextEmptyRow = lastFilledRow;\n        let nextEmptyCol = lastFilledCol + 1;\n\n        while (nextEmptyRow < 5) {\n          while (nextEmptyCol < 20) {\n            if (newFibreCounts[nextEmptyRow][nextEmptyCol] === \"\") {\n              const nextInput =\n                inputRefs.current[\n                  `${sampleId}-${nextEmptyRow}-${nextEmptyCol}`\n                ];\n              if (nextInput) {\n                setTimeout(() => {\n                  nextInput.focus();\n                }, 0);\n                break;\n              }\n            }\n            nextEmptyCol++;\n          }\n          if (nextEmptyCol < 20) break;\n          nextEmptyRow++;\n          nextEmptyCol = 0;\n        }\n\n        return newAnalyses;\n      });\n    }\n  }, []);\n\n  const handleClearTable = useCallback((sampleId) => {\n    setSelectedSampleId(sampleId);\n    setConfirmDialogOpen(true);\n  }, []);\n\n  const confirmClearTable = () => {\n    if (selectedSampleId) {\n      setSampleAnalyses((prev) => {\n        const newAnalyses = { ...prev };\n        newAnalyses[selectedSampleId] = {\n          ...newAnalyses[selectedSampleId],\n          fibreCounts: Array(5)\n            .fill()\n            .map(() => Array(20).fill(\"\")),\n          fibresCounted: 0,\n          fieldsCounted: 0,\n        };\n        return newAnalyses;\n      });\n    }\n    setConfirmDialogOpen(false);\n    setSelectedSampleId(null);\n  };\n\n  const isFilterUncountable = (sampleId) => {\n    const analysis = sampleAnalyses[sampleId];\n    return (\n      analysis?.edgesDistribution === \"fail\" ||\n      analysis?.backgroundDust === \"fail\"\n    );\n  };\n\n  const calculateDuration = (startTime, endTime) => {\n    if (!startTime || !endTime) return 0;\n\n    const start = new Date(`2000-01-01T${startTime}`);\n    const end = new Date(`2000-01-01T${endTime}`);\n\n    // Handle case where end time is on the next day\n    if (end < start) {\n      end.setDate(end.getDate() + 1);\n    }\n\n    return Math.round((end - start) / (1000 * 60));\n  };\n\n  const calculateConcentration = (sampleId) => {\n    const analysis = sampleAnalyses[sampleId];\n    const sample = samples.find((s) => s._id === sampleId);\n\n    if (!analysis || !sample) return null;\n\n    const microscopeConstant = 50000; // This will be dynamic based on microscope selection in future\n    const fibresCounted = parseFloat(analysis.fibresCounted) || 0;\n    const fieldsCounted = parseInt(analysis.fieldsCounted) || 0;\n    const averageFlowrate = parseFloat(sample.averageFlowrate) || 0;\n    const minutes = calculateDuration(sample.startTime, sample.endTime);\n\n    if (fieldsCounted === 0 || averageFlowrate === 0 || minutes === 0)\n      return null;\n\n    const fibresForCalculation = fibresCounted < 10 ? 10 : fibresCounted;\n    const concentration =\n      microscopeConstant *\n      (fibresForCalculation / fieldsCounted) *\n      (1 / (averageFlowrate * 1000 * minutes));\n\n    return parseFloat(concentration.toFixed(3));\n  };\n\n  const getReportedConcentration = (sampleId) => {\n    const analysis = sampleAnalyses[sampleId];\n    const calculatedConc = parseFloat(calculateConcentration(sampleId));\n\n    if (!calculatedConc) return \"N/A\";\n\n    if (calculatedConc < 0.0149 && analysis.fibresCounted < 10) {\n      return \"<0.01\";\n    }\n\n    return calculatedConc.toFixed(3);\n  };\n\n  const isFormComplete = () => {\n    // Check if any analysis details are filled\n    if (\n      analysisDetails.microscope ||\n      analysisDetails.testSlide ||\n      analysisDetails.testSlideLines\n    ) {\n      return true;\n    }\n\n    // Check if any sample analyses have data\n    return samples.some((sample) => {\n      const analysis = sampleAnalyses[sample._id];\n      if (!analysis) return false;\n\n      // Check if any fields are filled\n      if (analysis.edgesDistribution || analysis.backgroundDust) {\n        return true;\n      }\n\n      // Check if any fibre counts are entered\n      if (analysis.fibresCounted > 0 || analysis.fieldsCounted > 0) {\n        return true;\n      }\n\n      return false;\n    });\n  };\n\n  const handleSaveAnalysis = () => {\n    console.log(\"Save Analysis button clicked\");\n    console.log(\"Current analysis details:\", analysisDetails);\n    console.log(\"Current sample analyses:\", sampleAnalyses);\n\n    // Save in-progress data\n    const progressData = {\n      shiftId: shiftId,\n      analysisDetails,\n      sampleAnalyses,\n      timestamp: new Date().toISOString(),\n    };\n    console.log(\"Saving progress data:\", progressData);\n\n    try {\n      localStorage.setItem(ANALYSIS_PROGRESS_KEY, JSON.stringify(progressData));\n      console.log(\"Progress data saved successfully\");\n    } catch (error) {\n      console.error(\"Error saving progress data:\", error);\n    }\n  };\n\n  const handleSaveAndClose = () => {\n    console.log(\"Save and Close button clicked\");\n    // Save in-progress data\n    const progressData = {\n      shiftId: shiftId,\n      analysisDetails,\n      sampleAnalyses,\n      timestamp: new Date().toISOString(),\n    };\n    try {\n      localStorage.setItem(ANALYSIS_PROGRESS_KEY, JSON.stringify(progressData));\n      console.log(\"Progress data saved successfully\");\n      // Navigate back to samples page\n      navigate(-1);\n    } catch (error) {\n      console.error(\"Error saving progress data:\", error);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      console.log(\"Starting analysis submission...\");\n      console.log(\"Analysis Details:\", analysisDetails);\n      console.log(\"Sample Analyses:\", sampleAnalyses);\n\n      // Update each sample with its analysis data\n      const updatePromises = samples.map(async (sample) => {\n        const analysis = sampleAnalyses[sample._id];\n        if (analysis) {\n          const analysisData = {\n            analysis: {\n              microscope: analysisDetails.microscope,\n              testSlide: analysisDetails.testSlide,\n              testSlideLines: analysisDetails.testSlideLines,\n              edgesDistribution: analysis.edgesDistribution,\n              backgroundDust: analysis.backgroundDust,\n              fibreCounts: analysis.fibreCounts,\n              fibresCounted: analysis.fibresCounted,\n              fieldsCounted: analysis.fieldsCounted,\n              reportedConcentration: getReportedConcentration(sample._id),\n            },\n          };\n          console.log(\n            `Updating sample ${sample.fullSampleID} with data:`,\n            JSON.stringify(analysisData, null, 2)\n          );\n          try {\n            const response = await sampleService.update(\n              sample._id,\n              analysisData\n            );\n            console.log(\n              `Update response for ${sample.fullSampleID}:`,\n              response\n            );\n            return response;\n          } catch (error) {\n            console.error(\n              `Error updating sample ${sample.fullSampleID}:`,\n              error.response?.data || error\n            );\n            throw error;\n          }\n        }\n      });\n\n      // Wait for all sample updates to complete\n      const results = await Promise.all(updatePromises);\n      console.log(\"All sample updates completed:\", results);\n\n      // Get shift data to get job ID\n      const shiftResponse = await shiftService.getById(shiftId);\n      const shift = shiftResponse.data;\n      const jobId = shift?.job?._id;\n\n      // Update shift status to analysis_complete\n      await shiftService.update(shiftId, {\n        status: \"analysis_complete\",\n        analysedBy,\n        analysisDate: new Date().toISOString(),\n      });\n\n      // Navigate back to shifts page\n      if (jobId) {\n        navigate(`/air-monitoring/jobs/${jobId}/shifts`);\n      } else {\n        navigate(\"/air-monitoring/shifts\");\n      }\n    } catch (error) {\n      console.error(\"Error finalizing analysis:\", error);\n      setError(\"Failed to finalize analysis. Please try again.\");\n    }\n  };\n\n  const handleCancel = () => {\n    if (isFormComplete()) {\n      setCancelDialogOpen(true);\n    } else {\n      navigate(-1);\n    }\n  };\n\n  // Helper to check if all required fields are filled\n  const isAllAnalysisComplete = () => {\n    console.log(\"Checking analysis completion...\");\n\n    // Check analysis details\n    if (\n      !analysisDetails.microscope ||\n      !analysisDetails.testSlide ||\n      !analysisDetails.testSlideLines\n    ) {\n      console.log(\"Analysis details incomplete:\", {\n        microscope: analysisDetails.microscope,\n        testSlide: analysisDetails.testSlide,\n        testSlideLines: analysisDetails.testSlideLines,\n      });\n      return false;\n    }\n\n    // Check all samples\n    const incompleteSamples = samples.filter((sample) => {\n      const analysis = sampleAnalyses[sample._id];\n      if (!analysis) {\n        console.log(`No analysis found for sample ${sample.fullSampleID}`);\n        return true;\n      }\n\n      if (!analysis.edgesDistribution || !analysis.backgroundDust) {\n        console.log(\n          `Sample ${sample.fullSampleID} missing edges/distribution or background dust:`,\n          {\n            edgesDistribution: analysis.edgesDistribution,\n            backgroundDust: analysis.backgroundDust,\n          }\n        );\n        return true;\n      }\n\n      // If filter is uncountable, skip fibre counts\n      if (\n        analysis.edgesDistribution === \"fail\" ||\n        analysis.backgroundDust === \"fail\"\n      ) {\n        console.log(\n          `Sample ${sample.fullSampleID} is uncountable, skipping fibre counts`\n        );\n        return false;\n      }\n\n      // Check fibre counts\n      const hasEmptyCells = analysis.fibreCounts.some((row, rowIndex) => {\n        const emptyCells = row.filter(\n          (cell) => cell === \"\" || cell === null || typeof cell === \"undefined\"\n        );\n        if (emptyCells.length > 0) {\n          console.log(\n            `Sample ${sample.fullSampleID} has empty cells in row ${\n              rowIndex + 1\n            }:`,\n            emptyCells\n          );\n        }\n        return emptyCells.length > 0;\n      });\n\n      if (hasEmptyCells) {\n        console.log(\n          `Sample ${sample.fullSampleID} has empty fibre count cells`\n        );\n        return true;\n      }\n\n      return false;\n    });\n\n    if (incompleteSamples.length > 0) {\n      console.log(\n        \"Incomplete samples:\",\n        incompleteSamples.map((s) => s.fullSampleID)\n      );\n      return false;\n    }\n\n    console.log(\"All samples are complete!\");\n    return true;\n  };\n\n  // Render a single sample form\n  const renderSampleForm = useCallback(\n    ({ index, style }) => {\n      const sample = samples[index];\n      return (\n        <div style={style}>\n          <SampleForm\n            key={sample._id}\n            sample={sample}\n            analysis={sampleAnalyses[sample._id]}\n            onAnalysisChange={handleSampleAnalysisChange}\n            onFibreCountChange={handleFibreCountChange}\n            onKeyDown={handleKeyDown}\n            onClearTable={handleClearTable}\n            isFilterUncountable={isFilterUncountable}\n            calculateConcentration={calculateConcentration}\n            getReportedConcentration={getReportedConcentration}\n            inputRefs={inputRefs}\n            isReadOnly={shiftStatus === \"analysis_complete\"}\n          />\n        </div>\n      );\n    },\n    [\n      samples,\n      sampleAnalyses,\n      handleSampleAnalysisChange,\n      handleFibreCountChange,\n      handleKeyDown,\n      handleClearTable,\n      isFilterUncountable,\n      calculateConcentration,\n      getReportedConcentration,\n      shiftStatus,\n    ]\n  );\n\n  // Render sample forms based on count\n  const renderSampleForms = () => {\n    if (samples.length <= 5) {\n      // For small sample counts, render directly without virtualization\n      return samples.map((sample) => (\n        <SampleForm\n          key={sample._id}\n          sample={sample}\n          analysis={sampleAnalyses[sample._id]}\n          onAnalysisChange={handleSampleAnalysisChange}\n          onFibreCountChange={handleFibreCountChange}\n          onKeyDown={handleKeyDown}\n          onClearTable={handleClearTable}\n          isFilterUncountable={isFilterUncountable}\n          calculateConcentration={calculateConcentration}\n          getReportedConcentration={getReportedConcentration}\n          inputRefs={inputRefs}\n          isReadOnly={shiftStatus === \"analysis_complete\"}\n        />\n      ));\n    }\n\n    // For larger sample counts, use virtual scrolling\n    return (\n      <Box sx={{ height: \"calc(100vh - 300px)\", minHeight: \"500px\" }}>\n        <AutoSizer>\n          {({ height, width }) => (\n            <List\n              height={height}\n              width={width}\n              itemCount={samples.length}\n              itemSize={400}\n              overscanCount={2}\n            >\n              {renderSampleForm}\n            </List>\n          )}\n        </AutoSizer>\n      </Box>\n    );\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ p: { xs: 2, sm: 3, md: 4 } }}>\n        <Typography>Loading...</Typography>\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box sx={{ p: { xs: 2, sm: 3, md: 4 } }}>\n        <Typography color=\"error\">{error}</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ p: { xs: 2, sm: 3, md: 4 } }}>\n      <Button\n        startIcon={<ArrowBackIcon />}\n        onClick={() => navigate(`/air-monitoring/shift/${shiftId}/samples`)}\n        sx={{ mb: 4 }}\n      >\n        Back to Samples\n      </Button>\n\n      <Typography\n        variant=\"h2\"\n        sx={{\n          color:\n            theme.palette.mode === \"dark\"\n              ? \"#fff\"\n              : theme.palette.secondary[200],\n          mb: 4,\n        }}\n      >\n        Microscope Calibration\n      </Typography>\n\n      {/* Analyst Dropdown - moved to top */}\n      <Stack\n        direction={{ xs: \"column\", sm: \"row\" }}\n        spacing={2}\n        alignItems=\"center\"\n        mb={3}\n      >\n        <FormControl fullWidth sx={{ maxWidth: 300 }}>\n          <InputLabel>Analyst</InputLabel>\n          <Select\n            value={analysedBy}\n            label=\"Analyst\"\n            onChange={(e) => setAnalysedBy(e.target.value)}\n            disabled={shiftStatus === \"analysis_complete\"}\n          >\n            {users.map((user) => (\n              <MenuItem\n                key={user._id}\n                value={user.firstName + \" \" + user.lastName}\n              >\n                {user.firstName} {user.lastName}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </Stack>\n\n      <Box component=\"form\" onSubmit={handleSubmit}>\n        <Stack spacing={4}>\n          {/* Analysis Details Section */}\n          <Paper sx={{ p: 3 }}>\n            <Stack spacing={3}>\n              <Typography variant=\"h3\">Microscope Calibration</Typography>\n              <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={3}>\n                <FormControl component=\"fieldset\">\n                  <Typography variant=\"subtitle1\" sx={{ mb: 1 }}>\n                    Microscope\n                  </Typography>\n                  <RadioGroup\n                    row\n                    name=\"microscope\"\n                    value={analysisDetails.microscope}\n                    onChange={handleAnalysisDetailsChange}\n                  >\n                    <FormControlLabel\n                      value=\"PCM1\"\n                      control={<Radio />}\n                      label=\"PCM1\"\n                      disabled={shiftStatus === \"analysis_complete\"}\n                    />\n                    <FormControlLabel\n                      value=\"PCM2\"\n                      control={<Radio />}\n                      label=\"PCM2\"\n                      disabled={shiftStatus === \"analysis_complete\"}\n                    />\n                  </RadioGroup>\n                </FormControl>\n                <Box sx={{ width: 24 }} />\n                <FormControl component=\"fieldset\">\n                  <Typography variant=\"subtitle1\" sx={{ mb: 1 }}>\n                    Test Slide\n                  </Typography>\n                  <RadioGroup\n                    row\n                    name=\"testSlide\"\n                    value={analysisDetails.testSlide}\n                    onChange={handleAnalysisDetailsChange}\n                  >\n                    <FormControlLabel\n                      value=\"LD-TS1\"\n                      control={<Radio />}\n                      label=\"LD-TS1\"\n                      disabled={shiftStatus === \"analysis_complete\"}\n                    />\n                    <FormControlLabel\n                      value=\"LD-TS2\"\n                      control={<Radio />}\n                      label=\"LD-TS2\"\n                      disabled={shiftStatus === \"analysis_complete\"}\n                    />\n                  </RadioGroup>\n                </FormControl>\n                <Box sx={{ width: 24 }} />\n                <FormControl component=\"fieldset\">\n                  <Typography variant=\"subtitle1\" sx={{ mb: 1 }}>\n                    Test Slide Lines\n                  </Typography>\n                  <RadioGroup\n                    row\n                    name=\"testSlideLines\"\n                    value={analysisDetails.testSlideLines}\n                    onChange={handleAnalysisDetailsChange}\n                  >\n                    <FormControlLabel\n                      value=\"partial 5\"\n                      control={<Radio />}\n                      label=\"Partial 5\"\n                      disabled={shiftStatus === \"analysis_complete\"}\n                    />\n                    <FormControlLabel\n                      value=\"6\"\n                      control={<Radio />}\n                      label=\"6\"\n                      disabled={shiftStatus === \"analysis_complete\"}\n                    />\n                  </RadioGroup>\n                </FormControl>\n              </Stack>\n            </Stack>\n          </Paper>\n\n          {/* Sample Forms */}\n          {renderSampleForms()}\n\n          <Box\n            sx={{ display: \"flex\", justifyContent: \"flex-end\", mt: 3, gap: 2 }}\n          >\n            <Button\n              variant=\"outlined\"\n              onClick={handleCancel}\n              sx={{\n                color: theme.palette.primary.main,\n                borderColor: theme.palette.primary.main,\n                \"&:hover\": {\n                  borderColor: theme.palette.primary.dark,\n                },\n              }}\n            >\n              Cancel\n            </Button>\n            {shiftStatus !== \"analysis_complete\" && (\n              <>\n                <Button\n                  variant=\"contained\"\n                  onClick={handleSaveAndClose}\n                  sx={{\n                    backgroundColor: theme.palette.primary[400],\n                    \"&:hover\": {\n                      backgroundColor: theme.palette.primary[500],\n                    },\n                  }}\n                >\n                  Save & Close\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  onClick={handleSubmit}\n                  disabled={!isAllAnalysisComplete()}\n                  sx={{\n                    backgroundColor: theme.palette.primary.main,\n                    \"&:hover\": {\n                      backgroundColor: theme.palette.primary.dark,\n                    },\n                    \"&.Mui-disabled\": {\n                      backgroundColor: theme.palette.grey[700],\n                      color: theme.palette.grey[500],\n                    },\n                  }}\n                >\n                  Finalise Analysis\n                </Button>\n              </>\n            )}\n          </Box>\n\n          {/* Cancel Confirmation Dialog */}\n          <Dialog\n            open={cancelDialogOpen}\n            onClose={() => setCancelDialogOpen(false)}\n          >\n            <DialogTitle>Discard Changes?</DialogTitle>\n            <DialogContent>\n              <Typography>\n                You have unsaved changes. Are you sure you want to discard them?\n              </Typography>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={() => setCancelDialogOpen(false)}>\n                Continue Editing\n              </Button>\n              <Button onClick={() => navigate(-1)} color=\"error\">\n                Discard Changes\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </Stack>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Analysis;\n"],"names":["ANALYSIS_PROGRESS_KEY","SampleForm","React","_ref","sample","analysis","onAnalysisChange","onFibreCountChange","onKeyDown","onClearTable","isFilterUncountable","calculateConcentration","getReportedConcentration","inputRefs","isReadOnly","useTheme","fibreCountsTable","useMemo","_jsx","TableContainer","children","_jsxs","Table","size","sx","tableLayout","TableHead","TableRow","TableCell","width","Array","from","length","_","i","align","p","TableBody","fibreCounts","map","row","rowIndex","concat","cell","colIndex","TextField","type","value","onChange","e","_id","target","disabled","inputRef","el","current","textAlign","WebkitTextFillColor","colSpan","Stack","direction","spacing","justifyContent","Typography","fibresCounted","fieldsCounted","mt","Box","variant","color","Paper","fullSampleID","cowlNo","xs","sm","FormControl","component","mb","RadioGroup","edgesDistribution","FormControlLabel","control","Radio","label","style","backgroundDust","position","display","alignItems","Button","startIcon","ClearIcon","onClick","top","left","transform","zIndex","pointerEvents","fontWeight","textShadow","Analysis","theme","shiftId","useParams","navigate","useNavigate","samples","setSamples","useState","analysisDetails","setAnalysisDetails","microscope","testSlide","testSlideLines","sampleAnalyses","setSampleAnalyses","confirmDialogOpen","setConfirmDialogOpen","selectedSampleId","setSelectedSampleId","useRef","isAnalysisComplete","setIsAnalysisComplete","cancelDialogOpen","setCancelDialogOpen","loading","setLoading","error","setError","isRendered","setIsRendered","users","setUsers","analysedBy","setAnalysedBy","shiftStatus","setShiftStatus","useEffect","renderStart","performance","now","console","log","isMounted","async","startTime","_shiftResponse$data","fetchStart","samplesResponse","sampleService","getByShift","shiftResponse","shiftService","getById","data","status","sortStart","sortedSamples","sort","a","b","aMatch","match","bMatch","parseInt","initStart","initialAnalyses","forEach","isArray","fill","firstSampleWithAnalysis","find","s","_s$analysis","storageStart","progressData","localStorage","getItem","parsed","JSON","parse","mergedAnalyses","_objectSpread","Object","keys","sampleId","err","fetchData","requestAnimationFrame","userService","getAll","then","res","handleAnalysisDetailsChange","name","handleSampleAnalysisChange","useCallback","field","prev","handleFibreCountChange","newValue","isNaN","newAnalyses","newFibreCounts","numValue","parseFloat","toFixed","nextCol","nextRow","nextInput","focus","handleKeyDown","key","preventDefault","lastFilledRow","lastFilledCol","nextEmptyRow","nextEmptyCol","setTimeout","handleClearTable","averageFlowrate","minutes","calculateDuration","endTime","start","Date","end","setDate","getDate","Math","round","calculatedConc","handleSubmit","_shift$job","updatePromises","analysisData","reportedConcentration","stringify","response","update","_error$response","results","Promise","all","shift","jobId","job","analysisDate","toISOString","renderSampleForm","_ref2","index","md","ArrowBackIcon","palette","mode","secondary","fullWidth","maxWidth","InputLabel","Select","user","MenuItem","firstName","lastName","onSubmit","height","minHeight","AutoSizer","_ref3","List","itemCount","itemSize","overscanCount","gap","handleCancel","some","primary","main","borderColor","dark","_Fragment","handleSaveAndClose","timestamp","setItem","backgroundColor","isAllAnalysisComplete","incompleteSamples","filter","emptyCells","grey","Dialog","open","onClose","DialogTitle","DialogContent","DialogActions"],"sourceRoot":""}