{"version":3,"file":"static/js/770.7dbf1121.chunk.js","mappings":"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","sources":["scenes/profile/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Divider,\r\n  Alert,\r\n  CircularProgress,\r\n  Grid,\r\n} from \"@mui/material\";\r\nimport { useAuth } from \"../../context/AuthContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Profile = () => {\r\n  const { currentUser, updateUser, logout } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(false);\r\n  const [success, setSuccess] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [formData, setFormData] = useState({\r\n    phone: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  // Initialize form data when currentUser changes\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      setFormData((prev) => ({\r\n        ...prev,\r\n        phone: currentUser.phone || \"\",\r\n      }));\r\n    }\r\n  }, [currentUser]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n\r\n    try {\r\n      // Validate password if it's being changed\r\n      if (formData.password) {\r\n        if (formData.password !== formData.confirmPassword) {\r\n          throw new Error(\"Passwords do not match\");\r\n        }\r\n        if (formData.password.length < 6) {\r\n          throw new Error(\"Password must be at least 6 characters long\");\r\n        }\r\n        // Add password complexity validation\r\n        const hasUpperCase = /[A-Z]/.test(formData.password);\r\n        const hasLowerCase = /[a-z]/.test(formData.password);\r\n        const hasNumbers = /\\d/.test(formData.password);\r\n        const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(formData.password);\r\n\r\n        if (!hasUpperCase || !hasLowerCase || !hasNumbers || !hasSpecialChar) {\r\n          throw new Error(\r\n            \"Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character\"\r\n          );\r\n        }\r\n      }\r\n\r\n      // Update user data\r\n      const updatedUser = {\r\n        ...currentUser,\r\n        phone: formData.phone,\r\n      };\r\n\r\n      if (formData.password) {\r\n        updatedUser.password = formData.password;\r\n      }\r\n\r\n      await updateUser(updatedUser);\r\n      setSuccess(\"Profile updated successfully\");\r\n      // Clear password fields after successful update\r\n      setFormData((prev) => ({ ...prev, password: \"\", confirmPassword: \"\" }));\r\n    } catch (err) {\r\n      setError(err.message || \"Failed to update profile\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    logout();\r\n    navigate(\"/login\");\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        maxWidth: 800,\r\n        mx: \"auto\",\r\n        p: 3,\r\n      }}\r\n    >\r\n      <Paper\r\n        elevation={3}\r\n        sx={{\r\n          p: 4,\r\n          borderRadius: 2,\r\n        }}\r\n      >\r\n        <Typography variant=\"h4\" gutterBottom color=\"black\">\r\n          Profile Settings\r\n        </Typography>\r\n\r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n\r\n        {success && (\r\n          <Alert severity=\"success\" sx={{ mb: 2 }}>\r\n            {success}\r\n          </Alert>\r\n        )}\r\n\r\n        <form onSubmit={handleSubmit}>\r\n          <Grid container spacing={3}>\r\n            {/* Profile Information Section */}\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h6\" gutterBottom color=\"black\">\r\n                Profile Information\r\n              </Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Email\"\r\n                value={currentUser?.email || \"\"}\r\n                disabled\r\n                variant=\"outlined\"\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Phone Number\"\r\n                name=\"phone\"\r\n                value={formData.phone}\r\n                onChange={handleChange}\r\n                variant=\"outlined\"\r\n                autoComplete=\"off\"\r\n              />\r\n            </Grid>\r\n            <Divider sx={{ my: 3 }} />\r\n            {/* Password Section */}\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h6\" gutterBottom color=\"black\">\r\n                Change Password\r\n              </Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"New Password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                value={formData.password}\r\n                onChange={handleChange}\r\n                variant=\"outlined\"\r\n                autoComplete=\"new-password\"\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Confirm New Password\"\r\n                name=\"confirmPassword\"\r\n                type=\"password\"\r\n                value={formData.confirmPassword}\r\n                onChange={handleChange}\r\n                variant=\"outlined\"\r\n                autoComplete=\"new-password\"\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={loading}\r\n                sx={{ mr: 2 }}\r\n              >\r\n                {loading ? <CircularProgress size={24} /> : \"Save Changes\"}\r\n              </Button>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <Divider sx={{ my: 3 }} />\r\n            </Grid>\r\n\r\n            {/* Logout Section */}\r\n            <Grid item xs={12}>\r\n              <Box sx={{ display: \"flex\", justifyContent: \"center\", mt: 2 }}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"error\"\r\n                  onClick={handleLogout}\r\n                  size=\"large\"\r\n                  sx={{\r\n                    minWidth: 200,\r\n                    py: 1.5,\r\n                    fontSize: \"1.1rem\",\r\n                  }}\r\n                >\r\n                  Logout\r\n                </Button>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n"],"names":["Profile","currentUser","updateUser","logout","useAuth","navigate","useNavigate","loading","setLoading","useState","success","setSuccess","error","setError","formData","setFormData","phone","password","confirmPassword","useEffect","prev","_objectSpread","handleChange","e","name","value","target","_jsx","Box","sx","maxWidth","mx","p","children","_jsxs","Paper","elevation","borderRadius","Typography","variant","gutterBottom","color","Alert","severity","mb","onSubmit","async","preventDefault","Error","length","hasUpperCase","test","hasLowerCase","hasNumbers","hasSpecialChar","updatedUser","err","message","Grid","container","spacing","item","xs","TextField","fullWidth","label","email","disabled","onChange","autoComplete","Divider","my","sm","type","Button","mr","CircularProgress","size","display","justifyContent","mt","onClick","handleLogout","minWidth","py","fontSize"],"sourceRoot":""}