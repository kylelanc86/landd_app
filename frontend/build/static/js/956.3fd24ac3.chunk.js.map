{"version":3,"file":"static/js/956.3fd24ac3.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Visibility.js","services/asbestosClearanceService.js","../node_modules/@mui/icons-material/esm/PictureAsPdf.js","scenes/clearances/AsbestosClearance.jsx","services/projectService.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5M12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5m0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3\"\n}), 'Visibility');","import axios from './axios';\r\n\r\nconst API_BASE_URL = '/asbestos-clearances';\r\n\r\nconst asbestosClearanceService = {\r\n  // Get all asbestos clearances with optional filters\r\n  getAll: async (params = {}) => {\r\n    const response = await axios.get(API_BASE_URL, { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Get single asbestos clearance by ID\r\n  getById: async (id) => {\r\n    const response = await axios.get(`${API_BASE_URL}/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create new asbestos clearance\r\n  create: async (clearanceData) => {\r\n    const response = await axios.post(API_BASE_URL, clearanceData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update asbestos clearance\r\n  update: async (id, clearanceData) => {\r\n    const response = await axios.put(`${API_BASE_URL}/${id}`, clearanceData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete asbestos clearance\r\n  delete: async (id) => {\r\n    const response = await axios.delete(`${API_BASE_URL}/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update status only\r\n  updateStatus: async (id, status) => {\r\n    const response = await axios.patch(`${API_BASE_URL}/${id}/status`, { status });\r\n    return response.data;\r\n  },\r\n\r\n  // Get statistics\r\n  getStats: async () => {\r\n    const response = await axios.get(`${API_BASE_URL}/stats/overview`);\r\n    return response.data;\r\n  },\r\n\r\n  // Search clearances\r\n  search: async (searchTerm, filters = {}) => {\r\n    const params = {\r\n      search: searchTerm,\r\n      ...filters\r\n    };\r\n    const response = await axios.get(API_BASE_URL, { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Get clearances by status\r\n  getByStatus: async (status) => {\r\n    const response = await axios.get(API_BASE_URL, { \r\n      params: { status } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get clearances by asbestos removalist\r\n  getByRemovalist: async (asbestosRemovalist) => {\r\n    const response = await axios.get(API_BASE_URL, { \r\n      params: { asbestosRemovalist } \r\n    });\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default asbestosClearanceService; ","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2m-8.5 7.5c0 .83-.67 1.5-1.5 1.5H9v2H7.5V7H10c.83 0 1.5.67 1.5 1.5zm5 2c0 .83-.67 1.5-1.5 1.5h-2.5V7H15c.83 0 1.5.67 1.5 1.5zm4-3H19v1h1.5V11H19v2h-1.5V7h3zM9 9.5h1v-1H9zM4 6H2v14c0 1.1.9 2 2 2h14v-2H4zm10 5.5h1v-3h-1z\"\n}), 'PictureAsPdf');","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  Alert,\r\n  Snackbar,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  PictureAsPdf as PdfIcon,\r\n  Visibility as ViewIcon,\r\n} from \"@mui/icons-material\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { tokens } from \"../../theme\";\r\nimport PermissionGate from \"../../components/PermissionGate\";\r\nimport asbestosClearanceService from \"../../services/asbestosClearanceService\";\r\nimport projectService from \"../../services/projectService\";\r\nimport { generateHTMLTemplatePDF } from \"../../utils/templatePDFGenerator\";\r\n\r\nconst AsbestosClearance = () => {\r\n  const colors = tokens;\r\n  const navigate = useNavigate();\r\n\r\n  const [clearances, setClearances] = useState([]);\r\n  const [projects, setProjects] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [editingClearance, setEditingClearance] = useState(null);\r\n  const [generatingPDF, setGeneratingPDF] = useState(false);\r\n  const [snackbar, setSnackbar] = useState({\r\n    open: false,\r\n    message: \"\",\r\n    severity: \"success\",\r\n  });\r\n\r\n  const [form, setForm] = useState({\r\n    projectId: \"\",\r\n    clearanceDate: \"\",\r\n    clearanceType: \"Non-friable\",\r\n    LAA: \"\",\r\n    asbestosRemovalist: \"\",\r\n    notes: \"\",\r\n  });\r\n\r\n  // Fetch clearances and projects on component mount\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const [clearancesData, projectsData] = await Promise.all([\r\n        asbestosClearanceService.getAll(),\r\n        projectService.getAll({\r\n          limit: 1000,\r\n          status:\r\n            \"Assigned,In progress,Samples submitted,Lab Analysis Complete,Report sent for review,Ready for invoicing,Invoice sent\",\r\n        }),\r\n      ]);\r\n\r\n      console.log(\"Clearances API response:\", clearancesData);\r\n      console.log(\"Projects API response:\", projectsData);\r\n\r\n      setClearances(\r\n        clearancesData.clearances || clearancesData.data || clearancesData || []\r\n      );\r\n      setProjects(projectsData.data || projectsData);\r\n    } catch (err) {\r\n      console.error(\"Error fetching data:\", err);\r\n      setError(\"Failed to load data\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      if (editingClearance) {\r\n        await asbestosClearanceService.update(editingClearance._id, form);\r\n        setSnackbar({\r\n          open: true,\r\n          message: \"Clearance updated successfully\",\r\n          severity: \"success\",\r\n        });\r\n      } else {\r\n        await asbestosClearanceService.create(form);\r\n        setSnackbar({\r\n          open: true,\r\n          message: \"Clearance created successfully\",\r\n          severity: \"success\",\r\n        });\r\n      }\r\n\r\n      setDialogOpen(false);\r\n      setEditingClearance(null);\r\n      resetForm();\r\n      fetchData();\r\n    } catch (err) {\r\n      console.error(\"Error saving clearance:\", err);\r\n      setSnackbar({\r\n        open: true,\r\n        message: \"Failed to save clearance\",\r\n        severity: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEdit = (clearance) => {\r\n    setEditingClearance(clearance);\r\n    setForm({\r\n      projectId: clearance.projectId._id || clearance.projectId,\r\n      clearanceDate: clearance.clearanceDate\r\n        ? new Date(clearance.clearanceDate).toISOString().split(\"T\")[0]\r\n        : \"\",\r\n      clearanceType: clearance.clearanceType,\r\n      LAA: clearance.LAA,\r\n      asbestosRemovalist: clearance.asbestosRemovalist,\r\n      notes: clearance.notes || \"\",\r\n    });\r\n    setDialogOpen(true);\r\n  };\r\n\r\n  const handleDelete = async (clearance) => {\r\n    if (window.confirm(\"Are you sure you want to delete this clearance?\")) {\r\n      try {\r\n        await asbestosClearanceService.delete(clearance._id);\r\n        setSnackbar({\r\n          open: true,\r\n          message: \"Clearance deleted successfully\",\r\n          severity: \"success\",\r\n        });\r\n        fetchData();\r\n      } catch (err) {\r\n        console.error(\"Error deleting clearance:\", err);\r\n        setSnackbar({\r\n          open: true,\r\n          message: \"Failed to delete clearance\",\r\n          severity: \"error\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleViewItems = (clearance) => {\r\n    navigate(`/clearances/${clearance._id}/items`);\r\n  };\r\n\r\n  const handleGeneratePDF = async (clearance) => {\r\n    try {\r\n      setGeneratingPDF(true);\r\n\r\n      // Get the full clearance data with populated project\r\n      const fullClearance = await asbestosClearanceService.getById(\r\n        clearance._id\r\n      );\r\n\r\n      // Use the new HTML template-based PDF generation\r\n      const fileName = await generateHTMLTemplatePDF(\r\n        \"asbestos-clearance\", // template type\r\n        fullClearance // clearance data\r\n      );\r\n\r\n      setSnackbar({\r\n        open: true,\r\n        message: `PDF generated successfully: ${fileName}`,\r\n        severity: \"success\",\r\n      });\r\n    } catch (err) {\r\n      console.error(\"Error generating PDF:\", err);\r\n      setSnackbar({\r\n        open: true,\r\n        message: \"Failed to generate PDF\",\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      setGeneratingPDF(false);\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setForm({\r\n      projectId: \"\",\r\n      clearanceDate: \"\",\r\n      clearanceType: \"Non-friable\",\r\n      LAA: \"\",\r\n      asbestosRemovalist: \"\",\r\n      notes: \"\",\r\n    });\r\n  };\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case \"complete\":\r\n        return \"success\";\r\n      case \"in progress\":\r\n        return \"warning\";\r\n      case \"Site Work Complete\":\r\n        return \"info\";\r\n      default:\r\n        return \"default\";\r\n    }\r\n  };\r\n\r\n  const getProjectName = (projectId) => {\r\n    const project = projects.find((p) => p._id === projectId);\r\n    return project ? project.name : \"Unknown Project\";\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        height=\"400px\"\r\n      >\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Box m=\"20px\">\r\n        <Alert severity=\"error\">{error}</Alert>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <PermissionGate requiredPermissions={[\"asbestos.view\"]}>\r\n      <Box m=\"20px\">\r\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Typography\r\n            variant=\"h2\"\r\n            color={colors.grey[100]}\r\n            fontWeight=\"bold\"\r\n            sx={{ mb: \"5px\" }}\r\n          >\r\n            Asbestos Clearance\r\n          </Typography>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={() => {\r\n              setEditingClearance(null);\r\n              resetForm();\r\n              setDialogOpen(true);\r\n            }}\r\n            startIcon={<AddIcon />}\r\n          >\r\n            Add Clearance\r\n          </Button>\r\n        </Box>\r\n\r\n        <Card sx={{ mt: 3 }}>\r\n          <CardContent>\r\n            <TableContainer component={Paper}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Project</TableCell>\r\n                    <TableCell>Clearance Date</TableCell>\r\n                    <TableCell>Type</TableCell>\r\n                    <TableCell>LAA</TableCell>\r\n                    <TableCell>Removalist</TableCell>\r\n                    <TableCell>Status</TableCell>\r\n                    <TableCell>Actions</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {(clearances || []).map((clearance) => (\r\n                    <TableRow key={clearance._id}>\r\n                      <TableCell>\r\n                        {getProjectName(clearance.projectId)}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {clearance.clearanceDate\r\n                          ? new Date(\r\n                              clearance.clearanceDate\r\n                            ).toLocaleDateString()\r\n                          : \"N/A\"}\r\n                      </TableCell>\r\n                      <TableCell>{clearance.clearanceType}</TableCell>\r\n                      <TableCell>{clearance.LAA}</TableCell>\r\n                      <TableCell>{clearance.asbestosRemovalist}</TableCell>\r\n                      <TableCell>\r\n                        <Chip\r\n                          label={clearance.status}\r\n                          color={getStatusColor(clearance.status)}\r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <IconButton\r\n                          onClick={() => handleViewItems(clearance)}\r\n                          color=\"info\"\r\n                          size=\"small\"\r\n                          title=\"View Items\"\r\n                        >\r\n                          <ViewIcon />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          onClick={() => handleEdit(clearance)}\r\n                          color=\"primary\"\r\n                          size=\"small\"\r\n                          title=\"Edit\"\r\n                        >\r\n                          <EditIcon />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          onClick={() => handleGeneratePDF(clearance)}\r\n                          color=\"secondary\"\r\n                          size=\"small\"\r\n                          disabled={generatingPDF}\r\n                          title=\"Generate PDF\"\r\n                        >\r\n                          <PdfIcon />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          onClick={() => handleDelete(clearance)}\r\n                          color=\"error\"\r\n                          size=\"small\"\r\n                          title=\"Delete\"\r\n                        >\r\n                          <DeleteIcon />\r\n                        </IconButton>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Add/Edit Dialog */}\r\n        <Dialog\r\n          open={dialogOpen}\r\n          onClose={() => setDialogOpen(false)}\r\n          maxWidth=\"md\"\r\n          fullWidth\r\n        >\r\n          <DialogTitle>\r\n            {editingClearance ? \"Edit Clearance\" : \"Add New Clearance\"}\r\n          </DialogTitle>\r\n          <form onSubmit={handleSubmit}>\r\n            <DialogContent>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <FormControl fullWidth required>\r\n                    <InputLabel>Project</InputLabel>\r\n                    <Select\r\n                      value={form.projectId}\r\n                      onChange={(e) =>\r\n                        setForm({ ...form, projectId: e.target.value })\r\n                      }\r\n                      label=\"Project\"\r\n                    >\r\n                      {(projects || []).map((project) => (\r\n                        <MenuItem key={project._id} value={project._id}>\r\n                          {project.projectID}: {project.name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                  <TextField\r\n                    fullWidth\r\n                    type=\"date\"\r\n                    label=\"Clearance Date\"\r\n                    value={form.clearanceDate}\r\n                    onChange={(e) =>\r\n                      setForm({ ...form, clearanceDate: e.target.value })\r\n                    }\r\n                    required\r\n                    InputLabelProps={{ shrink: true }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                  <FormControl fullWidth required>\r\n                    <InputLabel>Clearance Type</InputLabel>\r\n                    <Select\r\n                      value={form.clearanceType}\r\n                      onChange={(e) =>\r\n                        setForm({ ...form, clearanceType: e.target.value })\r\n                      }\r\n                      label=\"Clearance Type\"\r\n                    >\r\n                      <MenuItem value=\"Non-friable\">Non-friable</MenuItem>\r\n                      <MenuItem value=\"Friable\">Friable</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"LAA\"\r\n                    value={form.LAA}\r\n                    onChange={(e) => setForm({ ...form, LAA: e.target.value })}\r\n                    required\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Asbestos Removalist\"\r\n                    value={form.asbestosRemovalist}\r\n                    onChange={(e) =>\r\n                      setForm({ ...form, asbestosRemovalist: e.target.value })\r\n                    }\r\n                    required\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Notes\"\r\n                    value={form.notes}\r\n                    onChange={(e) =>\r\n                      setForm({ ...form, notes: e.target.value })\r\n                    }\r\n                    multiline\r\n                    rows={3}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={() => setDialogOpen(false)}>Cancel</Button>\r\n              <Button type=\"submit\" variant=\"contained\">\r\n                {editingClearance ? \"Update\" : \"Create\"}\r\n              </Button>\r\n            </DialogActions>\r\n          </form>\r\n        </Dialog>\r\n\r\n        {/* Snackbar for notifications */}\r\n        <Snackbar\r\n          open={snackbar.open}\r\n          autoHideDuration={6000}\r\n          onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n        >\r\n          <Alert\r\n            onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n            severity={snackbar.severity}\r\n          >\r\n            {snackbar.message}\r\n          </Alert>\r\n        </Snackbar>\r\n      </Box>\r\n    </PermissionGate>\r\n  );\r\n};\r\n\r\nexport default AsbestosClearance;\r\n","import axiosInstance from \"./axios\";\r\n\r\nconst projectService = {\r\n  getAll: async (params = {}) => {\r\n    const response = await axiosInstance.get(\"/projects\", { params });\r\n    return response.data;\r\n  },\r\n  getById: (id) => axiosInstance.get(`/projects/${id}`),\r\n  create: (data) => axiosInstance.post(\"/projects\", data),\r\n  update: (id, data) => axiosInstance.put(`/projects/${id}`, data),\r\n  delete: (id) => axiosInstance.delete(`/projects/${id}`),\r\n};\r\n\r\nexport default projectService; "],"names":["createSvgIcon","_jsx","d","API_BASE_URL","getAll","async","params","arguments","length","undefined","axios","get","data","getById","concat","id","create","post","clearanceData","update","put","delete","updateStatus","status","patch","getStats","search","searchTerm","filters","_objectSpread","getByStatus","getByRemovalist","asbestosRemovalist","AsbestosClearance","colors","tokens","navigate","useNavigate","clearances","setClearances","useState","projects","setProjects","loading","setLoading","error","setError","dialogOpen","setDialogOpen","editingClearance","setEditingClearance","generatingPDF","setGeneratingPDF","snackbar","setSnackbar","open","message","severity","form","setForm","projectId","clearanceDate","clearanceType","LAA","notes","useEffect","fetchData","clearancesData","projectsData","Promise","all","asbestosClearanceService","projectService","limit","console","log","err","resetForm","getStatusColor","getProjectName","project","find","p","_id","name","Box","display","justifyContent","alignItems","height","children","CircularProgress","m","Alert","PermissionGate","requiredPermissions","_jsxs","Typography","variant","color","grey","fontWeight","sx","mb","Button","onClick","startIcon","AddIcon","Card","mt","CardContent","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","clearance","Date","toLocaleDateString","Chip","label","size","IconButton","handleViewItems","title","ViewIcon","toISOString","split","handleEdit","EditIcon","fullClearance","fileName","generateHTMLTemplatePDF","handleGeneratePDF","disabled","PdfIcon","window","confirm","handleDelete","DeleteIcon","Dialog","onClose","maxWidth","fullWidth","DialogTitle","onSubmit","e","preventDefault","DialogContent","Grid","container","spacing","item","xs","FormControl","required","InputLabel","Select","value","onChange","target","MenuItem","projectID","md","TextField","type","InputLabelProps","shrink","multiline","rows","DialogActions","Snackbar","autoHideDuration","axiosInstance"],"sourceRoot":""}