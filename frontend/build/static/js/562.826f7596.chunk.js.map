{"version":3,"file":"static/js/562.826f7596.chunk.js","mappings":"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","sources":["utils/formatters.js","scenes/clients/index.jsx"],"sourcesContent":["/**\r\n * Formats a phone number to the format: 04xx xxx xxx\r\n * @param {string} phoneNumber - The phone number to format\r\n * @returns {string} - The formatted phone number\r\n */\r\nexport const formatPhoneNumber = (phoneNumber) => {\r\n  if (!phoneNumber) return '';\r\n  \r\n  // Remove all non-digit characters\r\n  const cleaned = phoneNumber.replace(/\\D/g, '');\r\n  \r\n  // Check if it's a valid Australian mobile number\r\n  if (cleaned.length === 10 && cleaned.startsWith('04')) {\r\n    return `${cleaned.slice(0, 4)} ${cleaned.slice(4, 7)} ${cleaned.slice(7)}`;\r\n  }\r\n  \r\n  // If it's not a valid format, return the cleaned number\r\n  return cleaned;\r\n};\r\n\r\n/**\r\n * Validates if a phone number is a valid Australian mobile number\r\n * @param {string} phoneNumber - The phone number to validate\r\n * @returns {boolean} - Whether the phone number is valid\r\n */\r\nexport const isValidAustralianMobile = (phoneNumber) => {\r\n  if (!phoneNumber) return false;\r\n  \r\n  // Remove all non-digit characters\r\n  const cleaned = phoneNumber.replace(/\\D/g, '');\r\n  \r\n  // Check if it's a valid Australian mobile number (10 digits starting with 04)\r\n  return cleaned.length === 10 && cleaned.startsWith('04');\r\n}; ","import { useState, useEffect, useCallback, memo, useRef } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Typography,\r\n  useTheme,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  Stack,\r\n  IconButton,\r\n  DialogContentText,\r\n  InputAdornment,\r\n  Popover,\r\n  List,\r\n  ListItem,\r\n  ListItemButton,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Checkbox,\r\n  Divider,\r\n} from \"@mui/material\";\r\nimport { DataGrid, GridToolbar } from \"@mui/x-data-grid\";\r\nimport { clientService, userPreferencesService } from \"../../services/api\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Header from \"../../components/Header\";\r\nimport { tokens } from \"../../theme\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport AttachMoneyIcon from \"@mui/icons-material/AttachMoney\";\r\nimport ViewColumnIcon from \"@mui/icons-material/ViewColumn\";\r\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\";\r\nimport {\r\n  formatPhoneNumber,\r\n  isValidAustralianMobile,\r\n} from \"../../utils/formatters\";\r\nimport { debounce } from \"lodash\";\r\n\r\nconst emptyForm = {\r\n  name: \"\",\r\n  invoiceEmail: \"\",\r\n  address: \"\",\r\n  contact1Name: \"\",\r\n  contact1Number: \"\",\r\n  contact1Email: \"\",\r\n  contact2Name: \"\",\r\n  contact2Number: \"\",\r\n  contact2Email: \"\",\r\n  written_off: false,\r\n};\r\n\r\nconst Clients = () => {\r\n  console.log(\"Clients component rendering\");\r\n\r\n  const theme = useTheme();\r\n  const navigate = useNavigate();\r\n  const [clients, setClients] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\r\n  const [form, setForm] = useState(emptyForm);\r\n  const [editForm, setEditForm] = useState(emptyForm);\r\n  const [editId, setEditId] = useState(null);\r\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n  const [clientToDelete, setClientToDelete] = useState(null);\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n  const [search, setSearch] = useState(\"\");\r\n  const [pagination, setPagination] = useState({\r\n    page: 1,\r\n    limit: 25,\r\n    total: 0,\r\n    pages: 0,\r\n  });\r\n  const searchInputRef = useRef(null);\r\n\r\n  // Column visibility state\r\n  const [columnVisibilityModel, setColumnVisibilityModel] = useState({\r\n    name: true,\r\n    invoiceEmail: true,\r\n    contact1Name: true,\r\n    contact1Number: true,\r\n    address: false, // Hide address column by default\r\n    written_off: true,\r\n    actions: true,\r\n  });\r\n  const [columnVisibilityAnchor, setColumnVisibilityAnchor] = useState(null);\r\n\r\n  // Load user preferences from database\r\n  useEffect(() => {\r\n    const loadUserPreferences = async () => {\r\n      try {\r\n        const response = await userPreferencesService.getPreferences();\r\n        if (response.data?.columnVisibility?.clients) {\r\n          setColumnVisibilityModel(response.data.columnVisibility.clients);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error loading user preferences:\", error);\r\n        // Fallback to localStorage if API fails\r\n        const savedColumnVisibility = localStorage.getItem(\r\n          \"clients-column-visibility\"\r\n        );\r\n        if (savedColumnVisibility) {\r\n          try {\r\n            const parsed = JSON.parse(savedColumnVisibility);\r\n            setColumnVisibilityModel(parsed);\r\n          } catch (parseError) {\r\n            console.error(\"Error parsing saved column visibility:\", parseError);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    loadUserPreferences();\r\n  }, []);\r\n\r\n  // Debug mount/unmount\r\n  useEffect(() => {\r\n    console.log(\"Clients component mounted\");\r\n    return () => console.log(\"Clients component unmounted\");\r\n  }, []);\r\n\r\n  // Debug search state changes\r\n  useEffect(() => {\r\n    console.log(\"Search state changed:\", { searchInput, search });\r\n  }, [searchInput, search]);\r\n\r\n  // Debug pagination changes\r\n  useEffect(() => {\r\n    console.log(\"Pagination state changed:\", pagination);\r\n  }, [pagination]);\r\n\r\n  // Debounced search handler\r\n  const debouncedSearch = useCallback(\r\n    debounce((value) => {\r\n      setSearch(value);\r\n      setPagination((prev) => ({ ...prev, page: 1 }));\r\n    }, 300),\r\n    []\r\n  );\r\n\r\n  // Handle search input change\r\n  const handleSearchChange = useCallback(\r\n    (event) => {\r\n      const value = event.target.value;\r\n      setSearchInput(value);\r\n      debouncedSearch(value);\r\n    },\r\n    [debouncedSearch]\r\n  );\r\n\r\n  // Handle key press\r\n  const handleKeyPress = useCallback((event) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n  }, []);\r\n\r\n  // Fetch clients with search and pagination\r\n  const fetchClients = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await clientService.getAll({\r\n        page: pagination.page,\r\n        limit: pagination.limit,\r\n        search: search,\r\n      });\r\n      setClients(response.data.clients || response.data);\r\n      setPagination((prev) => ({\r\n        ...prev,\r\n        total:\r\n          response.data.pagination?.total || response.pagination?.total || 0,\r\n        pages:\r\n          response.data.pagination?.pages || response.pagination?.pages || 0,\r\n      }));\r\n    } catch (err) {\r\n      console.error(\"Error fetching clients:\", err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [pagination.page, pagination.limit, search]);\r\n\r\n  // Fetch clients when search or pagination changes\r\n  useEffect(() => {\r\n    fetchClients();\r\n  }, [fetchClients]);\r\n\r\n  // Maintain focus on search bar after results are loaded\r\n  useEffect(() => {\r\n    if (!loading && searchInputRef.current) {\r\n      searchInputRef.current.focus();\r\n    }\r\n  }, [loading]);\r\n\r\n  // Handle page change\r\n  const handlePageChange = useCallback((newPage) => {\r\n    setPagination((prev) => ({ ...prev, page: newPage }));\r\n  }, []);\r\n\r\n  // Handle page size change\r\n  const handlePageSizeChange = useCallback((newPageSize) => {\r\n    setPagination((prev) => ({ ...prev, limit: newPageSize, page: 1 }));\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name === \"contact1Number\" || name === \"contact2Number\") {\r\n      setForm({ ...form, [name]: formatPhoneNumber(value) });\r\n    } else {\r\n      setForm({ ...form, [name]: value });\r\n    }\r\n  };\r\n\r\n  const handleEditChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name === \"contact1Number\" || name === \"contact2Number\") {\r\n      setEditForm({ ...editForm, [name]: formatPhoneNumber(value) });\r\n    } else {\r\n      setEditForm({ ...editForm, [name]: value });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await clientService.create(form);\r\n      setClients([response.data, ...clients]);\r\n      setDialogOpen(false);\r\n      setForm(emptyForm);\r\n    } catch (err) {\r\n      if (err.response) {\r\n        alert(\r\n          `Error creating client: ${\r\n            err.response.data.message || \"Unknown error\"\r\n          }`\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleEditSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await clientService.update(editId, editForm);\r\n      setClients(\r\n        clients.map((client) =>\r\n          client._id === editId ? response.data : client\r\n        )\r\n      );\r\n      setEditDialogOpen(false);\r\n      setEditForm(emptyForm);\r\n      setEditId(null);\r\n    } catch (err) {\r\n      if (err.response) {\r\n        alert(\r\n          `Error updating client: ${\r\n            err.response.data.message || \"Unknown error\"\r\n          }`\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleEdit = (client) => {\r\n    setEditForm({\r\n      name: client.name,\r\n      invoiceEmail: client.invoiceEmail,\r\n      address: client.address,\r\n      contact1Name: client.contact1Name,\r\n      contact1Number: client.contact1Number,\r\n      contact1Email: client.contact1Email,\r\n      contact2Name: client.contact2Name || \"\",\r\n      contact2Number: client.contact2Number || \"\",\r\n      contact2Email: client.contact2Email || \"\",\r\n      written_off: client.written_off || false,\r\n    });\r\n    setEditId(client._id);\r\n    setEditDialogOpen(true);\r\n  };\r\n\r\n  const handleDeleteClick = (client) => {\r\n    setClientToDelete(client);\r\n    setDeleteDialogOpen(true);\r\n  };\r\n\r\n  const handleDeleteConfirm = async () => {\r\n    try {\r\n      await clientService.delete(clientToDelete._id);\r\n      setClients(clients.filter((client) => client._id !== clientToDelete._id));\r\n      setDeleteDialogOpen(false);\r\n      setClientToDelete(null);\r\n      // Also close edit dialog if it's open\r\n      if (editDialogOpen) {\r\n        setEditDialogOpen(false);\r\n        setEditForm(emptyForm);\r\n        setEditId(null);\r\n      }\r\n    } catch (err) {\r\n      if (err.response) {\r\n        alert(\r\n          `Error deleting client: ${\r\n            err.response.data.message || \"Unknown error\"\r\n          }`\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  // Column visibility handlers\r\n  const handleColumnVisibilityClick = (event) => {\r\n    setColumnVisibilityAnchor(event.currentTarget);\r\n  };\r\n\r\n  const handleColumnVisibilityClose = () => {\r\n    setColumnVisibilityAnchor(null);\r\n  };\r\n\r\n  const handleColumnToggle = async (field) => {\r\n    const newModel = {\r\n      ...columnVisibilityModel,\r\n      [field]: !columnVisibilityModel[field],\r\n    };\r\n\r\n    setColumnVisibilityModel(newModel);\r\n\r\n    try {\r\n      // Save to database\r\n      await userPreferencesService.updatePreferences({\r\n        columnVisibility: {\r\n          clients: newModel,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error saving column visibility preferences:\", error);\r\n      // Fallback to localStorage if API fails\r\n      localStorage.setItem(\r\n        \"clients-column-visibility\",\r\n        JSON.stringify(newModel)\r\n      );\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      field: \"name\",\r\n      headerName: \"Client Name\",\r\n      flex: 1,\r\n      renderCell: (params) => (\r\n        <Typography\r\n          sx={{\r\n            color: params.row.written_off ? \"red\" : \"inherit\",\r\n            fontWeight: params.row.written_off ? \"bold\" : \"normal\",\r\n            fontSize: \"0.875rem\",\r\n          }}\r\n        >\r\n          {params.row.name}\r\n        </Typography>\r\n      ),\r\n    },\r\n    {\r\n      field: \"invoiceEmail\",\r\n      headerName: \"Invoice Email\",\r\n      flex: 1,\r\n      renderCell: (params) => (\r\n        <Typography\r\n          sx={{\r\n            color: params.row.written_off ? \"red\" : \"inherit\",\r\n            fontWeight: params.row.written_off ? \"bold\" : \"normal\",\r\n            fontSize: \"0.875rem\",\r\n          }}\r\n        >\r\n          {params.row.invoiceEmail}\r\n        </Typography>\r\n      ),\r\n    },\r\n    {\r\n      field: \"contact1Name\",\r\n      headerName: \"Primary Contact\",\r\n      flex: 1,\r\n      renderCell: (params) => (\r\n        <Typography\r\n          sx={{\r\n            color: params.row.written_off ? \"red\" : \"inherit\",\r\n            fontWeight: params.row.written_off ? \"bold\" : \"normal\",\r\n            fontSize: \"0.875rem\",\r\n          }}\r\n        >\r\n          {params.row.contact1Name}\r\n        </Typography>\r\n      ),\r\n    },\r\n    {\r\n      field: \"contact1Number\",\r\n      headerName: \"Primary Phone\",\r\n      flex: 1,\r\n      valueGetter: (params) => formatPhoneNumber(params.row.contact1Number),\r\n      renderCell: (params) => (\r\n        <Typography\r\n          sx={{\r\n            color: params.row.written_off ? \"red\" : \"inherit\",\r\n            fontWeight: params.row.written_off ? \"bold\" : \"normal\",\r\n            fontSize: \"0.875rem\",\r\n          }}\r\n        >\r\n          {formatPhoneNumber(params.row.contact1Number)}\r\n        </Typography>\r\n      ),\r\n    },\r\n    {\r\n      field: \"address\",\r\n      headerName: \"Address\",\r\n      flex: 1,\r\n      renderCell: (params) => (\r\n        <Typography\r\n          sx={{\r\n            color: params.row.written_off ? \"red\" : \"inherit\",\r\n            fontWeight: params.row.written_off ? \"bold\" : \"normal\",\r\n            fontSize: \"0.875rem\",\r\n          }}\r\n        >\r\n          {params.row.address}\r\n        </Typography>\r\n      ),\r\n    },\r\n    {\r\n      field: \"written_off\",\r\n      headerName: \"Written Off\",\r\n      flex: 0.5,\r\n      renderCell: (params) => (\r\n        <Box\r\n          sx={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          {params.row.written_off && (\r\n            <CheckCircleIcon\r\n              sx={{\r\n                color: \"red\",\r\n                fontSize: 20,\r\n              }}\r\n            />\r\n          )}\r\n        </Box>\r\n      ),\r\n    },\r\n    {\r\n      field: \"actions\",\r\n      headerName: \"Actions\",\r\n      flex: 1,\r\n      renderCell: (params) => (\r\n        <Box>\r\n          <IconButton\r\n            onClick={() => navigate(`/invoices?client=${params.row._id}`)}\r\n            title=\"View Invoices\"\r\n          >\r\n            <AttachMoneyIcon />\r\n          </IconButton>\r\n          <IconButton\r\n            onClick={() => handleEdit(params.row)}\r\n            title=\"Edit Client\"\r\n          >\r\n            <EditIcon />\r\n          </IconButton>\r\n          <IconButton\r\n            onClick={() => handleDeleteClick(params.row)}\r\n            title=\"Delete Client\"\r\n            color=\"error\"\r\n          >\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Box>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  if (loading) return <Typography>Loading clients...</Typography>;\r\n  if (error) return <Typography color=\"error\">{error}</Typography>;\r\n\r\n  return (\r\n    <Box m=\"20px\">\r\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={() => setDialogOpen(true)}\r\n          sx={{\r\n            backgroundColor: theme.palette.secondary.main,\r\n            \"&:hover\": { backgroundColor: theme.palette.secondary.dark },\r\n          }}\r\n        >\r\n          <AddIcon sx={{ mr: 1 }} />\r\n          Add Client\r\n        </Button>\r\n      </Box>\r\n\r\n      {/* Search Section */}\r\n      <Box\r\n        mt=\"20px\"\r\n        mb=\"20px\"\r\n        sx={{\r\n          backgroundColor: \"background.paper\",\r\n          borderRadius: \"4px\",\r\n          boxShadow: \"0px 4px 8px rgba(0, 0, 0, 0.1)\",\r\n          p: 2,\r\n        }}\r\n      >\r\n        <Stack direction=\"row\" spacing={2} alignItems=\"center\">\r\n          <TextField\r\n            inputRef={searchInputRef}\r\n            label=\"Search by Client Name\"\r\n            value={searchInput}\r\n            onChange={handleSearchChange}\r\n            sx={{ flex: 1 }}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <SearchIcon />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n\r\n          {/* Column Visibility Button */}\r\n          <Button\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            startIcon={<ViewColumnIcon />}\r\n            onClick={handleColumnVisibilityClick}\r\n            sx={{\r\n              height: 56, // Match the height of the search field\r\n              minWidth: 140,\r\n              color: theme.palette.primary.main,\r\n              borderColor: theme.palette.primary.main,\r\n              \"&:hover\": {\r\n                backgroundColor: theme.palette.primary.main,\r\n                color: \"white\",\r\n                borderColor: theme.palette.primary.main,\r\n              },\r\n            }}\r\n          >\r\n            Columns\r\n          </Button>\r\n        </Stack>\r\n      </Box>\r\n\r\n      {/* Column Visibility Dropdown */}\r\n      <Popover\r\n        open={Boolean(columnVisibilityAnchor)}\r\n        anchorEl={columnVisibilityAnchor}\r\n        onClose={handleColumnVisibilityClose}\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"left\",\r\n        }}\r\n        transformOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"left\",\r\n        }}\r\n        PaperProps={{\r\n          sx: {\r\n            minWidth: 200,\r\n            maxHeight: 400,\r\n          },\r\n        }}\r\n      >\r\n        <Box sx={{ p: 1 }}>\r\n          <Typography variant=\"subtitle2\" sx={{ p: 1, fontWeight: \"bold\" }}>\r\n            Show/Hide Columns\r\n          </Typography>\r\n          <Divider sx={{ mb: 1 }} />\r\n          <List dense>\r\n            {columns.map((column) => (\r\n              <ListItem key={column.field} disablePadding>\r\n                <ListItemButton\r\n                  dense\r\n                  onClick={() => handleColumnToggle(column.field)}\r\n                >\r\n                  <ListItemIcon sx={{ minWidth: 36 }}>\r\n                    <Checkbox\r\n                      edge=\"start\"\r\n                      checked={columnVisibilityModel[column.field] !== false}\r\n                      tabIndex={-1}\r\n                      disableRipple\r\n                      size=\"small\"\r\n                    />\r\n                  </ListItemIcon>\r\n                  <ListItemText\r\n                    primary={column.headerName}\r\n                    primaryTypographyProps={{ fontSize: \"0.875rem\" }}\r\n                  />\r\n                </ListItemButton>\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Box>\r\n      </Popover>\r\n\r\n      <Box\r\n        m=\"40px 0 0 0\"\r\n        height=\"75vh\"\r\n        sx={{\r\n          \"& .MuiDataGrid-root\": { border: \"none\" },\r\n          \"& .MuiDataGrid-cell\": {\r\n            borderBottom: `1px solid ${theme.palette.divider}`,\r\n            fontSize: \"0.875rem\",\r\n            color: \"#000000\",\r\n          },\r\n          \"& .MuiDataGrid-columnHeaders\": {\r\n            backgroundColor: theme.palette.primary.main,\r\n            borderBottom: \"none\",\r\n            fontSize: \"0.875rem\",\r\n            color: \"#FFFFFF\",\r\n          },\r\n          \"& .MuiDataGrid-columnHeader\": {\r\n            color: \"#FFFFFF\",\r\n            fontWeight: 600,\r\n          },\r\n          \"& .MuiDataGrid-virtualScroller\": {\r\n            backgroundColor: \"#FFFFFF\",\r\n          },\r\n          \"& .MuiDataGrid-footerContainer\": {\r\n            borderTop: \"none\",\r\n            backgroundColor: theme.palette.primary.main,\r\n            fontSize: \"0.875rem\",\r\n            color: \"#FFFFFF\",\r\n          },\r\n          \"& .MuiCheckbox-root\": {\r\n            color: `${theme.palette.secondary.main} !important`,\r\n          },\r\n          \"& .MuiDataGrid-row:nth-of-type(even)\": {\r\n            backgroundColor: \"#f8f9fa\",\r\n          },\r\n          \"& .MuiDataGrid-row:nth-of-type(odd)\": {\r\n            backgroundColor: \"#ffffff\",\r\n          },\r\n          \"& .MuiDataGrid-row:hover\": {\r\n            backgroundColor: \"#e3f2fd\",\r\n          },\r\n        }}\r\n      >\r\n        <DataGrid\r\n          rows={clients}\r\n          columns={columns}\r\n          getRowId={(row) => row._id}\r\n          pageSize={pagination.limit}\r\n          page={pagination.page - 1}\r\n          rowCount={pagination.total}\r\n          onPageChange={handlePageChange}\r\n          onPageSizeChange={handlePageSizeChange}\r\n          paginationMode=\"server\"\r\n          loading={loading}\r\n          autoHeight\r\n          disableSelectionOnClick\r\n          components={{ Toolbar: GridToolbar }}\r\n          keepNonExistentRowsSelected\r\n          disableColumnMenu\r\n          disableColumnFilter\r\n          disableColumnSelector\r\n          disableDensitySelector\r\n          columnVisibilityModel={columnVisibilityModel}\r\n          onColumnVisibilityModelChange={setColumnVisibilityModel}\r\n        />\r\n      </Box>\r\n\r\n      {/* Add Client Dialog */}\r\n      <Dialog\r\n        open={dialogOpen}\r\n        onClose={() => setDialogOpen(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Create New Client</DialogTitle>\r\n        <form onSubmit={handleSubmit}>\r\n          <DialogContent>\r\n            <Stack spacing={2}>\r\n              <TextField\r\n                label=\"Client Name\"\r\n                name=\"name\"\r\n                value={form.name}\r\n                onChange={handleChange}\r\n                required\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                label=\"Invoice Email\"\r\n                name=\"invoiceEmail\"\r\n                type=\"email\"\r\n                value={form.invoiceEmail}\r\n                onChange={handleChange}\r\n                required\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                label=\"Address\"\r\n                name=\"address\"\r\n                value={form.address}\r\n                onChange={handleChange}\r\n                required\r\n                fullWidth\r\n              />\r\n              <Typography variant=\"h6\" sx={{ mt: 2 }}>\r\n                Primary Contact\r\n              </Typography>\r\n              <TextField\r\n                label=\"Contact Name\"\r\n                name=\"contact1Name\"\r\n                value={form.contact1Name}\r\n                onChange={handleChange}\r\n                required\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                label=\"Contact Phone\"\r\n                name=\"contact1Number\"\r\n                value={form.contact1Number}\r\n                onChange={handleChange}\r\n                required\r\n                fullWidth\r\n                placeholder=\"04xx xxx xxx\"\r\n                error={\r\n                  form.contact1Number &&\r\n                  !isValidAustralianMobile(form.contact1Number)\r\n                }\r\n                helperText={\r\n                  form.contact1Number &&\r\n                  !isValidAustralianMobile(form.contact1Number)\r\n                    ? \"Please enter a valid Australian mobile number\"\r\n                    : \"\"\r\n                }\r\n              />\r\n              <TextField\r\n                label=\"Contact Email\"\r\n                name=\"contact1Email\"\r\n                type=\"email\"\r\n                value={form.contact1Email}\r\n                onChange={handleChange}\r\n                required\r\n                fullWidth\r\n              />\r\n              <Typography variant=\"h6\" sx={{ mt: 2 }}>\r\n                Secondary Contact (Optional)\r\n              </Typography>\r\n              <TextField\r\n                label=\"Contact Name\"\r\n                name=\"contact2Name\"\r\n                value={form.contact2Name}\r\n                onChange={handleChange}\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                label=\"Contact Phone\"\r\n                name=\"contact2Number\"\r\n                value={form.contact2Number}\r\n                onChange={handleChange}\r\n                fullWidth\r\n                placeholder=\"04xx xxx xxx\"\r\n                error={\r\n                  form.contact2Number &&\r\n                  !isValidAustralianMobile(form.contact2Number)\r\n                }\r\n                helperText={\r\n                  form.contact2Number &&\r\n                  !isValidAustralianMobile(form.contact2Number)\r\n                    ? \"Please enter a valid Australian mobile number\"\r\n                    : \"\"\r\n                }\r\n              />\r\n              <TextField\r\n                label=\"Contact Email\"\r\n                name=\"contact2Email\"\r\n                type=\"email\"\r\n                value={form.contact2Email}\r\n                onChange={handleChange}\r\n                fullWidth\r\n              />\r\n              <Box sx={{ mt: 2, display: \"flex\", alignItems: \"center\" }}>\r\n                <Checkbox\r\n                  name=\"written_off\"\r\n                  checked={form.written_off}\r\n                  onChange={(e) =>\r\n                    setForm({ ...form, written_off: e.target.checked })\r\n                  }\r\n                  sx={{\r\n                    color: \"red\",\r\n                    \"&.Mui-checked\": {\r\n                      color: \"red\",\r\n                    },\r\n                  }}\r\n                />\r\n                <Typography\r\n                  variant=\"body1\"\r\n                  sx={{ color: \"red\", fontWeight: \"bold\" }}\r\n                >\r\n                  WRITTEN OFF?\r\n                </Typography>\r\n              </Box>\r\n            </Stack>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => setDialogOpen(false)} color=\"secondary\">\r\n              Cancel\r\n            </Button>\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n              Create Client\r\n            </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n\r\n      {/* Edit Client Dialog */}\r\n      <Dialog\r\n        open={editDialogOpen}\r\n        onClose={() => setEditDialogOpen(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Edit Client</DialogTitle>\r\n        <form onSubmit={handleEditSubmit}>\r\n          <DialogContent>\r\n            <Stack spacing={2}>\r\n              <TextField\r\n                label=\"Client Name\"\r\n                name=\"name\"\r\n                value={editForm.name}\r\n                onChange={handleEditChange}\r\n                required\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                label=\"Invoice Email\"\r\n                name=\"invoiceEmail\"\r\n                type=\"email\"\r\n                value={editForm.invoiceEmail}\r\n                onChange={handleEditChange}\r\n                required\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                label=\"Address\"\r\n                name=\"address\"\r\n                value={editForm.address}\r\n                onChange={handleEditChange}\r\n                required\r\n                fullWidth\r\n              />\r\n              <Typography variant=\"h6\" sx={{ mt: 2 }}>\r\n                Primary Contact\r\n              </Typography>\r\n              <TextField\r\n                label=\"Contact Name\"\r\n                name=\"contact1Name\"\r\n                value={editForm.contact1Name}\r\n                onChange={handleEditChange}\r\n                required\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                label=\"Contact Phone\"\r\n                name=\"contact1Number\"\r\n                value={editForm.contact1Number}\r\n                onChange={handleEditChange}\r\n                required\r\n                fullWidth\r\n                placeholder=\"04xx xxx xxx\"\r\n                error={\r\n                  editForm.contact1Number &&\r\n                  !isValidAustralianMobile(editForm.contact1Number)\r\n                }\r\n                helperText={\r\n                  editForm.contact1Number &&\r\n                  !isValidAustralianMobile(editForm.contact1Number)\r\n                    ? \"Please enter a valid Australian mobile number\"\r\n                    : \"\"\r\n                }\r\n              />\r\n              <TextField\r\n                label=\"Contact Email\"\r\n                name=\"contact1Email\"\r\n                type=\"email\"\r\n                value={editForm.contact1Email}\r\n                onChange={handleEditChange}\r\n                required\r\n                fullWidth\r\n              />\r\n              <Typography variant=\"h6\" sx={{ mt: 2 }}>\r\n                Secondary Contact (Optional)\r\n              </Typography>\r\n              <TextField\r\n                label=\"Contact Name\"\r\n                name=\"contact2Name\"\r\n                value={editForm.contact2Name}\r\n                onChange={handleEditChange}\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                label=\"Contact Phone\"\r\n                name=\"contact2Number\"\r\n                value={editForm.contact2Number}\r\n                onChange={handleEditChange}\r\n                fullWidth\r\n                placeholder=\"04xx xxx xxx\"\r\n                error={\r\n                  editForm.contact2Number &&\r\n                  !isValidAustralianMobile(editForm.contact2Number)\r\n                }\r\n                helperText={\r\n                  editForm.contact2Number &&\r\n                  !isValidAustralianMobile(editForm.contact2Number)\r\n                    ? \"Please enter a valid Australian mobile number\"\r\n                    : \"\"\r\n                }\r\n              />\r\n              <TextField\r\n                label=\"Contact Email\"\r\n                name=\"contact2Email\"\r\n                type=\"email\"\r\n                value={editForm.contact2Email}\r\n                onChange={handleEditChange}\r\n                fullWidth\r\n              />\r\n              <Box sx={{ mt: 2, display: \"flex\", alignItems: \"center\" }}>\r\n                <Checkbox\r\n                  name=\"written_off\"\r\n                  checked={editForm.written_off}\r\n                  onChange={(e) =>\r\n                    setEditForm({ ...editForm, written_off: e.target.checked })\r\n                  }\r\n                  sx={{\r\n                    color: \"red\",\r\n                    \"&.Mui-checked\": {\r\n                      color: \"red\",\r\n                    },\r\n                  }}\r\n                />\r\n                <Typography\r\n                  variant=\"body1\"\r\n                  sx={{ color: \"red\", fontWeight: \"bold\" }}\r\n                >\r\n                  WRITTEN OFF?\r\n                </Typography>\r\n              </Box>\r\n            </Stack>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Box sx={{ flex: \"1\" }} />\r\n            <Button onClick={() => setEditDialogOpen(false)} color=\"secondary\">\r\n              Cancel\r\n            </Button>\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n              Save Changes\r\n            </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n\r\n      {/* Delete Confirmation Dialog */}\r\n      <Dialog\r\n        open={deleteDialogOpen}\r\n        onClose={() => setDeleteDialogOpen(false)}\r\n      >\r\n        <DialogTitle>Delete Client</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Are you sure you want to delete {clientToDelete?.name}? This action\r\n            cannot be undone.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleDeleteConfirm}\r\n            color=\"error\"\r\n            variant=\"contained\"\r\n          >\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default memo(Clients);\r\n"],"names":["formatPhoneNumber","phoneNumber","cleaned","replace","length","startsWith","concat","slice","isValidAustralianMobile","emptyForm","name","invoiceEmail","address","contact1Name","contact1Number","contact1Email","contact2Name","contact2Number","contact2Email","written_off","Clients","console","log","theme","useTheme","navigate","useNavigate","clients","setClients","useState","loading","setLoading","error","setError","dialogOpen","setDialogOpen","editDialogOpen","setEditDialogOpen","form","setForm","editForm","setEditForm","editId","setEditId","deleteDialogOpen","setDeleteDialogOpen","clientToDelete","setClientToDelete","searchInput","setSearchInput","search","setSearch","pagination","setPagination","page","limit","total","pages","searchInputRef","useRef","columnVisibilityModel","setColumnVisibilityModel","actions","columnVisibilityAnchor","setColumnVisibilityAnchor","useEffect","async","_response$data","_response$data$column","response","userPreferencesService","getPreferences","data","columnVisibility","savedColumnVisibility","localStorage","getItem","parsed","JSON","parse","parseError","loadUserPreferences","debouncedSearch","useCallback","debounce","value","prev","_objectSpread","handleSearchChange","event","target","fetchClients","preventDefault","stopPropagation","clientService","getAll","_response$data$pagina","_response$pagination","_response$data$pagina2","_response$pagination2","err","message","current","focus","handlePageChange","newPage","handlePageSizeChange","newPageSize","handleChange","e","handleEditChange","columns","field","headerName","flex","renderCell","params","_jsx","Typography","sx","color","row","fontWeight","fontSize","children","valueGetter","Box","display","justifyContent","alignItems","CheckCircleIcon","_jsxs","IconButton","onClick","_id","title","AttachMoneyIcon","handleEdit","client","EditIcon","handleDeleteClick","DeleteIcon","m","Button","variant","backgroundColor","palette","secondary","main","dark","AddIcon","mr","mt","mb","borderRadius","boxShadow","p","Stack","direction","spacing","TextField","inputRef","label","onChange","InputProps","startAdornment","InputAdornment","position","SearchIcon","size","startIcon","ViewColumnIcon","currentTarget","height","minWidth","primary","borderColor","Popover","open","Boolean","anchorEl","onClose","handleColumnVisibilityClose","anchorOrigin","vertical","horizontal","transformOrigin","PaperProps","maxHeight","Divider","List","dense","map","column","ListItem","disablePadding","ListItemButton","newModel","updatePreferences","setItem","stringify","handleColumnToggle","ListItemIcon","Checkbox","edge","checked","tabIndex","disableRipple","ListItemText","primaryTypographyProps","border","borderBottom","divider","borderTop","DataGrid","rows","getRowId","pageSize","rowCount","onPageChange","onPageSizeChange","paginationMode","autoHeight","disableSelectionOnClick","components","Toolbar","GridToolbar","keepNonExistentRowsSelected","disableColumnMenu","disableColumnFilter","disableColumnSelector","disableDensitySelector","onColumnVisibilityModelChange","Dialog","maxWidth","fullWidth","DialogTitle","onSubmit","create","alert","DialogContent","required","type","placeholder","helperText","DialogActions","update","DialogContentText","delete","filter","memo"],"sourceRoot":""}