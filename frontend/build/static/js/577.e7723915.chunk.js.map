{"version":3,"file":"static/js/577.e7723915.chunk.js","mappings":"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","sources":["scenes/air-monitoring/air-monitoring-sample-list.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  TextField,\r\n  Stack,\r\n  InputAdornment,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport AssessmentIcon from \"@mui/icons-material/Assessment\";\r\nimport { sampleService, shiftService } from \"../../services/api\";\r\nimport { formatDate, formatTime } from \"../../utils/dateUtils\";\r\n\r\nconst SampleList = () => {\r\n  const theme = useTheme();\r\n  const { shiftId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [samples, setSamples] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [sortField, setSortField] = useState(\"sampleNumber\");\r\n  const [sortAsc, setSortAsc] = useState(true);\r\n  const [shift, setShift] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isCompleteDisabled, setIsCompleteDisabled] = useState(true);\r\n  const [nextSampleNumber, setNextSampleNumber] = useState(null);\r\n  const [descriptionOfWorks, setDescriptionOfWorks] = useState(\"\");\r\n  const [descSaveStatus, setDescSaveStatus] = useState(\"\");\r\n\r\n  // Function to extract the numeric part from a sample number\r\n  const extractSampleNumber = (sampleNumber) => {\r\n    const match = sampleNumber?.match(/-(\\d+)$/);\r\n    return match ? parseInt(match[1]) : 0;\r\n  };\r\n\r\n  // Function to generate the next sample number\r\n  const generateNextSampleNumber = async (samples, projectID) => {\r\n    if (!projectID) return 1;\r\n\r\n    try {\r\n      // Get all samples for the project\r\n      const allSamplesResponse = await sampleService.getByProject(projectID);\r\n      const allSamples = allSamplesResponse.data;\r\n      console.log(\"All samples for project:\", allSamples);\r\n\r\n      // Get the highest sample number from all samples in the project\r\n      const highestNumber = Math.max(\r\n        ...allSamples.map((sample) => {\r\n          const number = extractSampleNumber(sample.fullSampleID);\r\n          console.log(`Sample ${sample.fullSampleID} has number ${number}`);\r\n          return number;\r\n        })\r\n      );\r\n      console.log(\"Highest sample number found:\", highestNumber);\r\n\r\n      const nextNumber = highestNumber + 1;\r\n      console.log(\"Next sample number will be:\", nextNumber);\r\n      return nextNumber;\r\n    } catch (err) {\r\n      console.error(\"Error generating next sample number:\", err);\r\n      return 1;\r\n    }\r\n  };\r\n\r\n  // Load shift and samples data\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const shiftResponse = await shiftService.getById(shiftId);\r\n        setShift(shiftResponse.data);\r\n\r\n        const samplesResponse = await sampleService.getByShift(shiftId);\r\n        setSamples(samplesResponse.data || []);\r\n\r\n        // Get project ID from shift data\r\n        const projectId = shiftResponse.data?.job?.project?.projectID;\r\n        if (projectId) {\r\n          // Fetch all samples for the project to determine next sample number\r\n          const projectSamplesResponse = await sampleService.getByProject(\r\n            projectId\r\n          );\r\n          const allProjectSamples = projectSamplesResponse.data || [];\r\n\r\n          // Find the highest sample number\r\n          const highestNumber = allProjectSamples.reduce((max, sample) => {\r\n            const match = sample.fullSampleID?.match(/-(\\d+)$/);\r\n            const number = match ? parseInt(match[1]) : 0;\r\n            return Math.max(max, number);\r\n          }, 0);\r\n\r\n          // Set next sample number\r\n          setNextSampleNumber(highestNumber + 1);\r\n        }\r\n\r\n        if (shiftResponse.data?.descriptionOfWorks) {\r\n          setDescriptionOfWorks(shiftResponse.data.descriptionOfWorks);\r\n        }\r\n\r\n        setIsCompleteDisabled(!validateSamplesComplete(samples));\r\n        setError(null);\r\n      } catch (err) {\r\n        console.error(\"Error fetching data:\", err);\r\n        setError(\"Failed to load data. Please try again later.\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [shiftId]);\r\n\r\n  const handleSearch = (event) => {\r\n    setSearch(event.target.value);\r\n  };\r\n\r\n  const handleSort = (field) => {\r\n    if (field === sortField) {\r\n      setSortAsc(!sortAsc);\r\n    } else {\r\n      setSortField(field);\r\n      setSortAsc(true);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (sampleId) => {\r\n    if (window.confirm(\"Are you sure you want to delete this sample?\")) {\r\n      try {\r\n        await sampleService.delete(sampleId);\r\n        setSamples(samples.filter((sample) => sample._id !== sampleId));\r\n      } catch (err) {\r\n        console.error(\"Error deleting sample:\", err);\r\n        setError(\"Failed to delete sample. Please try again.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const filteredSamples = samples.filter((sample) =>\r\n    Object.values(sample).some(\r\n      (value) =>\r\n        value && value.toString().toLowerCase().includes(search.toLowerCase())\r\n    )\r\n  );\r\n\r\n  const sortedSamples = [...filteredSamples].sort((a, b) => {\r\n    if (sortField === \"sampleNumber\" || sortField === \"fullSampleID\") {\r\n      const aMatch = a.fullSampleID?.match(/-(\\d+)$/);\r\n      const bMatch = b.fullSampleID?.match(/-(\\d+)$/);\r\n      const aNum = aMatch ? parseInt(aMatch[1], 10) : 0;\r\n      const bNum = bMatch ? parseInt(bMatch[1], 10) : 0;\r\n      return sortAsc ? aNum - bNum : bNum - aNum;\r\n    } else {\r\n      const aValue = a[sortField];\r\n      const bValue = b[sortField];\r\n      if (aValue < bValue) return sortAsc ? -1 : 1;\r\n      if (aValue > bValue) return sortAsc ? 1 : -1;\r\n      return 0;\r\n    }\r\n  });\r\n\r\n  // Add validation function\r\n  const validateSamplesComplete = (samples) => {\r\n    return samples.every((sample) => {\r\n      // If it's a field blank sample, skip validation\r\n      if (sample.location === \"Field blank\") {\r\n        return true;\r\n      }\r\n\r\n      // For non-field blank samples, validate all required fields\r\n      return (\r\n        sample.sampleNumber &&\r\n        sample.type &&\r\n        sample.location &&\r\n        sample.startTime &&\r\n        sample.endTime &&\r\n        sample.initialFlowrate &&\r\n        sample.finalFlowrate &&\r\n        sample.averageFlowrate\r\n      );\r\n    });\r\n  };\r\n\r\n  // Add handleSampleComplete function\r\n  const handleSampleComplete = async () => {\r\n    try {\r\n      // Update shift status\r\n      await shiftService.update(shiftId, { status: \"sampling_complete\" });\r\n      // Refetch shift to update UI\r\n      const shiftResponse = await shiftService.getById(shiftId);\r\n      setShift(shiftResponse.data);\r\n    } catch (error) {\r\n      console.error(\"Error updating shift status:\", error);\r\n      setError(\"Failed to update shift status. Please try again.\");\r\n    }\r\n  };\r\n\r\n  // Add handler for Samples Submitted to Lab\r\n  const handleSamplesSubmittedToLab = async () => {\r\n    try {\r\n      const currentDate = new Date().toISOString();\r\n      await shiftService.update(shiftId, {\r\n        status: \"samples_submitted_to_lab\",\r\n        samplesReceivedDate: currentDate,\r\n      });\r\n      // Refetch shift to update UI\r\n      const shiftResponse = await shiftService.getById(shiftId);\r\n      setShift(shiftResponse.data);\r\n    } catch (error) {\r\n      setError(\"Failed to update shift status to 'Samples Submitted to Lab'.\");\r\n    }\r\n  };\r\n\r\n  const handleAddSample = () => {\r\n    // Reset shift status to ongoing when adding a new sample\r\n    shiftService.update(shiftId, { status: \"ongoing\" });\r\n    navigate(`/air-monitoring/shift/${shiftId}/samples/new`, {\r\n      state: { nextSampleNumber },\r\n    });\r\n  };\r\n\r\n  const handleDescriptionChange = (e) => {\r\n    setDescriptionOfWorks(e.target.value);\r\n    setDescSaveStatus(\"\");\r\n  };\r\n\r\n  const saveDescriptionOfWorks = async () => {\r\n    try {\r\n      await shiftService.update(shiftId, { descriptionOfWorks });\r\n      setDescSaveStatus(\"Saved\");\r\n    } catch (err) {\r\n      setDescSaveStatus(\"Error\");\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <Typography>Loading...</Typography>;\r\n  }\r\n\r\n  if (error) {\r\n    return <Typography color=\"error\">{error}</Typography>;\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ p: { xs: 2, sm: 3, md: 4 } }}>\r\n      <Button\r\n        startIcon={<ArrowBackIcon />}\r\n        onClick={() =>\r\n          navigate(`/air-monitoring/jobs/${shift?.job?._id}/shifts`)\r\n        }\r\n        sx={{ mb: 4 }}\r\n      >\r\n        Back to Shifts\r\n      </Button>\r\n\r\n      {/* Description of Works Field */}\r\n      <Box sx={{ mb: 3 }}>\r\n        <Typography variant=\"h6\" sx={{ mb: 1 }}>\r\n          Description of Works\r\n        </Typography>\r\n        <TextField\r\n          fullWidth\r\n          multiline\r\n          minRows={2}\r\n          maxRows={6}\r\n          value={descriptionOfWorks}\r\n          onChange={handleDescriptionChange}\r\n          placeholder=\"Enter a description of works for this shift...\"\r\n          required\r\n          error={!descriptionOfWorks}\r\n          helperText={\r\n            !descriptionOfWorks ? \"Description of works is required\" : \"\"\r\n          }\r\n        />\r\n        <Box sx={{ mt: 1, display: \"flex\", alignItems: \"center\", gap: 2 }}>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={saveDescriptionOfWorks}\r\n            disabled={!descriptionOfWorks.trim()}\r\n            sx={{\r\n              backgroundColor: theme.palette.primary.main,\r\n              \"&:hover\": {\r\n                backgroundColor: theme.palette.primary.dark,\r\n              },\r\n            }}\r\n          >\r\n            Save Description\r\n          </Button>\r\n          {descSaveStatus === \"Saved\" && (\r\n            <Typography variant=\"caption\" color=\"success.main\">\r\n              Description saved successfully\r\n            </Typography>\r\n          )}\r\n          {descSaveStatus === \"Error\" && (\r\n            <Typography variant=\"caption\" color=\"error.main\">\r\n              Error saving description\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n\r\n      <Typography\r\n        variant=\"h4\"\r\n        sx={{\r\n          color:\r\n            theme.palette.mode === \"dark\"\r\n              ? \"#fff\"\r\n              : theme.palette.secondary[200],\r\n          mb: 4,\r\n        }}\r\n      >\r\n        Samples for{\" \"}\r\n        {shift?.name ? `Shift ${formatDate(shift.date)}` : \"Loading...\"}\r\n      </Typography>\r\n\r\n      <Stack\r\n        direction={{ xs: \"column\", sm: \"row\" }}\r\n        spacing={2}\r\n        sx={{ mb: 4 }}\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        <TextField\r\n          label=\"Search\"\r\n          variant=\"outlined\"\r\n          value={search}\r\n          onChange={handleSearch}\r\n          sx={{ width: { xs: \"100%\", sm: \"300px\" } }}\r\n          InputProps={{\r\n            startAdornment: (\r\n              <InputAdornment position=\"start\">\r\n                <SearchIcon />\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          onClick={handleAddSample}\r\n          sx={{\r\n            backgroundColor: theme.palette.primary.main,\r\n            \"&:hover\": {\r\n              backgroundColor: theme.palette.primary.dark,\r\n            },\r\n          }}\r\n        >\r\n          Add Sample\r\n        </Button>\r\n      </Stack>\r\n\r\n      <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell onClick={() => handleSort(\"sampleNumber\")}>\r\n                Sample Number\r\n              </TableCell>\r\n              <TableCell onClick={() => handleSort(\"type\")}>Type</TableCell>\r\n              <TableCell onClick={() => handleSort(\"location\")}>\r\n                Location\r\n              </TableCell>\r\n              <TableCell onClick={() => handleSort(\"startTime\")}>\r\n                Start Time\r\n              </TableCell>\r\n              <TableCell onClick={() => handleSort(\"endTime\")}>\r\n                End Time\r\n              </TableCell>\r\n              <TableCell onClick={() => handleSort(\"averageFlowrate\")}>\r\n                Flow Rate (L/min)\r\n              </TableCell>\r\n              <TableCell>Actions</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {sortedSamples.map((sample) => (\r\n              <TableRow key={sample._id}>\r\n                <TableCell>{sample.fullSampleID}</TableCell>\r\n                <TableCell>{sample.type}</TableCell>\r\n                <TableCell>{sample.location}</TableCell>\r\n                <TableCell>{formatTime(sample.startTime)}</TableCell>\r\n                <TableCell>\r\n                  {sample.endTime ? formatTime(sample.endTime) : \"-\"}\r\n                </TableCell>\r\n                <TableCell>{sample.averageFlowrate}</TableCell>\r\n                <TableCell>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    onClick={() =>\r\n                      navigate(\r\n                        `/air-monitoring/shift/${shiftId}/samples/edit/${sample._id}`\r\n                      )\r\n                    }\r\n                    sx={{ mr: 1 }}\r\n                  >\r\n                    Edit Sample\r\n                  </Button>\r\n                  <IconButton onClick={() => handleDelete(sample._id)}>\r\n                    <DeleteIcon />\r\n                  </IconButton>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"flex-end\",\r\n          mt: 2,\r\n          gap: 2,\r\n        }}\r\n      >\r\n        {![\r\n          \"sampling_complete\",\r\n          \"samples_submitted_to_lab\",\r\n          \"analysis_complete\",\r\n          \"shift_complete\",\r\n        ].includes(shift?.status) && (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={handleSampleComplete}\r\n            disabled={isCompleteDisabled || shift?.status !== \"ongoing\"}\r\n            sx={{\r\n              backgroundColor: theme.palette.info.main,\r\n              color: theme.palette.info.contrastText,\r\n              \"&:hover\": {\r\n                backgroundColor: theme.palette.info.dark,\r\n              },\r\n              \"&.Mui-disabled\": {\r\n                backgroundColor: theme.palette.grey[700],\r\n                color: theme.palette.grey[500],\r\n              },\r\n            }}\r\n          >\r\n            Sampling Complete\r\n          </Button>\r\n        )}\r\n        {![\r\n          \"samples_submitted_to_lab\",\r\n          \"analysis_complete\",\r\n          \"shift_complete\",\r\n        ].includes(shift?.status) &&\r\n          shift?.status === \"sampling_complete\" && (\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={handleSamplesSubmittedToLab}\r\n              sx={{\r\n                backgroundColor: theme.palette.warning.main,\r\n                color: theme.palette.warning.contrastText,\r\n                \"&:hover\": {\r\n                  backgroundColor: theme.palette.warning.dark,\r\n                },\r\n              }}\r\n            >\r\n              Samples Submitted to Lab\r\n            </Button>\r\n          )}\r\n      </Box>\r\n\r\n      {[\"samples_submitted_to_lab\", \"analysis_complete\"].includes(\r\n        shift?.status\r\n      ) && (\r\n        <Box sx={{ display: \"flex\", justifyContent: \"flex-end\", mt: 3 }}>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() =>\r\n              navigate(`/air-monitoring/shift/${shiftId}/analysis`)\r\n            }\r\n            sx={{\r\n              backgroundColor: theme.palette.success.main,\r\n              color: theme.palette.success.contrastText,\r\n              \"&:hover\": {\r\n                backgroundColor: theme.palette.success.dark,\r\n              },\r\n            }}\r\n          >\r\n            COMPLETE ANALYSIS\r\n          </Button>\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default SampleList;\r\n"],"names":["SampleList","theme","useTheme","shiftId","useParams","navigate","useNavigate","samples","setSamples","useState","search","setSearch","sortField","setSortField","sortAsc","setSortAsc","shift","setShift","loading","setLoading","error","setError","isCompleteDisabled","setIsCompleteDisabled","nextSampleNumber","setNextSampleNumber","descriptionOfWorks","setDescriptionOfWorks","descSaveStatus","setDescSaveStatus","useEffect","async","_shiftResponse$data","_shiftResponse$data$j","_shiftResponse$data$j2","_shiftResponse$data2","shiftResponse","shiftService","getById","data","samplesResponse","sampleService","getByShift","projectId","job","project","projectID","projectSamplesResponse","getByProject","highestNumber","reduce","max","sample","_sample$fullSampleID","match","fullSampleID","number","parseInt","Math","validateSamplesComplete","err","console","fetchData","handleSort","field","sortedSamples","filter","Object","values","some","value","toString","toLowerCase","includes","sort","a","b","_a$fullSampleID","_b$fullSampleID","aMatch","bMatch","aNum","bNum","aValue","bValue","every","location","sampleNumber","type","startTime","endTime","initialFlowrate","finalFlowrate","averageFlowrate","_jsx","Typography","children","color","_jsxs","Box","sx","p","xs","sm","md","Button","startIcon","ArrowBackIcon","onClick","_shift$job","concat","_id","mb","variant","TextField","fullWidth","multiline","minRows","maxRows","onChange","e","target","placeholder","required","helperText","mt","display","alignItems","gap","update","disabled","trim","backgroundColor","palette","primary","main","dark","mode","secondary","name","formatDate","date","Stack","direction","spacing","justifyContent","label","event","width","InputProps","startAdornment","InputAdornment","position","SearchIcon","AddIcon","handleAddSample","status","state","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","formatTime","size","mr","IconButton","window","confirm","delete","sampleId","handleDelete","DeleteIcon","info","contrastText","grey","currentDate","Date","toISOString","samplesReceivedDate","warning","success"],"sourceRoot":""}