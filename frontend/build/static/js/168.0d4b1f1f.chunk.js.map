{"version":3,"file":"static/js/168.0d4b1f1f.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Visibility.js","../node_modules/@mui/icons-material/esm/Print.js","services/asbestosClearanceReportService.js","utils/templatePDFGenerator.js","services/asbestosClearanceService.js","../node_modules/@mui/icons-material/esm/Download.js","../node_modules/@mui/icons-material/esm/Search.js","../node_modules/@mui/icons-material/esm/Clear.js","scenes/reports/index.jsx","services/projectService.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5M12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5m0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3\"\n}), 'Visibility');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 8H5c-1.66 0-3 1.34-3 3v6h4v4h12v-4h4v-6c0-1.66-1.34-3-3-3m-3 11H8v-5h8zm3-7c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1m-1-9H6v4h12z\"\n}), 'Print');","import api from './axios';\n\nconst BASE_URL = '/asbestos-clearance-reports';\n\nconst asbestosClearanceReportService = {\n  // Get all clearance reports with optional filtering\n  getAll: async (params = {}) => {\n    const response = await api.get(BASE_URL, { params });\n    return response.data;\n  },\n\n  // Get clearance reports by clearance ID\n  getByClearanceId: async (clearanceId) => {\n    const response = await api.get(`${BASE_URL}/clearance/${clearanceId}`);\n    return response.data;\n  },\n\n  // Get a single clearance report by ID\n  getById: async (id) => {\n    const response = await api.get(`${BASE_URL}/${id}`);\n    return response.data;\n  },\n\n  // Create a new clearance report\n  create: async (data) => {\n    const response = await api.post(BASE_URL, data);\n    return response.data;\n  },\n\n  // Update a clearance report\n  update: async (id, data) => {\n    const response = await api.put(`${BASE_URL}/${id}`, data);\n    return response.data;\n  },\n\n  // Delete a clearance report\n  delete: async (id) => {\n    const response = await api.delete(`${BASE_URL}/${id}`);\n    return response.data;\n  },\n};\n\nexport default asbestosClearanceReportService; ","import jsPDF from \"jspdf\";\nimport html2canvas from \"html2canvas\";\n\nexport const generateTemplatePDF = async (template, sampleData, replacePlaceholders) => {\n  // Create a new PDF document\n  const doc = new jsPDF();\n  \n  // Set up the page\n  const pageWidth = doc.internal.pageSize.getWidth();\n  const pageHeight = doc.internal.pageSize.getHeight();\n  const margin = 20;\n  const contentWidth = pageWidth - (2 * margin);\n  \n  let y = margin;\n\n  // Helper function to add text with proper spacing\n  const addText = (text, fontSize = 11, fontStyle = \"normal\", spacing = 8) => {\n    if (!text) return y;\n    \n    doc.setFontSize(fontSize);\n    doc.setFont(\"helvetica\", fontStyle);\n    \n    const lines = doc.splitTextToSize(text, contentWidth);\n    doc.text(text, margin, y, { maxWidth: contentWidth });\n    \n    y += (lines.length * fontSize * 1.2) + spacing;\n    return y;\n  };\n\n  // Helper function to add header\n  const addHeader = (text, fontSize = 14, fontStyle = \"bold\") => {\n    return addText(text, fontSize, fontStyle, 12);\n  };\n\n  // Front Cover\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.frontCoverTitle || \"Non-friable Asbestos Removal Clearance\"\n    ),\n    16,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.frontCoverSubtitle || \"\"),\n    12,\n    \"normal\",\n    20\n  );\n\n  // Add a line break\n  y += 10;\n\n  // Company Details\n  if (template.companyDetails) {\n    y = addHeader(\"Company Details\", 12, \"bold\");\n    Object.entries(template.companyDetails).forEach(([key, value]) => {\n      const label = key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, \" $1\");\n      y = addText(`${label}: ${value}`, 10, \"normal\", 4);\n    });\n    y += 10;\n  }\n\n  // Inspection Details\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.inspectionDetailsTitle || \"Inspection Details\"\n    ),\n    12,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.inspectionIntroduction || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.inspectionSpecifics || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.tableIntroduction || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n\n  // Add a sample inspection table\n  y = addText(\"Sample Inspection Results:\", 10, \"bold\", 4);\n  \n  // Simple table structure\n  const tableData = [\n    [\"Area\", \"Material Type\", \"Condition\", \"Result\"],\n    [\"Kitchen\", \"Vinyl Floor Tiles\", \"Good\", \"Pass\"],\n    [\"Bathroom\", \"Vinyl Floor Tiles\", \"Good\", \"Pass\"],\n    [\"Living Room\", \"Vinyl Floor Tiles\", \"Good\", \"Pass\"],\n  ];\n\n  tableData.forEach((row, index) => {\n    const isHeader = index === 0;\n    const fontStyle = isHeader ? \"bold\" : \"normal\";\n    const fontSize = isHeader ? 10 : 9;\n    \n    // Calculate column widths\n    const colWidths = [40, 50, 40, 30];\n    let x = margin;\n    \n    row.forEach((cell, colIndex) => {\n      doc.setFontSize(fontSize);\n      doc.setFont(\"helvetica\", fontStyle);\n      doc.text(cell, x, y, { maxWidth: colWidths[colIndex] });\n      x += colWidths[colIndex] + 5;\n    });\n    \n    y += fontSize * 1.2 + 2;\n  });\n  \n  y += 10;\n\n  // Check if we need a new page\n  if (y > pageHeight - 100) {\n    doc.addPage();\n    y = margin;\n  }\n\n  // Clearance Certification\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.clearanceCertificationTitle || \"Clearance Certification\"\n    ),\n    12,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.clearanceCertificationText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.riskAssessmentText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.contactText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.behalfText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.signatureTitle || \"\"),\n    10,\n    \"bold\",\n    8\n  );\n\n  // Check if we need a new page\n  if (y > pageHeight - 100) {\n    doc.addPage();\n    y = margin;\n  }\n\n  // Background Information\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.backgroundTitle || \"Background Information\"\n    ),\n    12,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.backgroundIntroduction || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.bulletPoint1 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.bulletPoint2 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.requirementsText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.bulletPoint3 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.bulletPoint4 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.bulletPoint5 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n\n  // Check if we need a new page\n  if (y > pageHeight - 100) {\n    doc.addPage();\n    y = margin;\n  }\n\n  // Legislative Requirements\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.legislativeTitle || \"Legislative Requirements\"\n    ),\n    12,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.legislativeIntroduction || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.legislativePoint1 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.legislativePoint2 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n  y = addText(\n    `• ${replacePlaceholders(template.standardSections.legislativePoint3 || \"\")}`,\n    10,\n    \"normal\",\n    4\n  );\n\n  // Limitations\n  y = addHeader(\n    replacePlaceholders(\n      template.standardSections.limitationsTitle || \"Limitations\"\n    ),\n    12,\n    \"bold\"\n  );\n  y = addText(\n    replacePlaceholders(template.standardSections.limitationsText || \"\"),\n    10,\n    \"normal\",\n    8\n  );\n\n  // Check if we need a new page for signature\n  if (y > pageHeight - 150) {\n    doc.addPage();\n    y = margin;\n  }\n\n  // Signature Section\n  y = addHeader(\"Authorised Signature\", 12, \"bold\");\n  y += 20; // Space for signature line\n  \n  // Signature line\n  doc.setLineWidth(0.5);\n  doc.line(margin, y, margin + 80, y);\n  y += 5;\n  \n  // Signature details\n  y = addText(\"Name: John Smith\", 10, \"normal\", 4);\n  y = addText(\"License: AI000456\", 10, \"normal\", 4);\n  y = addText(\"Date: 25 July 2024\", 10, \"normal\", 4);\n  \n  y += 20;\n\n  // Footer\n  y = addText(\n    replacePlaceholders(template.standardSections.footerText || \"\"),\n    9,\n    \"normal\",\n    8\n  );\n\n  // Save the PDF\n  const fileName = `asbestos-clearance-template-preview-${new Date().toISOString().split('T')[0]}.pdf`;\n  doc.save(fileName);\n\n  return fileName;\n};\n\n/**\n * Generate PDF from HTML templates using server-side Puppeteer\n * @param {string} templateType - Type of template (e.g., 'asbestos-clearance')\n * @param {Object} data - Clearance data\n * @returns {Promise<string>} - Generated PDF filename\n */\nexport const generateHTMLPDF = async (templateType, data) => {\n  return generateHTMLTemplatePDF(templateType, data);\n    };\n\nexport const generateHTMLTemplatePDF = async (templateType, data) => {\n  try {\n    console.log('Starting server-side PDF generation with data:', data);\n    \n    // Get the API base URL from the environment\n    const apiBaseUrl = process.env.NODE_ENV === 'development' \n      ? \"http://localhost:5000/api\" \n      : \"https://landd-app-backend1.onrender.com/api\";\n    \n    const requestUrl = `${apiBaseUrl}/pdf/generate-asbestos-clearance?t=${Date.now()}`;\n    console.log('Calling backend URL:', requestUrl);\n\n    // Call the server-side PDF generation endpoint with cache busting\n    const response = await fetch(requestUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      },\n      body: JSON.stringify({ clearanceData: data })\n    });\n\n    console.log('Response status:', response.status);\n    console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to generate PDF');\n    }\n\n    // Get the PDF blob\n    const pdfBlob = await response.blob();\n    console.log('PDF blob size:', pdfBlob.size, 'bytes');\n\n    // Create a download link\n    const url = window.URL.createObjectURL(pdfBlob);\n    const link = document.createElement('a');\n    link.href = url;\n\n    // Generate filename\n    const fileName = `asbestos-clearance-${data.projectId?.name || 'report'}-${new Date().toISOString().split('T')[0]}.pdf`;\n    link.download = fileName;\n\n    // Trigger download\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    // Clean up\n    window.URL.revokeObjectURL(url);\n    \n    console.log('PDF generation completed successfully:', fileName);\n    return fileName;\n    \n  } catch (error) {\n    console.error(\"Error generating HTML template PDF:\", error);\n    console.error(\"Error stack:\", error.stack);\n    throw error;\n  }\n}; ","import axios from './axios';\r\n\r\nconst API_BASE_URL = '/asbestos-clearances';\r\n\r\nconst asbestosClearanceService = {\r\n  // Get all asbestos clearances with optional filters\r\n  getAll: async (params = {}) => {\r\n    const response = await axios.get(API_BASE_URL, { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Get single asbestos clearance by ID\r\n  getById: async (id) => {\r\n    const response = await axios.get(`${API_BASE_URL}/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create new asbestos clearance\r\n  create: async (clearanceData) => {\r\n    const response = await axios.post(API_BASE_URL, clearanceData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update asbestos clearance\r\n  update: async (id, clearanceData) => {\r\n    const response = await axios.put(`${API_BASE_URL}/${id}`, clearanceData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete asbestos clearance\r\n  delete: async (id) => {\r\n    const response = await axios.delete(`${API_BASE_URL}/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update status only\r\n  updateStatus: async (id, status) => {\r\n    const response = await axios.patch(`${API_BASE_URL}/${id}/status`, { status });\r\n    return response.data;\r\n  },\r\n\r\n  // Get statistics\r\n  getStats: async () => {\r\n    const response = await axios.get(`${API_BASE_URL}/stats/overview`);\r\n    return response.data;\r\n  },\r\n\r\n  // Search clearances\r\n  search: async (searchTerm, filters = {}) => {\r\n    const params = {\r\n      search: searchTerm,\r\n      ...filters\r\n    };\r\n    const response = await axios.get(API_BASE_URL, { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Get clearances by status\r\n  getByStatus: async (status) => {\r\n    const response = await axios.get(API_BASE_URL, { \r\n      params: { status } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get clearances by asbestos removalist\r\n  getByRemovalist: async (asbestosRemovalist) => {\r\n    const response = await axios.get(API_BASE_URL, { \r\n      params: { asbestosRemovalist } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Upload air monitoring report\r\n  uploadAirMonitoringReport: async (id, reportData) => {\r\n    const response = await axios.post(`${API_BASE_URL}/${id}/air-monitoring-report`, reportData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get clearance items\r\n  getItems: async (clearanceId) => {\r\n    const response = await axios.get(`${API_BASE_URL}/${clearanceId}/items`);\r\n    return response.data;\r\n  },\r\n\r\n  // Add clearance item\r\n  addItem: async (clearanceId, itemData) => {\r\n    const response = await axios.post(`${API_BASE_URL}/${clearanceId}/items`, itemData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update clearance item\r\n  updateItem: async (clearanceId, itemId, itemData) => {\r\n    const response = await axios.put(`${API_BASE_URL}/${clearanceId}/items/${itemId}`, itemData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete clearance item\r\n  deleteItem: async (clearanceId, itemId) => {\r\n    const response = await axios.delete(`${API_BASE_URL}/${clearanceId}/items/${itemId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get air monitoring reports for a project\r\n  getAirMonitoringReports: async (projectId) => {\r\n    const response = await axios.get(`${API_BASE_URL}/air-monitoring-reports/${projectId}`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default asbestosClearanceService; ","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5zM19 9h-4V3H9v6H5l7 7z\"\n}), 'Download');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Clear');","import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  Box,\n  Typography,\n  TextField,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Autocomplete,\n  CircularProgress,\n  Alert,\n  Chip,\n  IconButton,\n  Tooltip,\n  InputAdornment,\n} from \"@mui/material\";\nimport {\n  Search as SearchIcon,\n  Visibility as VisibilityIcon,\n  Download as DownloadIcon,\n  Print as PrintIcon,\n  Clear as ClearIcon,\n} from \"@mui/icons-material\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { tokens } from \"../../theme\";\nimport projectService from \"../../services/projectService\";\nimport asbestosClearanceReportService from \"../../services/asbestosClearanceReportService\";\nimport {\n  shiftService,\n  jobService,\n  sampleService,\n  clientService,\n} from \"../../services/api\";\nimport { generateShiftReport } from \"../../utils/generateShiftReport\";\n\nconst Reports = () => {\n  const theme = useTheme();\n  const colors = tokens;\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [selectedProject, setSelectedProject] = useState(null);\n  const [projectReports, setProjectReports] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [searching, setSearching] = useState(false);\n  const [loadingReports, setLoadingReports] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [projectsWithReports, setProjectsWithReports] = useState(new Set());\n  const navigate = useNavigate();\n\n  // Search projects function - using the same approach as projects page\n  const handleSearch = async (searchValue = searchTerm) => {\n    const termToSearch = searchValue || searchTerm;\n    if (!termToSearch.trim()) {\n      setError(\"Please enter a search term\");\n      return;\n    }\n\n    try {\n      setSearching(true);\n      setError(\"\");\n      setSearchResults([]);\n      setSelectedProject(null);\n      setProjectReports([]);\n\n      // Use the same parameters as the projects page\n      const params = {\n        page: 1,\n        limit: 1000, // Large limit to get more results\n        sortBy: \"projectID\",\n        sortOrder: \"desc\",\n        search: termToSearch.trim(),\n      };\n\n      // Ensure limit is a number\n      params.limit = parseInt(params.limit);\n\n      console.log(\"Search params:\", params);\n      console.log(\"Current searchTerm:\", searchTerm);\n      console.log(\"Search term being used:\", termToSearch.trim());\n      const response = await projectService.getAll(params);\n\n      console.log(\"Search response:\", response);\n\n      // Use the same response handling as projects page\n      const projectsData = Array.isArray(response.data)\n        ? response.data\n        : response.data?.data || [];\n\n      console.log(\"Projects data:\", projectsData.length);\n\n      setSearchResults(projectsData);\n\n      // Use the reports_present field from the API response\n      const projectsWithReportsSet = new Set();\n\n      projectsData.forEach((project) => {\n        if (project.reports_present) {\n          projectsWithReportsSet.add(project._id);\n        }\n      });\n\n      setProjectsWithReports(projectsWithReportsSet);\n\n      if (projectsData.length === 0) {\n        setError(\"No projects found matching your search term\");\n      }\n    } catch (err) {\n      console.error(\"Error searching projects:\", err);\n      setError(\"Failed to search projects\");\n      setSearchResults([]);\n    } finally {\n      setSearching(false);\n    }\n  };\n\n  const handleClearSearch = () => {\n    setSearchTerm(\"\");\n    setSearchResults([]);\n    setSelectedProject(null);\n    setProjectReports([]);\n    setError(\"\");\n    setProjectsWithReports(new Set());\n  };\n\n  const handleLoadReportsForProject = async (project) => {\n    if (!projectsWithReports.has(project._id)) {\n      return; // Don't allow loading reports if project has no reports\n    }\n\n    try {\n      setLoadingReports(true);\n      setError(\"\");\n\n      // Collect all reports for the selected project\n      const allReports = [];\n\n      // 1. Get asbestos clearance reports\n      try {\n        const clearanceReports = await asbestosClearanceReportService.getAll({\n          projectId: project._id,\n        });\n        if (clearanceReports.reports) {\n          // Group reports by clearanceId to avoid duplicates\n          const clearanceGroups = {};\n          clearanceReports.reports.forEach((report) => {\n            const clearanceId = report.clearanceId?._id || report.clearanceId;\n            if (!clearanceGroups[clearanceId]) {\n              clearanceGroups[clearanceId] = {\n                id: clearanceId,\n                date: new Date(\n                  report.clearanceId?.clearanceDate || report.createdAt\n                ),\n                type: \"Asbestos Clearance Report\",\n                status: report.clearanceId?.status || \"Unknown\",\n                report: report,\n                category: \"clearance\",\n              };\n            }\n          });\n\n          // Add only one report per clearance\n          Object.values(clearanceGroups).forEach((report) => {\n            allReports.push(report);\n          });\n        }\n      } catch (err) {\n        console.log(\"No clearance reports found for this project:\", err);\n      }\n\n      // 2. Get air monitoring reports (shifts) - ONLY if no clearance reports exist\n      if (allReports.length === 0) {\n        try {\n          // First get all jobs for this project\n          const jobsResponse = await jobService.getAll();\n          const projectJobs =\n            jobsResponse.data?.filter(\n              (job) =>\n                job.project === project._id || job.project?._id === project._id\n            ) || [];\n\n          // Get shifts for each job\n          for (const job of projectJobs) {\n            try {\n              const shiftsResponse = await shiftService.getByJob(job._id);\n              const shifts = shiftsResponse.data || [];\n\n              shifts.forEach((shift) => {\n                // Only include shifts that have reports (analysis complete or shift complete)\n                if (\n                  shift.status === \"analysis_complete\" ||\n                  shift.status === \"shift_complete\" ||\n                  shift.reportApprovedBy\n                ) {\n                  allReports.push({\n                    id: shift._id,\n                    date: new Date(\n                      shift.reportIssueDate ||\n                        shift.updatedAt ||\n                        shift.createdAt\n                    ),\n                    type: \"Air Monitoring Report\",\n                    status: shift.reportApprovedBy\n                      ? \"Authorized\"\n                      : shift.status,\n                    report: shift,\n                    jobName: job.name,\n                    shiftName: shift.name,\n                  });\n                }\n              });\n            } catch (err) {\n              console.log(`No shifts found for job ${job._id}`);\n            }\n          }\n        } catch (err) {\n          console.log(\"No air monitoring reports found for this project\");\n        }\n      }\n\n      // Sort reports by date (newest first) and take only the most recent one\n      allReports.sort((a, b) => b.date - a.date);\n\n      // Only keep the most recent report\n      const finalReports = allReports.length > 0 ? [allReports[0]] : [];\n\n      setProjectReports(finalReports);\n      setSelectedProject(project);\n    } catch (err) {\n      console.error(\"Error loading reports:\", err);\n      setError(\"Failed to load reports for this project\");\n    } finally {\n      setLoadingReports(false);\n    }\n  };\n\n  const handleViewReport = async (report) => {\n    try {\n      if (report.type === \"Air Monitoring Report\") {\n        // Generate air monitoring report\n        const shift = report.report;\n        const jobResponse = await jobService.getById(\n          shift.job?._id || shift.job\n        );\n        const samplesResponse = await sampleService.getByShift(shift._id);\n\n        // Ensure we have the complete sample data including analysis\n        const samplesWithAnalysis = await Promise.all(\n          samplesResponse.data.map(async (sample) => {\n            if (!sample.analysis) {\n              // If analysis data is missing, fetch the complete sample data\n              const completeSample = await sampleService.getById(sample._id);\n              return completeSample.data;\n            }\n            return sample;\n          })\n        );\n\n        // Ensure project and client are fully populated\n        let project = jobResponse.data.project;\n        if (project && typeof project === \"string\") {\n          const projectResponse = await projectService.getById(project);\n          project = projectResponse.data;\n        }\n        if (project && project.client && typeof project.client === \"string\") {\n          const clientResponse = await clientService.getById(project.client);\n          project.client = clientResponse.data;\n        }\n\n        generateShiftReport({\n          shift: shift,\n          job: jobResponse.data,\n          samples: samplesWithAnalysis,\n          project: project,\n          openInNewTab: true, // Open in new tab for viewing\n        });\n      } else if (report.type === \"Asbestos Clearance Report\") {\n        // Generate asbestos clearance report\n        const clearanceReport = report.report;\n\n        // Extract the actual clearance ID - it could be a string or an object with _id\n        const clearanceId =\n          typeof clearanceReport.clearanceId === \"object\"\n            ? clearanceReport.clearanceId._id\n            : clearanceReport.clearanceId;\n\n        // Open PDF directly in browser using the existing endpoint\n        const api = require(\"../../services/axios\").default;\n        const response = await api.post(\n          \"/pdf/generate-asbestos-clearance\",\n          {\n            clearanceData: { _id: clearanceId },\n          },\n          {\n            responseType: \"blob\",\n          }\n        );\n\n        // Create blob URL and open in new tab\n        const blob = new Blob([response.data], { type: \"application/pdf\" });\n        const url = window.URL.createObjectURL(blob);\n        window.open(url, \"_blank\");\n\n        console.log(\"Asbestos clearance PDF opened in browser\");\n      }\n    } catch (err) {\n      console.error(\"Error viewing report:\", err);\n      setError(\"Failed to view report\");\n    }\n  };\n\n  const handleDownloadReport = async (report) => {\n    try {\n      if (report.type === \"Air Monitoring Report\") {\n        // Generate and download air monitoring report\n        const shift = report.report;\n        const jobResponse = await jobService.getById(\n          shift.job?._id || shift.job\n        );\n        const samplesResponse = await sampleService.getByShift(shift._id);\n\n        // Ensure we have the complete sample data including analysis\n        const samplesWithAnalysis = await Promise.all(\n          samplesResponse.data.map(async (sample) => {\n            if (!sample.analysis) {\n              // If analysis data is missing, fetch the complete sample data\n              const completeSample = await sampleService.getById(sample._id);\n              return completeSample.data;\n            }\n            return sample;\n          })\n        );\n\n        // Ensure project and client are fully populated\n        let project = jobResponse.data.project;\n        if (project && typeof project === \"string\") {\n          const projectResponse = await projectService.getById(project);\n          project = projectResponse.data;\n        }\n        if (project && project.client && typeof project.client === \"string\") {\n          const clientResponse = await clientService.getById(project.client);\n          project.client = clientResponse.data;\n        }\n\n        generateShiftReport({\n          shift: shift,\n          job: jobResponse.data,\n          samples: samplesWithAnalysis,\n          project: project,\n          openInNewTab: false, // Download instead of opening in new tab\n        });\n      } else if (report.type === \"Asbestos Clearance Report\") {\n        // Generate and download asbestos clearance report\n        const clearanceReport = report.report;\n\n        // Get the full clearance data with populated project\n        const asbestosClearanceService =\n          require(\"../../services/asbestosClearanceService\").default;\n\n        // Extract the actual clearance ID - it could be a string or an object with _id\n        const clearanceId =\n          typeof clearanceReport.clearanceId === \"object\"\n            ? clearanceReport.clearanceId._id\n            : clearanceReport.clearanceId;\n\n        const fullClearance = await asbestosClearanceService.getById(\n          clearanceId\n        );\n\n        // Use the HTML template-based PDF generation\n        const {\n          generateHTMLTemplatePDF,\n        } = require(\"../../utils/templatePDFGenerator\");\n        const fileName = await generateHTMLTemplatePDF(\n          \"asbestos-clearance\", // template type\n          fullClearance // clearance data\n        );\n\n        console.log(\n          \"Asbestos clearance PDF downloaded successfully:\",\n          fileName\n        );\n      }\n    } catch (err) {\n      console.error(\"Error downloading report:\", err);\n      setError(\"Failed to download report\");\n    }\n  };\n\n  const handlePrintReport = async (report) => {\n    try {\n      if (report.type === \"Air Monitoring Report\") {\n        // Generate and print air monitoring report\n        const shift = report.report;\n        const jobResponse = await jobService.getById(\n          shift.job?._id || shift.job\n        );\n        const samplesResponse = await sampleService.getByShift(shift._id);\n\n        // Ensure we have the complete sample data including analysis\n        const samplesWithAnalysis = await Promise.all(\n          samplesResponse.data.map(async (sample) => {\n            if (!sample.analysis) {\n              // If analysis data is missing, fetch the complete sample data\n              const completeSample = await sampleService.getById(sample._id);\n              return completeSample.data;\n            }\n            return sample;\n          })\n        );\n\n        // Ensure project and client are fully populated\n        let project = jobResponse.data.project;\n        if (project && typeof project === \"string\") {\n          const projectResponse = await projectService.getById(project);\n          project = projectResponse.data;\n        }\n        if (project && project.client && typeof project.client === \"string\") {\n          const clientResponse = await clientService.getById(project.client);\n          project.client = clientResponse.data;\n        }\n\n        // Generate report and open in new tab, then trigger print\n        generateShiftReport({\n          shift: shift,\n          job: jobResponse.data,\n          samples: samplesWithAnalysis,\n          project: project,\n          openInNewTab: true, // Open in new tab for printing\n        });\n\n        // Wait a moment for the PDF to load, then trigger print\n        setTimeout(() => {\n          window.print();\n        }, 1000);\n      } else if (report.type === \"Asbestos Clearance Report\") {\n        // TODO: Implement asbestos clearance report printing\n        console.log(\"Printing asbestos clearance report:\", report);\n      }\n    } catch (err) {\n      console.error(\"Error printing report:\", err);\n      setError(\"Failed to print report\");\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status?.toLowerCase()) {\n      case \"complete\":\n        return \"success\";\n      case \"in progress\":\n        return \"warning\";\n      case \"pending\":\n        return \"info\";\n      default:\n        return \"default\";\n    }\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom sx={{ mb: 4 }}>\n        Reports\n      </Typography>\n\n      {/* Project Search Section */}\n      <Paper sx={{ p: 3, mb: 3 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          Search Projects\n        </Typography>\n\n        <Box sx={{ display: \"flex\", gap: 2, alignItems: \"flex-start\", mb: 2 }}>\n          <TextField\n            fullWidth\n            label=\"Search for a project\"\n            placeholder=\"Enter project ID, name, or client\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            onKeyPress={(e) => {\n              if (e.key === \"Enter\") {\n                handleSearch(searchTerm);\n              }\n            }}\n            InputProps={{\n              startAdornment: (\n                <SearchIcon sx={{ mr: 1, color: \"text.secondary\" }} />\n              ),\n              endAdornment: searchTerm && (\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    size=\"small\"\n                    onClick={handleClearSearch}\n                    edge=\"end\"\n                  >\n                    <ClearIcon />\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n          />\n\n          <Button\n            variant=\"contained\"\n            onClick={() => handleSearch(searchTerm)}\n            disabled={!searchTerm.trim() || searching}\n            sx={{ minWidth: 140 }}\n          >\n            {searching ? (\n              <CircularProgress size={20} color=\"inherit\" />\n            ) : (\n              \"Search\"\n            )}\n          </Button>\n        </Box>\n\n        {/* Search Results */}\n        {searchResults.length > 0 && (\n          <Box sx={{ mt: 2 }}>\n            <Typography variant=\"subtitle1\" gutterBottom>\n              Search Results ({searchResults.length} projects found)\n            </Typography>\n            <TableContainer component={Paper} sx={{ maxHeight: 700 }}>\n              <Table size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Project ID</TableCell>\n                    <TableCell>Site Name</TableCell>\n                    <TableCell>Reports</TableCell>\n                    <TableCell align=\"center\">Action</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {searchResults.map((project) => {\n                    const hasReports = projectsWithReports.has(project._id);\n                    return (\n                      <TableRow key={project._id}>\n                        <TableCell>\n                          <Typography variant=\"body2\" fontWeight=\"medium\">\n                            {project.projectID}\n                          </Typography>\n                        </TableCell>\n                        <TableCell>{project.name}</TableCell>\n                        <TableCell>\n                          <Chip\n                            label={\n                              hasReports ? \"Reports Available\" : \"No Reports\"\n                            }\n                            color={hasReports ? \"success\" : \"error\"}\n                            size=\"small\"\n                          />\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          <Button\n                            variant=\"contained\"\n                            size=\"small\"\n                            color=\"secondary\"\n                            disabled={!hasReports}\n                            onClick={() =>\n                              (window.location.href = `/reports/project/${project._id}`)\n                            }\n                          >\n                            Load Reports\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Box>\n        )}\n      </Paper>\n\n      {/* Error Display */}\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Reports Table */}\n      {projectReports.length > 0 && (\n        <Paper sx={{ p: 3 }}>\n          <Typography variant=\"h6\" gutterBottom>\n            Reports for {selectedProject?.projectID}\n          </Typography>\n\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Date</TableCell>\n                  <TableCell>Report Type</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell align=\"center\">Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {projectReports.map((report) => (\n                  <TableRow key={report.id}>\n                    <TableCell>{report.date.toLocaleDateString()}</TableCell>\n                    <TableCell>\n                      <Typography variant=\"body2\" fontWeight=\"medium\">\n                        {report.type}\n                      </Typography>\n                      {report.jobName && (\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          {report.jobName} • {report.shiftName}\n                        </Typography>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={report.status}\n                        color={getStatusColor(report.status)}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell align=\"center\">\n                      <Box\n                        sx={{\n                          display: \"flex\",\n                          gap: 1,\n                          justifyContent: \"center\",\n                        }}\n                      >\n                        <Tooltip title=\"View Report\">\n                          <IconButton\n                            size=\"small\"\n                            onClick={() => handleViewReport(report)}\n                            color=\"primary\"\n                          >\n                            <VisibilityIcon />\n                          </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Download Report\">\n                          <IconButton\n                            size=\"small\"\n                            onClick={() => handleDownloadReport(report)}\n                            color=\"secondary\"\n                          >\n                            <DownloadIcon />\n                          </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Print Report\">\n                          <IconButton\n                            size=\"small\"\n                            onClick={() => handlePrintReport(report)}\n                            color=\"info\"\n                          >\n                            <PrintIcon />\n                          </IconButton>\n                        </Tooltip>\n                      </Box>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Paper>\n      )}\n\n      {/* No Reports Message */}\n      {selectedProject &&\n        !loadingReports &&\n        projectReports.length === 0 &&\n        !error && (\n          <Paper sx={{ p: 3, textAlign: \"center\" }}>\n            <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n              No Reports Found\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No reports have been generated for this project yet.\n            </Typography>\n          </Paper>\n        )}\n    </Box>\n  );\n};\n\nexport default Reports;\n","import axiosInstance from \"./axios\";\r\n\r\nconst projectService = {\r\n  getAll: async (params = {}) => {\r\n    const response = await axiosInstance.get(\"/projects\", { params });\r\n    return response.data;\r\n  },\r\n  getById: (id) => axiosInstance.get(`/projects/${id}`),\r\n  create: (data) => axiosInstance.post(\"/projects\", data),\r\n  update: (id, data) => axiosInstance.put(`/projects/${id}`, data),\r\n  delete: (id) => axiosInstance.delete(`/projects/${id}`),\r\n};\r\n\r\nexport default projectService; "],"names":["createSvgIcon","_jsx","d","BASE_URL","getAll","async","params","arguments","length","undefined","api","get","data","getByClearanceId","concat","clearanceId","getById","id","create","post","update","put","delete","generateTemplatePDF","template","sampleData","replacePlaceholders","doc","jsPDF","pageWidth","internal","pageSize","getWidth","pageHeight","getHeight","margin","contentWidth","y","addText","text","fontSize","fontStyle","spacing","setFontSize","setFont","lines","splitTextToSize","maxWidth","addHeader","standardSections","frontCoverTitle","frontCoverSubtitle","companyDetails","Object","entries","forEach","_ref","key","value","label","charAt","toUpperCase","slice","replace","inspectionDetailsTitle","inspectionIntroduction","inspectionSpecifics","tableIntroduction","row","index","isHeader","colWidths","x","cell","colIndex","addPage","clearanceCertificationTitle","clearanceCertificationText","riskAssessmentText","contactText","behalfText","signatureTitle","backgroundTitle","backgroundIntroduction","bulletPoint1","bulletPoint2","requirementsText","bulletPoint3","bulletPoint4","bulletPoint5","legislativeTitle","legislativeIntroduction","legislativePoint1","legislativePoint2","legislativePoint3","limitationsTitle","limitationsText","setLineWidth","line","footerText","fileName","Date","toISOString","split","save","generateHTMLPDF","templateType","generateHTMLTemplatePDF","_data$projectId","console","log","requestUrl","now","response","fetch","method","headers","localStorage","getItem","body","JSON","stringify","clearanceData","status","fromEntries","ok","errorData","json","Error","error","pdfBlob","blob","size","url","window","URL","createObjectURL","link","document","createElement","href","projectId","name","download","appendChild","click","removeChild","revokeObjectURL","stack","API_BASE_URL","axios","updateStatus","patch","getStats","search","searchTerm","filters","_objectSpread","getByStatus","getByRemovalist","asbestosRemovalist","uploadAirMonitoringReport","reportData","getItems","addItem","itemData","updateItem","itemId","deleteItem","getAirMonitoringReports","Reports","useTheme","tokens","setSearchTerm","useState","searchResults","setSearchResults","selectedProject","setSelectedProject","projectReports","setProjectReports","loading","setLoading","searching","setSearching","loadingReports","setLoadingReports","setError","projectsWithReports","setProjectsWithReports","Set","handleSearch","useNavigate","termToSearch","trim","_response$data","page","limit","sortBy","sortOrder","parseInt","projectService","projectsData","Array","isArray","projectsWithReportsSet","project","reports_present","add","_id","err","getStatusColor","toLowerCase","_jsxs","Box","sx","p","children","Typography","variant","component","gutterBottom","mb","Paper","display","gap","alignItems","TextField","fullWidth","placeholder","onChange","e","target","onKeyPress","InputProps","startAdornment","SearchIcon","mr","color","endAdornment","InputAdornment","position","IconButton","onClick","handleClearSearch","edge","ClearIcon","Button","disabled","minWidth","CircularProgress","mt","TableContainer","maxHeight","Table","TableHead","TableRow","TableCell","align","TableBody","map","hasReports","has","fontWeight","projectID","Chip","location","Alert","severity","report","date","toLocaleDateString","type","jobName","shiftName","justifyContent","Tooltip","title","_shift$job","shift","jobResponse","jobService","job","samplesResponse","sampleService","getByShift","samplesWithAnalysis","Promise","all","sample","analysis","client","clientResponse","clientService","generateShiftReport","samples","openInNewTab","clearanceReport","require","responseType","Blob","open","handleViewReport","VisibilityIcon","_shift$job2","asbestosClearanceService","fullClearance","handleDownloadReport","DownloadIcon","_shift$job3","setTimeout","print","handlePrintReport","PrintIcon","textAlign","axiosInstance"],"sourceRoot":""}