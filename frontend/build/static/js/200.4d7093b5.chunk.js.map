{"version":3,"file":"static/js/200.4d7093b5.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/CardActionArea/cardActionAreaClasses.js","../node_modules/@mui/material/CardActionArea/CardActionArea.js","../node_modules/@mui/icons-material/esm/Visibility.js","../node_modules/@mui/icons-material/Monitor.js","../node_modules/@mui/icons-material/Assessment.js","services/asbestosClearanceService.js","scenes/asbestos-removal/index.jsx","../node_modules/@mui/icons-material/esm/PictureAsPdf.js","scenes/clearances/AsbestosClearance.jsx","services/projectService.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardActionAreaUtilityClass(slot) {\n  return generateUtilityClass('MuiCardActionArea', slot);\n}\nconst cardActionAreaClasses = generateUtilityClasses('MuiCardActionArea', ['root', 'focusVisible', 'focusHighlight']);\nexport default cardActionAreaClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"className\", \"focusVisibleClassName\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled from '../styles/styled';\nimport cardActionAreaClasses, { getCardActionAreaUtilityClass } from './cardActionAreaClasses';\nimport ButtonBase from '../ButtonBase';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    focusHighlight: ['focusHighlight']\n  };\n  return composeClasses(slots, getCardActionAreaUtilityClass, classes);\n};\nconst CardActionAreaRoot = styled(ButtonBase, {\n  name: 'MuiCardActionArea',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(({\n  theme\n}) => ({\n  display: 'block',\n  textAlign: 'inherit',\n  borderRadius: 'inherit',\n  // for Safari to work https://github.com/mui/material-ui/issues/36285.\n  width: '100%',\n  [`&:hover .${cardActionAreaClasses.focusHighlight}`]: {\n    opacity: (theme.vars || theme).palette.action.hoverOpacity,\n    '@media (hover: none)': {\n      opacity: 0\n    }\n  },\n  [`&.${cardActionAreaClasses.focusVisible} .${cardActionAreaClasses.focusHighlight}`]: {\n    opacity: (theme.vars || theme).palette.action.focusOpacity\n  }\n}));\nconst CardActionAreaFocusHighlight = styled('span', {\n  name: 'MuiCardActionArea',\n  slot: 'FocusHighlight',\n  overridesResolver: (props, styles) => styles.focusHighlight\n})(({\n  theme\n}) => ({\n  overflow: 'hidden',\n  pointerEvents: 'none',\n  position: 'absolute',\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0,\n  borderRadius: 'inherit',\n  opacity: 0,\n  backgroundColor: 'currentcolor',\n  transition: theme.transitions.create('opacity', {\n    duration: theme.transitions.duration.short\n  })\n}));\nconst CardActionArea = /*#__PURE__*/React.forwardRef(function CardActionArea(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardActionArea'\n  });\n  const {\n      children,\n      className,\n      focusVisibleClassName\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(CardActionAreaRoot, _extends({\n    className: clsx(classes.root, className),\n    focusVisibleClassName: clsx(focusVisibleClassName, classes.focusVisible),\n    ref: ref,\n    ownerState: ownerState\n  }, other, {\n    children: [children, /*#__PURE__*/_jsx(CardActionAreaFocusHighlight, {\n      className: classes.focusHighlight,\n      ownerState: ownerState\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActionArea.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardActionArea;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5M12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5m0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3\"\n}), 'Visibility');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 3H4c-1.1 0-2 .9-2 2v11c0 1.1.9 2 2 2h3l-1 1v2h12v-2l-1-1h3c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2m0 13H4V5h16z\"\n}), 'Monitor');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2M9 17H7v-7h2zm4 0h-2V7h2zm4 0h-2v-4h2z\"\n}), 'Assessment');","import axios from './axios';\r\n\r\nconst API_BASE_URL = '/asbestos-clearances';\r\n\r\nconst asbestosClearanceService = {\r\n  // Get all asbestos clearances with optional filters\r\n  getAll: async (params = {}) => {\r\n    const response = await axios.get(API_BASE_URL, { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Get single asbestos clearance by ID\r\n  getById: async (id) => {\r\n    const response = await axios.get(`${API_BASE_URL}/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create new asbestos clearance\r\n  create: async (clearanceData) => {\r\n    const response = await axios.post(API_BASE_URL, clearanceData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update asbestos clearance\r\n  update: async (id, clearanceData) => {\r\n    const response = await axios.put(`${API_BASE_URL}/${id}`, clearanceData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete asbestos clearance\r\n  delete: async (id) => {\r\n    const response = await axios.delete(`${API_BASE_URL}/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update status only\r\n  updateStatus: async (id, status) => {\r\n    const response = await axios.patch(`${API_BASE_URL}/${id}/status`, { status });\r\n    return response.data;\r\n  },\r\n\r\n  // Get statistics\r\n  getStats: async () => {\r\n    const response = await axios.get(`${API_BASE_URL}/stats/overview`);\r\n    return response.data;\r\n  },\r\n\r\n  // Search clearances\r\n  search: async (searchTerm, filters = {}) => {\r\n    const params = {\r\n      search: searchTerm,\r\n      ...filters\r\n    };\r\n    const response = await axios.get(API_BASE_URL, { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Get clearances by status\r\n  getByStatus: async (status) => {\r\n    const response = await axios.get(API_BASE_URL, { \r\n      params: { status } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get clearances by asbestos removalist\r\n  getByRemovalist: async (asbestosRemovalist) => {\r\n    const response = await axios.get(API_BASE_URL, { \r\n      params: { asbestosRemovalist } \r\n    });\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default asbestosClearanceService; ","import React, { useState } from \"react\";\nimport {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  CardActionArea,\n} from \"@mui/material\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport MonitorIcon from \"@mui/icons-material/Monitor\";\nimport AssessmentIcon from \"@mui/icons-material/Assessment\";\n\n// Import components for inline display\nimport AirMonitoring from \"../air-monitoring\";\nimport AsbestosClearance from \"../clearances/AsbestosClearance\";\n\nconst AsbestosRemovalWidget = ({ title, icon, onClick, color = \"primary\" }) => (\n  <Card\n    sx={{\n      height: \"100%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      transition: \"transform 0.2s, box-shadow 0.2s\",\n      \"&:hover\": {\n        transform: \"translateY(-4px)\",\n        boxShadow: 4,\n      },\n    }}\n  >\n    <CardActionArea\n      onClick={onClick}\n      sx={{\n        height: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"stretch\",\n      }}\n    >\n      <CardContent sx={{ flexGrow: 1, textAlign: \"center\", p: 3 }}>\n        <Box sx={{ mb: 2, display: \"flex\", justifyContent: \"center\" }}>\n          {React.cloneElement(icon, {\n            sx: { fontSize: 48, color: `${color}.main` },\n          })}\n        </Box>\n        <Typography variant=\"h6\" component=\"h2\" gutterBottom>\n          {title}\n        </Typography>\n      </CardContent>\n    </CardActionArea>\n  </Card>\n);\n\nconst AsbestosRemoval = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [selectedSection, setSelectedSection] = useState(null);\n\n  const asbestosRemovalWidgets = [\n    {\n      title: \"Air Monitoring\",\n      icon: <MonitorIcon />,\n      color: \"primary\",\n      onClick: () => setSelectedSection(\"air-monitoring\"),\n    },\n    {\n      title: \"Clearances\",\n      icon: <AssessmentIcon />,\n      color: \"secondary\",\n      onClick: () => setSelectedSection(\"clearances\"),\n    },\n  ];\n\n  const renderSelectedContent = () => {\n    switch (selectedSection) {\n      case \"air-monitoring\":\n        return <AirMonitoring />;\n      case \"clearances\":\n        return <AsbestosClearance />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom sx={{ mb: 4 }}>\n        Asbestos Removal\n      </Typography>\n\n      <Grid container spacing={3}>\n        {asbestosRemovalWidgets.map((widget, index) => (\n          <Grid item xs={12} md={6} key={index}>\n            <AsbestosRemovalWidget {...widget} />\n          </Grid>\n        ))}\n      </Grid>\n\n      {selectedSection && <Box sx={{ mt: 4 }}>{renderSelectedContent()}</Box>}\n    </Box>\n  );\n};\n\nexport default AsbestosRemoval;\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2m-8.5 7.5c0 .83-.67 1.5-1.5 1.5H9v2H7.5V7H10c.83 0 1.5.67 1.5 1.5zm5 2c0 .83-.67 1.5-1.5 1.5h-2.5V7H15c.83 0 1.5.67 1.5 1.5zm4-3H19v1h1.5V11H19v2h-1.5V7h3zM9 9.5h1v-1H9zM4 6H2v14c0 1.1.9 2 2 2h14v-2H4zm10 5.5h1v-3h-1z\"\n}), 'PictureAsPdf');","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  Alert,\r\n  Snackbar,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  PictureAsPdf as PdfIcon,\r\n  Visibility as ViewIcon,\r\n} from \"@mui/icons-material\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { tokens } from \"../../theme\";\r\nimport PermissionGate from \"../../components/PermissionGate\";\r\nimport asbestosClearanceService from \"../../services/asbestosClearanceService\";\r\nimport projectService from \"../../services/projectService\";\r\nimport { generateHTMLTemplatePDF } from \"../../utils/templatePDFGenerator\";\r\n\r\nconst AsbestosClearance = () => {\r\n  const colors = tokens;\r\n  const navigate = useNavigate();\r\n\r\n  const [clearances, setClearances] = useState([]);\r\n  const [projects, setProjects] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [editingClearance, setEditingClearance] = useState(null);\r\n  const [generatingPDF, setGeneratingPDF] = useState(false);\r\n  const [snackbar, setSnackbar] = useState({\r\n    open: false,\r\n    message: \"\",\r\n    severity: \"success\",\r\n  });\r\n\r\n  const [form, setForm] = useState({\r\n    projectId: \"\",\r\n    clearanceDate: \"\",\r\n    clearanceType: \"Non-friable\",\r\n    LAA: \"\",\r\n    asbestosRemovalist: \"\",\r\n    notes: \"\",\r\n  });\r\n\r\n  // Fetch clearances and projects on component mount\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const [clearancesData, projectsData] = await Promise.all([\r\n        asbestosClearanceService.getAll(),\r\n        projectService.getAll({\r\n          limit: 1000,\r\n          status:\r\n            \"Assigned,In progress,Samples submitted,Lab Analysis Complete,Report sent for review,Ready for invoicing,Invoice sent\",\r\n        }),\r\n      ]);\r\n\r\n      console.log(\"Clearances API response:\", clearancesData);\r\n      console.log(\"Projects API response:\", projectsData);\r\n\r\n      setClearances(\r\n        clearancesData.clearances || clearancesData.data || clearancesData || []\r\n      );\r\n      setProjects(projectsData.data || projectsData);\r\n    } catch (err) {\r\n      console.error(\"Error fetching data:\", err);\r\n      setError(\"Failed to load data\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      if (editingClearance) {\r\n        await asbestosClearanceService.update(editingClearance._id, form);\r\n        setSnackbar({\r\n          open: true,\r\n          message: \"Clearance updated successfully\",\r\n          severity: \"success\",\r\n        });\r\n      } else {\r\n        await asbestosClearanceService.create(form);\r\n        setSnackbar({\r\n          open: true,\r\n          message: \"Clearance created successfully\",\r\n          severity: \"success\",\r\n        });\r\n      }\r\n\r\n      setDialogOpen(false);\r\n      setEditingClearance(null);\r\n      resetForm();\r\n      fetchData();\r\n    } catch (err) {\r\n      console.error(\"Error saving clearance:\", err);\r\n      setSnackbar({\r\n        open: true,\r\n        message: \"Failed to save clearance\",\r\n        severity: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEdit = (clearance) => {\r\n    setEditingClearance(clearance);\r\n    setForm({\r\n      projectId: clearance.projectId._id || clearance.projectId,\r\n      clearanceDate: clearance.clearanceDate\r\n        ? new Date(clearance.clearanceDate).toISOString().split(\"T\")[0]\r\n        : \"\",\r\n      clearanceType: clearance.clearanceType,\r\n      LAA: clearance.LAA,\r\n      asbestosRemovalist: clearance.asbestosRemovalist,\r\n      notes: clearance.notes || \"\",\r\n    });\r\n    setDialogOpen(true);\r\n  };\r\n\r\n  const handleDelete = async (clearance) => {\r\n    if (window.confirm(\"Are you sure you want to delete this clearance?\")) {\r\n      try {\r\n        await asbestosClearanceService.delete(clearance._id);\r\n        setSnackbar({\r\n          open: true,\r\n          message: \"Clearance deleted successfully\",\r\n          severity: \"success\",\r\n        });\r\n        fetchData();\r\n      } catch (err) {\r\n        console.error(\"Error deleting clearance:\", err);\r\n        setSnackbar({\r\n          open: true,\r\n          message: \"Failed to delete clearance\",\r\n          severity: \"error\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleViewItems = (clearance) => {\r\n    navigate(`/clearances/${clearance._id}/items`);\r\n  };\r\n\r\n  const handleGeneratePDF = async (clearance) => {\r\n    try {\r\n      setGeneratingPDF(true);\r\n\r\n      // Get the full clearance data with populated project\r\n      const fullClearance = await asbestosClearanceService.getById(\r\n        clearance._id\r\n      );\r\n\r\n      // Use the new HTML template-based PDF generation\r\n      const fileName = await generateHTMLTemplatePDF(\r\n        \"asbestos-clearance\", // template type\r\n        fullClearance // clearance data\r\n      );\r\n\r\n      setSnackbar({\r\n        open: true,\r\n        message: `PDF generated successfully: ${fileName}`,\r\n        severity: \"success\",\r\n      });\r\n    } catch (err) {\r\n      console.error(\"Error generating PDF:\", err);\r\n      setSnackbar({\r\n        open: true,\r\n        message: \"Failed to generate PDF\",\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      setGeneratingPDF(false);\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setForm({\r\n      projectId: \"\",\r\n      clearanceDate: \"\",\r\n      clearanceType: \"Non-friable\",\r\n      LAA: \"\",\r\n      asbestosRemovalist: \"\",\r\n      notes: \"\",\r\n    });\r\n  };\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case \"complete\":\r\n        return \"success\";\r\n      case \"in progress\":\r\n        return \"warning\";\r\n      case \"Site Work Complete\":\r\n        return \"info\";\r\n      default:\r\n        return \"default\";\r\n    }\r\n  };\r\n\r\n  const getProjectName = (projectId) => {\r\n    const project = projects.find((p) => p._id === projectId);\r\n    return project ? project.name : \"Unknown Project\";\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        height=\"400px\"\r\n      >\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Box m=\"20px\">\r\n        <Alert severity=\"error\">{error}</Alert>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <PermissionGate requiredPermissions={[\"asbestos.view\"]}>\r\n      <Box m=\"20px\">\r\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Typography\r\n            variant=\"h2\"\r\n            color={colors.grey[100]}\r\n            fontWeight=\"bold\"\r\n            sx={{ mb: \"5px\" }}\r\n          >\r\n            Asbestos Clearance\r\n          </Typography>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={() => {\r\n              setEditingClearance(null);\r\n              resetForm();\r\n              setDialogOpen(true);\r\n            }}\r\n            startIcon={<AddIcon />}\r\n          >\r\n            Add Clearance\r\n          </Button>\r\n        </Box>\r\n\r\n        <Card sx={{ mt: 3 }}>\r\n          <CardContent>\r\n            <TableContainer component={Paper}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Project</TableCell>\r\n                    <TableCell>Clearance Date</TableCell>\r\n                    <TableCell>Type</TableCell>\r\n                    <TableCell>LAA</TableCell>\r\n                    <TableCell>Removalist</TableCell>\r\n                    <TableCell>Status</TableCell>\r\n                    <TableCell>Actions</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {(clearances || []).map((clearance) => (\r\n                    <TableRow key={clearance._id}>\r\n                      <TableCell>\r\n                        {getProjectName(clearance.projectId)}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {clearance.clearanceDate\r\n                          ? new Date(\r\n                              clearance.clearanceDate\r\n                            ).toLocaleDateString()\r\n                          : \"N/A\"}\r\n                      </TableCell>\r\n                      <TableCell>{clearance.clearanceType}</TableCell>\r\n                      <TableCell>{clearance.LAA}</TableCell>\r\n                      <TableCell>{clearance.asbestosRemovalist}</TableCell>\r\n                      <TableCell>\r\n                        <Chip\r\n                          label={clearance.status}\r\n                          color={getStatusColor(clearance.status)}\r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <IconButton\r\n                          onClick={() => handleViewItems(clearance)}\r\n                          color=\"info\"\r\n                          size=\"small\"\r\n                          title=\"View Items\"\r\n                        >\r\n                          <ViewIcon />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          onClick={() => handleEdit(clearance)}\r\n                          color=\"primary\"\r\n                          size=\"small\"\r\n                          title=\"Edit\"\r\n                        >\r\n                          <EditIcon />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          onClick={() => handleGeneratePDF(clearance)}\r\n                          color=\"secondary\"\r\n                          size=\"small\"\r\n                          disabled={generatingPDF}\r\n                          title=\"Generate PDF\"\r\n                        >\r\n                          <PdfIcon />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          onClick={() => handleDelete(clearance)}\r\n                          color=\"error\"\r\n                          size=\"small\"\r\n                          title=\"Delete\"\r\n                        >\r\n                          <DeleteIcon />\r\n                        </IconButton>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Add/Edit Dialog */}\r\n        <Dialog\r\n          open={dialogOpen}\r\n          onClose={() => setDialogOpen(false)}\r\n          maxWidth=\"md\"\r\n          fullWidth\r\n        >\r\n          <DialogTitle>\r\n            {editingClearance ? \"Edit Clearance\" : \"Add New Clearance\"}\r\n          </DialogTitle>\r\n          <form onSubmit={handleSubmit}>\r\n            <DialogContent>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <FormControl fullWidth required>\r\n                    <InputLabel>Project</InputLabel>\r\n                    <Select\r\n                      value={form.projectId}\r\n                      onChange={(e) =>\r\n                        setForm({ ...form, projectId: e.target.value })\r\n                      }\r\n                      label=\"Project\"\r\n                    >\r\n                      {(projects || []).map((project) => (\r\n                        <MenuItem key={project._id} value={project._id}>\r\n                          {project.projectID}: {project.name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                  <TextField\r\n                    fullWidth\r\n                    type=\"date\"\r\n                    label=\"Clearance Date\"\r\n                    value={form.clearanceDate}\r\n                    onChange={(e) =>\r\n                      setForm({ ...form, clearanceDate: e.target.value })\r\n                    }\r\n                    required\r\n                    InputLabelProps={{ shrink: true }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                  <FormControl fullWidth required>\r\n                    <InputLabel>Clearance Type</InputLabel>\r\n                    <Select\r\n                      value={form.clearanceType}\r\n                      onChange={(e) =>\r\n                        setForm({ ...form, clearanceType: e.target.value })\r\n                      }\r\n                      label=\"Clearance Type\"\r\n                    >\r\n                      <MenuItem value=\"Non-friable\">Non-friable</MenuItem>\r\n                      <MenuItem value=\"Friable\">Friable</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"LAA\"\r\n                    value={form.LAA}\r\n                    onChange={(e) => setForm({ ...form, LAA: e.target.value })}\r\n                    required\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Asbestos Removalist\"\r\n                    value={form.asbestosRemovalist}\r\n                    onChange={(e) =>\r\n                      setForm({ ...form, asbestosRemovalist: e.target.value })\r\n                    }\r\n                    required\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Notes\"\r\n                    value={form.notes}\r\n                    onChange={(e) =>\r\n                      setForm({ ...form, notes: e.target.value })\r\n                    }\r\n                    multiline\r\n                    rows={3}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={() => setDialogOpen(false)}>Cancel</Button>\r\n              <Button type=\"submit\" variant=\"contained\">\r\n                {editingClearance ? \"Update\" : \"Create\"}\r\n              </Button>\r\n            </DialogActions>\r\n          </form>\r\n        </Dialog>\r\n\r\n        {/* Snackbar for notifications */}\r\n        <Snackbar\r\n          open={snackbar.open}\r\n          autoHideDuration={6000}\r\n          onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n        >\r\n          <Alert\r\n            onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n            severity={snackbar.severity}\r\n          >\r\n            {snackbar.message}\r\n          </Alert>\r\n        </Snackbar>\r\n      </Box>\r\n    </PermissionGate>\r\n  );\r\n};\r\n\r\nexport default AsbestosClearance;\r\n","import axiosInstance from \"./axios\";\r\n\r\nconst projectService = {\r\n  getAll: async (params = {}) => {\r\n    const response = await axiosInstance.get(\"/projects\", { params });\r\n    return response.data;\r\n  },\r\n  getById: (id) => axiosInstance.get(`/projects/${id}`),\r\n  create: (data) => axiosInstance.post(\"/projects\", data),\r\n  update: (id, data) => axiosInstance.put(`/projects/${id}`, data),\r\n  delete: (id) => axiosInstance.delete(`/projects/${id}`),\r\n};\r\n\r\nexport default projectService; "],"names":["getCardActionAreaUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardActionAreaRoot","styled","ButtonBase","name","overridesResolver","props","styles","root","_ref","theme","display","textAlign","borderRadius","width","concat","cardActionAreaClasses","focusHighlight","opacity","vars","palette","action","hoverOpacity","focusVisible","focusOpacity","CardActionAreaFocusHighlight","_ref2","overflow","pointerEvents","position","top","right","bottom","left","backgroundColor","transition","transitions","create","duration","short","React","inProps","ref","useDefaultProps","children","className","focusVisibleClassName","other","_objectWithoutPropertiesLoose","ownerState","classes","composeClasses","useUtilityClasses","_jsxs","_extends","clsx","_jsx","createSvgIcon","d","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","API_BASE_URL","getAll","async","params","arguments","length","undefined","axios","get","data","getById","id","post","clearanceData","update","put","delete","updateStatus","status","patch","getStats","search","searchTerm","filters","_objectSpread","getByStatus","getByRemovalist","asbestosRemovalist","AsbestosRemovalWidget","title","icon","onClick","color","Card","sx","height","flexDirection","transform","boxShadow","CardActionArea","alignItems","CardContent","flexGrow","p","Box","mb","justifyContent","fontSize","Typography","variant","component","gutterBottom","AsbestosRemoval","useNavigate","useLocation","selectedSection","setSelectedSection","useState","asbestosRemovalWidgets","MonitorIcon","AssessmentIcon","Grid","container","spacing","map","widget","index","item","xs","md","mt","renderSelectedContent","AirMonitoring","AsbestosClearance","colors","tokens","navigate","clearances","setClearances","projects","setProjects","loading","setLoading","error","setError","dialogOpen","setDialogOpen","editingClearance","setEditingClearance","generatingPDF","setGeneratingPDF","snackbar","setSnackbar","open","message","severity","form","setForm","projectId","clearanceDate","clearanceType","LAA","notes","useEffect","fetchData","clearancesData","projectsData","Promise","all","asbestosClearanceService","projectService","limit","console","log","err","resetForm","getStatusColor","getProjectName","project","find","_id","CircularProgress","m","Alert","PermissionGate","requiredPermissions","grey","fontWeight","Button","startIcon","AddIcon","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","clearance","Date","toLocaleDateString","Chip","label","size","IconButton","handleViewItems","ViewIcon","toISOString","split","handleEdit","EditIcon","fullClearance","fileName","generateHTMLTemplatePDF","handleGeneratePDF","disabled","PdfIcon","window","confirm","handleDelete","DeleteIcon","Dialog","onClose","maxWidth","fullWidth","DialogTitle","onSubmit","e","preventDefault","DialogContent","FormControl","required","InputLabel","Select","value","onChange","target","MenuItem","projectID","TextField","type","InputLabelProps","shrink","multiline","rows","DialogActions","Snackbar","autoHideDuration","axiosInstance"],"sourceRoot":""}