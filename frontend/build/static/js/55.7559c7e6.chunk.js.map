{"version":3,"file":"static/js/55.7559c7e6.chunk.js","mappings":"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","sources":["services/asbestosClearanceReportService.js","services/asbestosClearanceService.js","../node_modules/@mui/icons-material/esm/PhotoCamera.js","../node_modules/@mui/icons-material/esm/Upload.js","scenes/clearances/ClearanceItems.jsx"],"sourcesContent":["import api from './axios';\n\nconst BASE_URL = '/asbestos-clearance-reports';\n\nconst asbestosClearanceReportService = {\n  // Get all clearance reports with optional filtering\n  getAll: async (params = {}) => {\n    const response = await api.get(BASE_URL, { params });\n    return response.data;\n  },\n\n  // Get clearance reports by clearance ID\n  getByClearanceId: async (clearanceId) => {\n    const response = await api.get(`${BASE_URL}/clearance/${clearanceId}`);\n    return response.data;\n  },\n\n  // Get a single clearance report by ID\n  getById: async (id) => {\n    const response = await api.get(`${BASE_URL}/${id}`);\n    return response.data;\n  },\n\n  // Create a new clearance report\n  create: async (data) => {\n    const response = await api.post(BASE_URL, data);\n    return response.data;\n  },\n\n  // Update a clearance report\n  update: async (id, data) => {\n    const response = await api.put(`${BASE_URL}/${id}`, data);\n    return response.data;\n  },\n\n  // Delete a clearance report\n  delete: async (id) => {\n    const response = await api.delete(`${BASE_URL}/${id}`);\n    return response.data;\n  },\n};\n\nexport default asbestosClearanceReportService; ","import axios from './axios';\r\n\r\nconst API_BASE_URL = '/asbestos-clearances';\r\n\r\nconst asbestosClearanceService = {\r\n  // Get all asbestos clearances with optional filters\r\n  getAll: async (params = {}) => {\r\n    const response = await axios.get(API_BASE_URL, { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Get single asbestos clearance by ID\r\n  getById: async (id) => {\r\n    const response = await axios.get(`${API_BASE_URL}/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create new asbestos clearance\r\n  create: async (clearanceData) => {\r\n    const response = await axios.post(API_BASE_URL, clearanceData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update asbestos clearance\r\n  update: async (id, clearanceData) => {\r\n    const response = await axios.put(`${API_BASE_URL}/${id}`, clearanceData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete asbestos clearance\r\n  delete: async (id) => {\r\n    const response = await axios.delete(`${API_BASE_URL}/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update status only\r\n  updateStatus: async (id, status) => {\r\n    const response = await axios.patch(`${API_BASE_URL}/${id}/status`, { status });\r\n    return response.data;\r\n  },\r\n\r\n  // Get statistics\r\n  getStats: async () => {\r\n    const response = await axios.get(`${API_BASE_URL}/stats/overview`);\r\n    return response.data;\r\n  },\r\n\r\n  // Search clearances\r\n  search: async (searchTerm, filters = {}) => {\r\n    const params = {\r\n      search: searchTerm,\r\n      ...filters\r\n    };\r\n    const response = await axios.get(API_BASE_URL, { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Get clearances by status\r\n  getByStatus: async (status) => {\r\n    const response = await axios.get(API_BASE_URL, { \r\n      params: { status } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get clearances by asbestos removalist\r\n  getByRemovalist: async (asbestosRemovalist) => {\r\n    const response = await axios.get(API_BASE_URL, { \r\n      params: { asbestosRemovalist } \r\n    });\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default asbestosClearanceService; ","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"circle\", {\n  cx: \"12\",\n  cy: \"12\",\n  r: \"3.2\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"M9 2 7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3.17L15 2zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5\"\n}, \"1\")], 'PhotoCamera');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5zm0-10h4v6h6v-6h4l-7-7z\"\n}), 'Upload');","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Alert,\r\n  Snackbar,\r\n  CircularProgress,\r\n  Chip,\r\n} from \"@mui/material\";\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  ArrowBack as ArrowBackIcon,\r\n  PhotoCamera as PhotoCameraIcon,\r\n  Upload as UploadIcon,\r\n  Delete as DeletePhotoIcon,\r\n} from \"@mui/icons-material\";\r\n\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { tokens } from \"../../theme\";\r\nimport PermissionGate from \"../../components/PermissionGate\";\r\nimport asbestosClearanceReportService from \"../../services/asbestosClearanceReportService\";\r\nimport asbestosClearanceService from \"../../services/asbestosClearanceService\";\r\n\r\nconst ClearanceItems = () => {\r\n  const colors = tokens;\r\n  const navigate = useNavigate();\r\n  const { clearanceId } = useParams();\r\n\r\n  const [items, setItems] = useState([]);\r\n  const [clearance, setClearance] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [editingItem, setEditingItem] = useState(null);\r\n  const [snackbar, setSnackbar] = useState({\r\n    open: false,\r\n    message: \"\",\r\n    severity: \"success\",\r\n  });\r\n\r\n  const [form, setForm] = useState({\r\n    locationDescription: \"\",\r\n    materialDescription: \"\",\r\n    asbestosType: \"non-friable\",\r\n    photograph: \"\",\r\n    notes: \"\",\r\n  });\r\n\r\n  const [photoPreview, setPhotoPreview] = useState(null);\r\n  const [photoFile, setPhotoFile] = useState(null);\r\n\r\n  // Fetch items and clearance data on component mount\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [clearanceId]);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const [itemsData, clearanceData] = await Promise.all([\r\n        asbestosClearanceReportService.getByClearanceId(clearanceId),\r\n        asbestosClearanceService.getById(clearanceId),\r\n      ]);\r\n\r\n      console.log(\"Clearance items API response:\", itemsData);\r\n      console.log(\"Clearance API response:\", clearanceData);\r\n\r\n      setItems(itemsData || []);\r\n      setClearance(clearanceData);\r\n    } catch (err) {\r\n      console.error(\"Error fetching data:\", err);\r\n      setError(\"Failed to load data\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const itemData = {\r\n        ...form,\r\n        clearanceId: clearanceId,\r\n      };\r\n\r\n      if (editingItem) {\r\n        await asbestosClearanceReportService.update(editingItem._id, itemData);\r\n        setSnackbar({\r\n          open: true,\r\n          message: \"Item updated successfully\",\r\n          severity: \"success\",\r\n        });\r\n      } else {\r\n        await asbestosClearanceReportService.create(itemData);\r\n        setSnackbar({\r\n          open: true,\r\n          message: \"Item created successfully\",\r\n          severity: \"success\",\r\n        });\r\n      }\r\n\r\n      setDialogOpen(false);\r\n      setEditingItem(null);\r\n      resetForm();\r\n      fetchData();\r\n    } catch (err) {\r\n      console.error(\"Error saving item:\", err);\r\n      setSnackbar({\r\n        open: true,\r\n        message: \"Failed to save item\",\r\n        severity: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEdit = (item) => {\r\n    setEditingItem(item);\r\n    setForm({\r\n      locationDescription: item.locationDescription,\r\n      materialDescription: item.materialDescription,\r\n      asbestosType: item.asbestosType,\r\n      photograph: item.photograph || \"\",\r\n      notes: item.notes || \"\",\r\n    });\r\n    setPhotoPreview(item.photograph || null);\r\n    setPhotoFile(null);\r\n    setDialogOpen(true);\r\n  };\r\n\r\n  const handleDelete = async (item) => {\r\n    if (window.confirm(\"Are you sure you want to delete this item?\")) {\r\n      try {\r\n        await asbestosClearanceReportService.delete(item._id);\r\n        setSnackbar({\r\n          open: true,\r\n          message: \"Item deleted successfully\",\r\n          severity: \"success\",\r\n        });\r\n        fetchData();\r\n      } catch (err) {\r\n        console.error(\"Error deleting item:\", err);\r\n        setSnackbar({\r\n          open: true,\r\n          message: \"Failed to delete item\",\r\n          severity: \"error\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setForm({\r\n      locationDescription: \"\",\r\n      materialDescription: \"\",\r\n      asbestosType: \"non-friable\",\r\n      photograph: \"\",\r\n      notes: \"\",\r\n    });\r\n    setPhotoPreview(null);\r\n    setPhotoFile(null);\r\n  };\r\n\r\n  const getAsbestosTypeColor = (type) => {\r\n    switch (type) {\r\n      case \"friable\":\r\n        return \"error\";\r\n      case \"non-friable\":\r\n        return \"warning\";\r\n      default:\r\n        return \"default\";\r\n    }\r\n  };\r\n\r\n  const handlePhotoUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      setPhotoFile(file);\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        setPhotoPreview(e.target.result);\r\n        setForm({ ...form, photograph: e.target.result });\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const handleTakePhoto = () => {\r\n    // Create a file input for camera access\r\n    const input = document.createElement(\"input\");\r\n    input.type = \"file\";\r\n    input.accept = \"image/*\";\r\n    input.capture = \"environment\"; // Use back camera\r\n    input.onchange = handlePhotoUpload;\r\n    input.click();\r\n  };\r\n\r\n  const handleRemovePhoto = () => {\r\n    setPhotoFile(null);\r\n    setPhotoPreview(null);\r\n    setForm({ ...form, photograph: \"\" });\r\n  };\r\n\r\n  const convertToBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = () => resolve(reader.result);\r\n      reader.onerror = (error) => reject(error);\r\n    });\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        height=\"400px\"\r\n      >\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Box m=\"20px\">\r\n        <Alert severity=\"error\">{error}</Alert>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <PermissionGate requiredPermissions={[\"asbestos.view\"]}>\r\n      <Box m=\"20px\">\r\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n            <IconButton\r\n              onClick={() => navigate(\"/clearances/asbestos\")}\r\n              color=\"primary\"\r\n            >\r\n              <ArrowBackIcon />\r\n            </IconButton>\r\n            <Box>\r\n              <Typography\r\n                variant=\"h2\"\r\n                color={colors.grey[100]}\r\n                fontWeight=\"bold\"\r\n                sx={{ mb: \"5px\" }}\r\n              >\r\n                Clearance Items\r\n              </Typography>\r\n              {clearance && (\r\n                <Typography variant=\"h6\" color={colors.secondary[500]}>\r\n                  {clearance.projectId?.name || \"Unknown Project\"} -{\" \"}\r\n                  {clearance.clearanceDate\r\n                    ? new Date(clearance.clearanceDate).toLocaleDateString()\r\n                    : \"Unknown Date\"}\r\n                </Typography>\r\n              )}\r\n            </Box>\r\n          </Box>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={() => {\r\n              setEditingItem(null);\r\n              resetForm();\r\n              setDialogOpen(true);\r\n            }}\r\n            startIcon={<AddIcon />}\r\n          >\r\n            Add Item\r\n          </Button>\r\n        </Box>\r\n\r\n        <Card sx={{ mt: 3 }}>\r\n          <CardContent>\r\n            <TableContainer component={Paper}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Location</TableCell>\r\n                    <TableCell>Material Description</TableCell>\r\n                    <TableCell>Asbestos Type</TableCell>\r\n                    <TableCell>Photograph</TableCell>\r\n                    <TableCell>Notes</TableCell>\r\n                    <TableCell>Actions</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {(items || []).map((item) => (\r\n                    <TableRow key={item._id}>\r\n                      <TableCell>{item.locationDescription}</TableCell>\r\n                      <TableCell>{item.materialDescription}</TableCell>\r\n                      <TableCell>\r\n                        <Chip\r\n                          label={item.asbestosType}\r\n                          color={getAsbestosTypeColor(item.asbestosType)}\r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {item.photograph ? (\r\n                          <Chip label=\"Yes\" color=\"success\" size=\"small\" />\r\n                        ) : (\r\n                          <Chip label=\"No\" color=\"default\" size=\"small\" />\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {item.notes ? (\r\n                          <Typography variant=\"body2\" noWrap>\r\n                            {item.notes}\r\n                          </Typography>\r\n                        ) : (\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            No notes\r\n                          </Typography>\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <IconButton\r\n                          onClick={() => handleEdit(item)}\r\n                          color=\"primary\"\r\n                          size=\"small\"\r\n                          title=\"Edit\"\r\n                        >\r\n                          <EditIcon />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          onClick={() => handleDelete(item)}\r\n                          color=\"error\"\r\n                          size=\"small\"\r\n                          title=\"Delete\"\r\n                        >\r\n                          <DeleteIcon />\r\n                        </IconButton>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Add/Edit Dialog */}\r\n        <Dialog\r\n          open={dialogOpen}\r\n          onClose={() => setDialogOpen(false)}\r\n          maxWidth=\"md\"\r\n          fullWidth\r\n        >\r\n          <DialogTitle>\r\n            {editingItem ? \"Edit Item\" : \"Add New Item\"}\r\n          </DialogTitle>\r\n          <form onSubmit={handleSubmit}>\r\n            <DialogContent>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Location Description\"\r\n                    value={form.locationDescription}\r\n                    onChange={(e) =>\r\n                      setForm({ ...form, locationDescription: e.target.value })\r\n                    }\r\n                    required\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Material Description\"\r\n                    value={form.materialDescription}\r\n                    onChange={(e) =>\r\n                      setForm({ ...form, materialDescription: e.target.value })\r\n                    }\r\n                    required\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                  <FormControl fullWidth required>\r\n                    <InputLabel>Asbestos Type</InputLabel>\r\n                    <Select\r\n                      value={form.asbestosType}\r\n                      onChange={(e) =>\r\n                        setForm({ ...form, asbestosType: e.target.value })\r\n                      }\r\n                      label=\"Asbestos Type\"\r\n                    >\r\n                      <MenuItem value=\"non-friable\">Non-friable</MenuItem>\r\n                      <MenuItem value=\"friable\">Friable</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                  <Box>\r\n                    <Typography variant=\"subtitle2\" gutterBottom>\r\n                      Photograph\r\n                    </Typography>\r\n                    <Box sx={{ display: \"flex\", gap: 1, mb: 2 }}>\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        startIcon={<PhotoCameraIcon />}\r\n                        onClick={handleTakePhoto}\r\n                        size=\"small\"\r\n                      >\r\n                        Take Photo\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        startIcon={<UploadIcon />}\r\n                        component=\"label\"\r\n                        size=\"small\"\r\n                      >\r\n                        Upload Photo\r\n                        <input\r\n                          type=\"file\"\r\n                          hidden\r\n                          accept=\"image/*\"\r\n                          onChange={handlePhotoUpload}\r\n                        />\r\n                      </Button>\r\n                      {photoPreview && (\r\n                        <Button\r\n                          variant=\"outlined\"\r\n                          color=\"error\"\r\n                          startIcon={<DeletePhotoIcon />}\r\n                          onClick={handleRemovePhoto}\r\n                          size=\"small\"\r\n                        >\r\n                          Remove\r\n                        </Button>\r\n                      )}\r\n                    </Box>\r\n                    {photoPreview && (\r\n                      <Box\r\n                        sx={{\r\n                          width: 200,\r\n                          height: 150,\r\n                          borderRadius: 1,\r\n                          overflow: \"hidden\",\r\n                          border: \"1px solid #ddd\",\r\n                          mb: 2,\r\n                        }}\r\n                      >\r\n                        <img\r\n                          src={photoPreview}\r\n                          alt=\"Preview\"\r\n                          style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            objectFit: \"cover\",\r\n                          }}\r\n                        />\r\n                      </Box>\r\n                    )}\r\n                  </Box>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Notes\"\r\n                    value={form.notes}\r\n                    onChange={(e) =>\r\n                      setForm({ ...form, notes: e.target.value })\r\n                    }\r\n                    multiline\r\n                    rows={3}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={() => setDialogOpen(false)}>Cancel</Button>\r\n              <Button type=\"submit\" variant=\"contained\">\r\n                {editingItem ? \"Update\" : \"Create\"}\r\n              </Button>\r\n            </DialogActions>\r\n          </form>\r\n        </Dialog>\r\n\r\n        {/* Snackbar for notifications */}\r\n        <Snackbar\r\n          open={snackbar.open}\r\n          autoHideDuration={6000}\r\n          onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n        >\r\n          <Alert\r\n            onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n            severity={snackbar.severity}\r\n          >\r\n            {snackbar.message}\r\n          </Alert>\r\n        </Snackbar>\r\n      </Box>\r\n    </PermissionGate>\r\n  );\r\n};\r\n\r\nexport default ClearanceItems;\r\n"],"names":["BASE_URL","getAll","async","params","arguments","length","undefined","api","get","data","getByClearanceId","concat","clearanceId","getById","id","create","post","update","put","delete","API_BASE_URL","axios","clearanceData","updateStatus","status","patch","getStats","search","searchTerm","filters","_objectSpread","getByStatus","getByRemovalist","asbestosRemovalist","createSvgIcon","_jsx","cx","cy","r","d","ClearanceItems","_clearance$projectId","colors","tokens","navigate","useNavigate","useParams","items","setItems","useState","clearance","setClearance","loading","setLoading","error","setError","dialogOpen","setDialogOpen","editingItem","setEditingItem","snackbar","setSnackbar","open","message","severity","form","setForm","locationDescription","materialDescription","asbestosType","photograph","notes","photoPreview","setPhotoPreview","photoFile","setPhotoFile","useEffect","fetchData","itemsData","Promise","all","asbestosClearanceReportService","asbestosClearanceService","console","log","err","resetForm","getAsbestosTypeColor","type","handlePhotoUpload","event","file","target","files","reader","FileReader","onload","e","result","readAsDataURL","Box","display","justifyContent","alignItems","height","children","CircularProgress","m","Alert","PermissionGate","requiredPermissions","_jsxs","gap","IconButton","onClick","color","ArrowBackIcon","Typography","variant","grey","fontWeight","sx","mb","secondary","projectId","name","clearanceDate","Date","toLocaleDateString","Button","startIcon","AddIcon","Card","mt","CardContent","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","item","Chip","label","size","noWrap","handleEdit","title","EditIcon","window","confirm","_id","handleDelete","DeleteIcon","Dialog","onClose","maxWidth","fullWidth","DialogTitle","onSubmit","preventDefault","itemData","DialogContent","Grid","container","spacing","xs","TextField","value","onChange","required","md","FormControl","InputLabel","Select","MenuItem","gutterBottom","PhotoCameraIcon","handleTakePhoto","input","document","createElement","accept","capture","onchange","click","UploadIcon","hidden","DeletePhotoIcon","handleRemovePhoto","width","borderRadius","overflow","border","src","alt","style","objectFit","multiline","rows","DialogActions","Snackbar","autoHideDuration"],"sourceRoot":""}