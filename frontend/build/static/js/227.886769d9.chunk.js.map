{"version":3,"file":"static/js/227.886769d9.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Visibility.js","../node_modules/@mui/icons-material/esm/Search.js","../node_modules/@mui/icons-material/esm/Clear.js","../node_modules/@mui/icons-material/esm/Print.js","scenes/reports/index.jsx","services/asbestosClearanceReportService.js","../node_modules/@mui/icons-material/esm/Download.js","services/projectService.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5M12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5m0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3\"\n}), 'Visibility');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Clear');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 8H5c-1.66 0-3 1.34-3 3v6h4v4h12v-4h4v-6c0-1.66-1.34-3-3-3m-3 11H8v-5h8zm3-7c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1m-1-9H6v4h12z\"\n}), 'Print');","import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Autocomplete,\r\n  CircularProgress,\r\n  Alert,\r\n  Chip,\r\n  IconButton,\r\n  Tooltip,\r\n  InputAdornment,\r\n} from \"@mui/material\";\r\nimport {\r\n  Search as SearchIcon,\r\n  Visibility as VisibilityIcon,\r\n  Download as DownloadIcon,\r\n  Print as PrintIcon,\r\n  Clear as ClearIcon,\r\n} from \"@mui/icons-material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { tokens } from \"../../theme\";\r\nimport projectService from \"../../services/projectService\";\r\nimport asbestosClearanceReportService from \"../../services/asbestosClearanceReportService\";\r\nimport {\r\n  shiftService,\r\n  jobService,\r\n  sampleService,\r\n  clientService,\r\n} from \"../../services/api\";\r\nimport { generateShiftReport } from \"../../utils/generateShiftReport\";\r\n\r\nconst Reports = () => {\r\n  const theme = useTheme();\r\n  const colors = tokens;\r\n\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [selectedProject, setSelectedProject] = useState(null);\r\n  const [projectReports, setProjectReports] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [searching, setSearching] = useState(false);\r\n  const [loadingReports, setLoadingReports] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [projectsWithReports, setProjectsWithReports] = useState(new Set());\r\n  const navigate = useNavigate();\r\n\r\n  // Search projects function - using the same approach as projects page\r\n  const handleSearch = async (searchValue = searchTerm) => {\r\n    const termToSearch = searchValue || searchTerm;\r\n    if (!termToSearch.trim()) {\r\n      setError(\"Please enter a search term\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setSearching(true);\r\n      setError(\"\");\r\n      setSearchResults([]);\r\n      setSelectedProject(null);\r\n      setProjectReports([]);\r\n\r\n      // Use the same parameters as the projects page\r\n      const params = {\r\n        page: 1,\r\n        limit: 1000, // Large limit to get more results\r\n        sortBy: \"projectID\",\r\n        sortOrder: \"desc\",\r\n        search: termToSearch.trim(),\r\n      };\r\n\r\n      // Ensure limit is a number\r\n      params.limit = parseInt(params.limit);\r\n\r\n      console.log(\"Search params:\", params);\r\n      console.log(\"Current searchTerm:\", searchTerm);\r\n      console.log(\"Search term being used:\", termToSearch.trim());\r\n      const response = await projectService.getAll(params);\r\n\r\n      console.log(\"Search response:\", response);\r\n\r\n      // Use the same response handling as projects page\r\n      const projectsData = Array.isArray(response.data)\r\n        ? response.data\r\n        : response.data?.data || [];\r\n\r\n      console.log(\"Projects data:\", projectsData.length);\r\n\r\n      setSearchResults(projectsData);\r\n\r\n      // Use the reports_present field from the API response\r\n      const projectsWithReportsSet = new Set();\r\n\r\n      projectsData.forEach((project) => {\r\n        if (project.reports_present) {\r\n          projectsWithReportsSet.add(project._id);\r\n        }\r\n      });\r\n\r\n      setProjectsWithReports(projectsWithReportsSet);\r\n\r\n      if (projectsData.length === 0) {\r\n        setError(\"No projects found matching your search term\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error searching projects:\", err);\r\n      setError(\"Failed to search projects\");\r\n      setSearchResults([]);\r\n    } finally {\r\n      setSearching(false);\r\n    }\r\n  };\r\n\r\n  const handleClearSearch = () => {\r\n    setSearchTerm(\"\");\r\n    setSearchResults([]);\r\n    setSelectedProject(null);\r\n    setProjectReports([]);\r\n    setError(\"\");\r\n    setProjectsWithReports(new Set());\r\n  };\r\n\r\n  const handleLoadReportsForProject = async (project) => {\r\n    if (!projectsWithReports.has(project._id)) {\r\n      return; // Don't allow loading reports if project has no reports\r\n    }\r\n\r\n    try {\r\n      setLoadingReports(true);\r\n      setError(\"\");\r\n\r\n      // Collect all reports for the selected project\r\n      const allReports = [];\r\n\r\n      // 1. Get asbestos clearance reports\r\n      try {\r\n        const clearanceReports = await asbestosClearanceReportService.getAll({\r\n          projectId: project._id,\r\n        });\r\n        if (clearanceReports.reports) {\r\n          clearanceReports.reports.forEach((report) => {\r\n            allReports.push({\r\n              id: report._id,\r\n              date: new Date(report.createdAt),\r\n              type: \"Asbestos Clearance Report\",\r\n              status: report.clearanceId?.status || \"Unknown\",\r\n              report: report,\r\n            });\r\n          });\r\n        }\r\n      } catch (err) {\r\n        console.log(\"No clearance reports found for this project\");\r\n      }\r\n\r\n      // 2. Get air monitoring reports (shifts)\r\n      try {\r\n        // First get all jobs for this project\r\n        const jobsResponse = await jobService.getAll();\r\n        const projectJobs =\r\n          jobsResponse.data?.filter(\r\n            (job) =>\r\n              job.project === project._id || job.project?._id === project._id\r\n          ) || [];\r\n\r\n        // Get shifts for each job\r\n        for (const job of projectJobs) {\r\n          try {\r\n            const shiftsResponse = await shiftService.getByJob(job._id);\r\n            const shifts = shiftsResponse.data || [];\r\n\r\n            shifts.forEach((shift) => {\r\n              // Only include shifts that have reports (analysis complete or shift complete)\r\n              if (\r\n                shift.status === \"analysis_complete\" ||\r\n                shift.status === \"shift_complete\" ||\r\n                shift.reportApprovedBy\r\n              ) {\r\n                allReports.push({\r\n                  id: shift._id,\r\n                  date: new Date(\r\n                    shift.reportIssueDate || shift.updatedAt || shift.createdAt\r\n                  ),\r\n                  type: \"Air Monitoring Report\",\r\n                  status: shift.reportApprovedBy ? \"Authorized\" : shift.status,\r\n                  report: shift,\r\n                  jobName: job.name,\r\n                  shiftName: shift.name,\r\n                });\r\n              }\r\n            });\r\n          } catch (err) {\r\n            console.log(`No shifts found for job ${job._id}`);\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.log(\"No air monitoring reports found for this project\");\r\n      }\r\n\r\n      // 3. Get survey reports (if they exist)\r\n      // This would need to be implemented based on your survey data structure\r\n\r\n      // Sort reports by date (newest first)\r\n      allReports.sort((a, b) => b.date - a.date);\r\n\r\n      setProjectReports(allReports);\r\n      setSelectedProject(project);\r\n    } catch (err) {\r\n      console.error(\"Error loading reports:\", err);\r\n      setError(\"Failed to load reports for this project\");\r\n    } finally {\r\n      setLoadingReports(false);\r\n    }\r\n  };\r\n\r\n  const handleViewReport = async (report) => {\r\n    try {\r\n      if (report.type === \"Air Monitoring Report\") {\r\n        // Generate air monitoring report\r\n        const shift = report.report;\r\n        const jobResponse = await jobService.getById(\r\n          shift.job?._id || shift.job\r\n        );\r\n        const samplesResponse = await sampleService.getByShift(shift._id);\r\n\r\n        // Ensure we have the complete sample data including analysis\r\n        const samplesWithAnalysis = await Promise.all(\r\n          samplesResponse.data.map(async (sample) => {\r\n            if (!sample.analysis) {\r\n              // If analysis data is missing, fetch the complete sample data\r\n              const completeSample = await sampleService.getById(sample._id);\r\n              return completeSample.data;\r\n            }\r\n            return sample;\r\n          })\r\n        );\r\n\r\n        // Ensure project and client are fully populated\r\n        let project = jobResponse.data.project;\r\n        if (project && typeof project === \"string\") {\r\n          const projectResponse = await projectService.getById(project);\r\n          project = projectResponse.data;\r\n        }\r\n        if (project && project.client && typeof project.client === \"string\") {\r\n          const clientResponse = await clientService.getById(project.client);\r\n          project.client = clientResponse.data;\r\n        }\r\n\r\n        generateShiftReport({\r\n          shift: shift,\r\n          job: jobResponse.data,\r\n          samples: samplesWithAnalysis,\r\n          project: project,\r\n          openInNewTab: true, // Open in new tab for viewing\r\n        });\r\n      } else if (report.type === \"Asbestos Clearance Report\") {\r\n        // TODO: Implement asbestos clearance report viewing\r\n        console.log(\"Viewing asbestos clearance report:\", report);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error viewing report:\", err);\r\n      setError(\"Failed to view report\");\r\n    }\r\n  };\r\n\r\n  const handleDownloadReport = async (report) => {\r\n    try {\r\n      if (report.type === \"Air Monitoring Report\") {\r\n        // Generate and download air monitoring report\r\n        const shift = report.report;\r\n        const jobResponse = await jobService.getById(\r\n          shift.job?._id || shift.job\r\n        );\r\n        const samplesResponse = await sampleService.getByShift(shift._id);\r\n\r\n        // Ensure we have the complete sample data including analysis\r\n        const samplesWithAnalysis = await Promise.all(\r\n          samplesResponse.data.map(async (sample) => {\r\n            if (!sample.analysis) {\r\n              // If analysis data is missing, fetch the complete sample data\r\n              const completeSample = await sampleService.getById(sample._id);\r\n              return completeSample.data;\r\n            }\r\n            return sample;\r\n          })\r\n        );\r\n\r\n        // Ensure project and client are fully populated\r\n        let project = jobResponse.data.project;\r\n        if (project && typeof project === \"string\") {\r\n          const projectResponse = await projectService.getById(project);\r\n          project = projectResponse.data;\r\n        }\r\n        if (project && project.client && typeof project.client === \"string\") {\r\n          const clientResponse = await clientService.getById(project.client);\r\n          project.client = clientResponse.data;\r\n        }\r\n\r\n        generateShiftReport({\r\n          shift: shift,\r\n          job: jobResponse.data,\r\n          samples: samplesWithAnalysis,\r\n          project: project,\r\n          openInNewTab: false, // Download instead of opening in new tab\r\n        });\r\n      } else if (report.type === \"Asbestos Clearance Report\") {\r\n        // TODO: Implement asbestos clearance report download\r\n        console.log(\"Downloading asbestos clearance report:\", report);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error downloading report:\", err);\r\n      setError(\"Failed to download report\");\r\n    }\r\n  };\r\n\r\n  const handlePrintReport = async (report) => {\r\n    try {\r\n      if (report.type === \"Air Monitoring Report\") {\r\n        // Generate and print air monitoring report\r\n        const shift = report.report;\r\n        const jobResponse = await jobService.getById(\r\n          shift.job?._id || shift.job\r\n        );\r\n        const samplesResponse = await sampleService.getByShift(shift._id);\r\n\r\n        // Ensure we have the complete sample data including analysis\r\n        const samplesWithAnalysis = await Promise.all(\r\n          samplesResponse.data.map(async (sample) => {\r\n            if (!sample.analysis) {\r\n              // If analysis data is missing, fetch the complete sample data\r\n              const completeSample = await sampleService.getById(sample._id);\r\n              return completeSample.data;\r\n            }\r\n            return sample;\r\n          })\r\n        );\r\n\r\n        // Ensure project and client are fully populated\r\n        let project = jobResponse.data.project;\r\n        if (project && typeof project === \"string\") {\r\n          const projectResponse = await projectService.getById(project);\r\n          project = projectResponse.data;\r\n        }\r\n        if (project && project.client && typeof project.client === \"string\") {\r\n          const clientResponse = await clientService.getById(project.client);\r\n          project.client = clientResponse.data;\r\n        }\r\n\r\n        // Generate report and open in new tab, then trigger print\r\n        generateShiftReport({\r\n          shift: shift,\r\n          job: jobResponse.data,\r\n          samples: samplesWithAnalysis,\r\n          project: project,\r\n          openInNewTab: true, // Open in new tab for printing\r\n        });\r\n\r\n        // Wait a moment for the PDF to load, then trigger print\r\n        setTimeout(() => {\r\n          window.print();\r\n        }, 1000);\r\n      } else if (report.type === \"Asbestos Clearance Report\") {\r\n        // TODO: Implement asbestos clearance report printing\r\n        console.log(\"Printing asbestos clearance report:\", report);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error printing report:\", err);\r\n      setError(\"Failed to print report\");\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status?.toLowerCase()) {\r\n      case \"complete\":\r\n        return \"success\";\r\n      case \"in progress\":\r\n        return \"warning\";\r\n      case \"pending\":\r\n        return \"info\";\r\n      default:\r\n        return \"default\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom sx={{ mb: 4 }}>\r\n        Reports\r\n      </Typography>\r\n\r\n      {/* Project Search Section */}\r\n      <Paper sx={{ p: 3, mb: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Search Projects\r\n        </Typography>\r\n\r\n        <Box sx={{ display: \"flex\", gap: 2, alignItems: \"flex-start\", mb: 2 }}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Search for a project\"\r\n            placeholder=\"Enter project ID, name, or client\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n            onKeyPress={(e) => {\r\n              if (e.key === \"Enter\") {\r\n                handleSearch(searchTerm);\r\n              }\r\n            }}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <SearchIcon sx={{ mr: 1, color: \"text.secondary\" }} />\r\n              ),\r\n              endAdornment: searchTerm && (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    size=\"small\"\r\n                    onClick={handleClearSearch}\r\n                    edge=\"end\"\r\n                  >\r\n                    <ClearIcon />\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() => handleSearch(searchTerm)}\r\n            disabled={!searchTerm.trim() || searching}\r\n            sx={{ minWidth: 140 }}\r\n          >\r\n            {searching ? (\r\n              <CircularProgress size={20} color=\"inherit\" />\r\n            ) : (\r\n              \"Search\"\r\n            )}\r\n          </Button>\r\n        </Box>\r\n\r\n        {/* Search Results */}\r\n        {searchResults.length > 0 && (\r\n          <Box sx={{ mt: 2 }}>\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Search Results ({searchResults.length} projects found)\r\n            </Typography>\r\n            <TableContainer component={Paper} sx={{ maxHeight: 700 }}>\r\n              <Table size=\"small\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Project ID</TableCell>\r\n                    <TableCell>Site Name</TableCell>\r\n                    <TableCell>Reports</TableCell>\r\n                    <TableCell align=\"center\">Action</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {searchResults.map((project) => {\r\n                    const hasReports = projectsWithReports.has(project._id);\r\n                    return (\r\n                      <TableRow key={project._id}>\r\n                        <TableCell>\r\n                          <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                            {project.projectID}\r\n                          </Typography>\r\n                        </TableCell>\r\n                        <TableCell>{project.name}</TableCell>\r\n                        <TableCell>\r\n                          <Chip\r\n                            label={\r\n                              hasReports ? \"Reports Available\" : \"No Reports\"\r\n                            }\r\n                            color={hasReports ? \"success\" : \"error\"}\r\n                            size=\"small\"\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            color=\"secondary\"\r\n                            disabled={!hasReports}\r\n                            onClick={() => handleLoadReportsForProject(project)}\r\n                          >\r\n                            Load Reports\r\n                          </Button>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Box>\r\n        )}\r\n      </Paper>\r\n\r\n      {/* Error Display */}\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Reports Table */}\r\n      {projectReports.length > 0 && (\r\n        <Paper sx={{ p: 3 }}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Reports for {selectedProject?.projectID}\r\n          </Typography>\r\n\r\n          <TableContainer>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Date</TableCell>\r\n                  <TableCell>Report Type</TableCell>\r\n                  <TableCell>Status</TableCell>\r\n                  <TableCell align=\"center\">Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {projectReports.map((report) => (\r\n                  <TableRow key={report.id}>\r\n                    <TableCell>{report.date.toLocaleDateString()}</TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                        {report.type}\r\n                      </Typography>\r\n                      {report.jobName && (\r\n                        <Typography variant=\"caption\" color=\"text.secondary\">\r\n                          {report.jobName} • {report.shiftName}\r\n                        </Typography>\r\n                      )}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Chip\r\n                        label={report.status}\r\n                        color={getStatusColor(report.status)}\r\n                        size=\"small\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Box\r\n                        sx={{\r\n                          display: \"flex\",\r\n                          gap: 1,\r\n                          justifyContent: \"center\",\r\n                        }}\r\n                      >\r\n                        <Tooltip title=\"View Report\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => handleViewReport(report)}\r\n                            color=\"primary\"\r\n                          >\r\n                            <VisibilityIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Download Report\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => handleDownloadReport(report)}\r\n                            color=\"secondary\"\r\n                          >\r\n                            <DownloadIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Print Report\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => handlePrintReport(report)}\r\n                            color=\"info\"\r\n                          >\r\n                            <PrintIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </Box>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Paper>\r\n      )}\r\n\r\n      {/* No Reports Message */}\r\n      {selectedProject &&\r\n        !loadingReports &&\r\n        projectReports.length === 0 &&\r\n        !error && (\r\n          <Paper sx={{ p: 3, textAlign: \"center\" }}>\r\n            <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\r\n              No Reports Found\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              No reports have been generated for this project yet.\r\n            </Typography>\r\n          </Paper>\r\n        )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Reports;\r\n","import api from './axios';\n\nconst BASE_URL = '/asbestos-clearance-reports';\n\nconst asbestosClearanceReportService = {\n  // Get all clearance reports with optional filtering\n  getAll: async (params = {}) => {\n    const response = await api.get(BASE_URL, { params });\n    return response.data;\n  },\n\n  // Get clearance reports by clearance ID\n  getByClearanceId: async (clearanceId) => {\n    const response = await api.get(`${BASE_URL}/clearance/${clearanceId}`);\n    return response.data;\n  },\n\n  // Get a single clearance report by ID\n  getById: async (id) => {\n    const response = await api.get(`${BASE_URL}/${id}`);\n    return response.data;\n  },\n\n  // Create a new clearance report\n  create: async (data) => {\n    const response = await api.post(BASE_URL, data);\n    return response.data;\n  },\n\n  // Update a clearance report\n  update: async (id, data) => {\n    const response = await api.put(`${BASE_URL}/${id}`, data);\n    return response.data;\n  },\n\n  // Delete a clearance report\n  delete: async (id) => {\n    const response = await api.delete(`${BASE_URL}/${id}`);\n    return response.data;\n  },\n};\n\nexport default asbestosClearanceReportService; ","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5zM19 9h-4V3H9v6H5l7 7z\"\n}), 'Download');","import axiosInstance from \"./axios\";\r\n\r\nconst projectService = {\r\n  getAll: async (params = {}) => {\r\n    const response = await axiosInstance.get(\"/projects\", { params });\r\n    return response.data;\r\n  },\r\n  getById: (id) => axiosInstance.get(`/projects/${id}`),\r\n  create: (data) => axiosInstance.post(\"/projects\", data),\r\n  update: (id, data) => axiosInstance.put(`/projects/${id}`, data),\r\n  delete: (id) => axiosInstance.delete(`/projects/${id}`),\r\n};\r\n\r\nexport default projectService; "],"names":["createSvgIcon","_jsx","d","Reports","useTheme","tokens","searchTerm","setSearchTerm","useState","searchResults","setSearchResults","selectedProject","setSelectedProject","projectReports","setProjectReports","loading","setLoading","searching","setSearching","loadingReports","setLoadingReports","error","setError","projectsWithReports","setProjectsWithReports","Set","handleSearch","useNavigate","async","termToSearch","arguments","length","undefined","trim","_response$data","params","page","limit","sortBy","sortOrder","search","parseInt","console","log","response","projectService","getAll","projectsData","Array","isArray","data","projectsWithReportsSet","forEach","project","reports_present","add","_id","err","getStatusColor","status","toLowerCase","_jsxs","Box","sx","p","children","Typography","variant","component","gutterBottom","mb","Paper","display","gap","alignItems","TextField","fullWidth","label","placeholder","value","onChange","e","target","onKeyPress","key","InputProps","startAdornment","SearchIcon","mr","color","endAdornment","InputAdornment","position","IconButton","size","onClick","handleClearSearch","edge","ClearIcon","Button","disabled","minWidth","CircularProgress","mt","TableContainer","maxHeight","Table","TableHead","TableRow","TableCell","align","TableBody","map","hasReports","has","fontWeight","projectID","name","Chip","allReports","clearanceReports","asbestosClearanceReportService","projectId","reports","report","_report$clearanceId","push","id","date","Date","createdAt","type","clearanceId","_jobsResponse$data","projectJobs","jobService","filter","job","_job$project","shiftService","getByJob","shift","reportApprovedBy","reportIssueDate","updatedAt","jobName","shiftName","concat","sort","a","b","handleLoadReportsForProject","Alert","severity","toLocaleDateString","justifyContent","Tooltip","title","_shift$job","jobResponse","getById","samplesResponse","sampleService","getByShift","samplesWithAnalysis","Promise","all","sample","analysis","client","clientResponse","clientService","generateShiftReport","samples","openInNewTab","handleViewReport","VisibilityIcon","_shift$job2","handleDownloadReport","DownloadIcon","_shift$job3","setTimeout","window","print","handlePrintReport","PrintIcon","textAlign","BASE_URL","api","get","getByClearanceId","create","post","update","put","delete","axiosInstance"],"sourceRoot":""}