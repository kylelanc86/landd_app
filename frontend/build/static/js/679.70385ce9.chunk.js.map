{"version":3,"file":"static/js/679.70385ce9.chunk.js","mappings":"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","sources":["scenes/air-monitoring/edit-sample.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n  Stack,\r\n  useTheme,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n  Checkbox,\r\n  FormControlLabel,\r\n} from \"@mui/material\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport AccessTimeIcon from \"@mui/icons-material/AccessTime\";\r\nimport {\r\n  sampleService,\r\n  shiftService,\r\n  jobService,\r\n  userService,\r\n} from \"../../services/api\";\r\nimport airPumpService from \"../../services/airPumpService\";\r\nimport { equipmentService } from \"../../services/equipmentService\";\r\nimport { useAuth } from \"../../context/AuthContext\";\r\nimport { formatDateForInput } from \"../../utils/dateUtils\";\r\n\r\nconst EditSample = () => {\r\n  const theme = useTheme();\r\n  const { shiftId, sampleId } = useParams();\r\n  const navigate = useNavigate();\r\n  const { currentUser } = useAuth();\r\n  const [users, setUsers] = useState([]);\r\n  const [airPumps, setAirPumps] = useState([]);\r\n  const [flowmeters, setFlowmeters] = useState([]);\r\n  const [form, setForm] = useState({\r\n    sampler: \"\",\r\n    sampleNumber: \"\",\r\n    type: \"\",\r\n    location: \"\",\r\n    pumpNo: \"\",\r\n    flowmeter: \"\",\r\n    cowlNo: \"\",\r\n    filterSize: \"\",\r\n    startTime: \"\",\r\n    endTime: \"\",\r\n    initialFlowrate: \"\",\r\n    finalFlowrate: \"\",\r\n    averageFlowrate: \"\",\r\n    notes: \"\",\r\n    date: formatDateForInput(new Date()),\r\n    isFieldBlank: false,\r\n  });\r\n  const [projectID, setProjectID] = useState(null);\r\n  const [job, setJob] = useState(null);\r\n  const [error, setError] = useState(\"\");\r\n  const [fieldErrors, setFieldErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Fetch users when component mounts\r\n  useEffect(() => {\r\n    const fetchUsers = async () => {\r\n      try {\r\n        const response = await userService.getAll();\r\n        setUsers(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching users:\", error);\r\n      }\r\n    };\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  // Fetch active air pumps when component mounts\r\n  useEffect(() => {\r\n    const fetchActiveAirPumps = async () => {\r\n      try {\r\n        const response = await airPumpService.filterByStatus(\"Active\");\r\n        setAirPumps(response.data || response);\r\n      } catch (error) {\r\n        console.error(\"Error fetching active air pumps:\", error);\r\n      }\r\n    };\r\n    fetchActiveAirPumps();\r\n  }, []);\r\n\r\n  // Fetch active flowmeters when component mounts\r\n  useEffect(() => {\r\n    const fetchActiveFlowmeters = async () => {\r\n      try {\r\n        const response = await equipmentService.getAll();\r\n        console.log(\"Equipment response:\", response);\r\n        const allEquipment = response.equipment || response.data || response;\r\n        console.log(\"All equipment:\", allEquipment);\r\n        const flowmeters = allEquipment.filter(\r\n          (equipment) =>\r\n            (equipment.equipmentType === \"Bubble flowmeter\" ||\r\n              equipment.equipmentType === \"Site flowmeter\") &&\r\n            equipment.status === \"active\"\r\n        );\r\n        console.log(\"Filtered flowmeters:\", flowmeters);\r\n        setFlowmeters(flowmeters);\r\n      } catch (error) {\r\n        console.error(\"Error fetching active flowmeters:\", error);\r\n      }\r\n    };\r\n    fetchActiveFlowmeters();\r\n  }, []);\r\n\r\n  // Fetch sample data\r\n  useEffect(() => {\r\n    const fetchSample = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        const response = await sampleService.getById(sampleId);\r\n        const sampleData = response.data;\r\n        console.log(\"Fetched sample data:\", sampleData);\r\n\r\n        // Extract the sample number from fullSampleID\r\n        const sampleNumber = sampleData.fullSampleID.split(\"-\")[1];\r\n\r\n        // Get project ID from the job's project\r\n        if (sampleData.job && sampleData.job.project) {\r\n          setProjectID(sampleData.job.project.projectID);\r\n        } else {\r\n          // If project is not populated, fetch the job to get project details\r\n          const jobResponse = await jobService.getById(sampleData.job);\r\n          if (jobResponse.data && jobResponse.data.project) {\r\n            setProjectID(jobResponse.data.project.projectID);\r\n          }\r\n        }\r\n\r\n        setForm({\r\n          sampleNumber: sampleNumber,\r\n          type: sampleData.type,\r\n          location: sampleData.location,\r\n          pumpNo: sampleData.pumpNo || \"\",\r\n          flowmeter: sampleData.flowmeter || \"\",\r\n          cowlNo: sampleData.cowlNo || \"\",\r\n          filterSize: sampleData.filterSize || \"\",\r\n          startTime: sampleData.startTime || \"\",\r\n          endTime: sampleData.endTime || \"\",\r\n          initialFlowrate: sampleData.initialFlowrate || \"\",\r\n          finalFlowrate: sampleData.finalFlowrate || \"\",\r\n          averageFlowrate: sampleData.averageFlowrate || \"\",\r\n          notes: sampleData.notes || \"\",\r\n          sampler: sampleData.collectedBy?._id || sampleData.collectedBy || \"\",\r\n          isFieldBlank:\r\n            sampleData.isFieldBlank || sampleData.location === \"Field blank\"\r\n              ? true\r\n              : false,\r\n        });\r\n        setJob(sampleData.job);\r\n        setError(null);\r\n      } catch (err) {\r\n        console.error(\"Error fetching sample:\", err);\r\n        setError(\"Failed to load sample details\");\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchSample();\r\n  }, [sampleId]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value, checked } = e.target;\r\n\r\n    // Clear field error when user starts typing\r\n    if (fieldErrors[name]) {\r\n      setFieldErrors((prev) => ({ ...prev, [name]: undefined }));\r\n    }\r\n\r\n    if (name === \"isFieldBlank\") {\r\n      setForm((prev) => ({\r\n        ...prev,\r\n        [name]: checked,\r\n        location: checked ? \"Field blank\" : prev.location,\r\n      }));\r\n    } else {\r\n      setForm({ ...form, [name]: value });\r\n    }\r\n  };\r\n\r\n  // Calculate average flowrate when initial or final flowrate changes\r\n  useEffect(() => {\r\n    if (form.initialFlowrate) {\r\n      if (form.finalFlowrate) {\r\n        const avg =\r\n          (parseFloat(form.initialFlowrate) + parseFloat(form.finalFlowrate)) /\r\n          2;\r\n        setForm((prev) => ({\r\n          ...prev,\r\n          averageFlowrate: Math.round(avg).toString(),\r\n        }));\r\n      } else {\r\n        // If no final flowrate, use initial flowrate as average\r\n        setForm((prev) => ({\r\n          ...prev,\r\n          averageFlowrate: Math.round(\r\n            parseFloat(form.initialFlowrate)\r\n          ).toString(),\r\n        }));\r\n      }\r\n    }\r\n  }, [form.initialFlowrate, form.finalFlowrate]);\r\n\r\n  const setCurrentTime = (field) => {\r\n    const now = new Date();\r\n    const hours = now.getHours().toString().padStart(2, \"0\");\r\n    const minutes = now.getMinutes().toString().padStart(2, \"0\");\r\n    const timeString = `${hours}:${minutes}`;\r\n    setForm((prev) => ({ ...prev, [field]: timeString }));\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const errors = {};\r\n\r\n    if (!form.sampler) {\r\n      errors.sampler = \"Sampler is required\";\r\n    }\r\n\r\n    if (!form.sampleNumber) {\r\n      errors.sampleNumber = \"Sample number is required\";\r\n    }\r\n\r\n    if (!form.flowmeter) {\r\n      errors.flowmeter = \"Flowmeter is required\";\r\n    }\r\n\r\n    if (!form.isFieldBlank) {\r\n      if (!form.location) {\r\n        errors.location = \"Location is required\";\r\n      }\r\n      if (!form.type) {\r\n        errors.type = \"Type is required\";\r\n      }\r\n      if (!form.startTime) {\r\n        errors.startTime = \"Start time is required\";\r\n      }\r\n      if (!form.initialFlowrate) {\r\n        errors.initialFlowrate = \"Initial flowrate is required\";\r\n      }\r\n    }\r\n\r\n    setFieldErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError(\"\");\r\n    setFieldErrors({});\r\n\r\n    // Validate form before submission\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      console.log(\"Starting sample update...\");\r\n      console.log(\"Current user:\", currentUser);\r\n      console.log(\"Form data:\", form);\r\n      console.log(\"Project ID:\", projectID);\r\n      console.log(\"Job:\", job);\r\n\r\n      if (!projectID) {\r\n        throw new Error(\"Project ID is required\");\r\n      }\r\n\r\n      if (!job?._id) {\r\n        throw new Error(\"Job ID is required\");\r\n      }\r\n\r\n      if (!shiftId) {\r\n        throw new Error(\"Shift ID is required\");\r\n      }\r\n\r\n      // Generate full sample ID in the format: {projectID}-{sampleNumber}\r\n      const fullSampleID = `${projectID}-${form.sampleNumber}`;\r\n      console.log(\"Generated full sample ID:\", fullSampleID);\r\n\r\n      // Map sample type to match backend enum\r\n      const sampleType = form.type;\r\n\r\n      // Format times to include seconds\r\n      const formatTime = (time) => {\r\n        if (!time) return \"\";\r\n        return time.includes(\":\") ? time : `${time}:00`;\r\n      };\r\n\r\n      const sampleData = {\r\n        shift: shiftId,\r\n        job: job._id,\r\n        sampleNumber: form.sampleNumber,\r\n        fullSampleID: fullSampleID,\r\n        type: sampleType || undefined,\r\n        location: form.location || undefined,\r\n        pumpNo: form.pumpNo || undefined,\r\n        flowmeter: form.flowmeter || undefined,\r\n        cowlNo: form.cowlNo || undefined,\r\n        filterSize: form.filterSize || undefined,\r\n        startTime: form.startTime ? formatTime(form.startTime) : undefined,\r\n        endTime: form.endTime ? formatTime(form.endTime) : undefined,\r\n        initialFlowrate: form.initialFlowrate\r\n          ? parseFloat(form.initialFlowrate)\r\n          : undefined,\r\n        finalFlowrate: form.finalFlowrate\r\n          ? parseFloat(form.finalFlowrate)\r\n          : undefined,\r\n        averageFlowrate: form.averageFlowrate\r\n          ? parseFloat(form.averageFlowrate)\r\n          : undefined,\r\n        status: \"pending\",\r\n        notes: form.notes || undefined,\r\n        collectedBy: form.sampler,\r\n      };\r\n\r\n      await sampleService.update(sampleId, sampleData);\r\n      navigate(`/air-monitoring/shift/${shiftId}/samples`);\r\n    } catch (error) {\r\n      console.error(\"Error updating sample:\", error);\r\n      setError(\r\n        error.response?.data?.message ||\r\n          error.message ||\r\n          \"Failed to update sample\"\r\n      );\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Box sx={{ p: { xs: 2, sm: 3, md: 4 } }}>\r\n        <Typography>Loading sample details...</Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Box sx={{ p: { xs: 2, sm: 3, md: 4 } }}>\r\n        <Typography color=\"error\">{error}</Typography>\r\n        <Button\r\n          startIcon={<ArrowBackIcon />}\r\n          onClick={() => navigate(-1)}\r\n          sx={{ mt: 2 }}\r\n        >\r\n          Back to Samples\r\n        </Button>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (isSubmitting) {\r\n    return (\r\n      <Box sx={{ p: { xs: 2, sm: 3, md: 4 } }}>\r\n        <Typography>Updating sample...</Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ p: { xs: 2, sm: 3, md: 4 } }}>\r\n      <Button\r\n        startIcon={<ArrowBackIcon />}\r\n        onClick={() => navigate(-1)}\r\n        sx={{ mb: 4 }}\r\n      >\r\n        Back to Samples\r\n      </Button>\r\n\r\n      <Typography\r\n        variant=\"h4\"\r\n        sx={{\r\n          color:\r\n            theme.palette.mode === \"dark\"\r\n              ? \"#fff\"\r\n              : theme.palette.secondary[200],\r\n          mb: 4,\r\n        }}\r\n      >\r\n        Edit Sample\r\n      </Typography>\r\n\r\n      <Box component=\"form\" onSubmit={handleSubmit} noValidate>\r\n        <Stack spacing={3} sx={{ maxWidth: 600 }}>\r\n          <FormControl fullWidth required error={!!fieldErrors.sampler}>\r\n            <InputLabel>Sampler</InputLabel>\r\n            <Select\r\n              name=\"sampler\"\r\n              value={form.sampler}\r\n              onChange={handleChange}\r\n              label=\"Sampler\"\r\n              required\r\n            >\r\n              {users.map((user) => (\r\n                <MenuItem key={user._id} value={user._id}>\r\n                  {user.firstName} {user.lastName}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n            {fieldErrors.sampler && (\r\n              <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5 }}>\r\n                {fieldErrors.sampler}\r\n              </Typography>\r\n            )}\r\n          </FormControl>\r\n          <TextField\r\n            name=\"sampleNumber\"\r\n            label=\"Sample Number\"\r\n            value={form.sampleNumber}\r\n            onChange={handleChange}\r\n            required\r\n            fullWidth\r\n            error={!!fieldErrors.sampleNumber}\r\n            helperText={\r\n              fieldErrors.sampleNumber\r\n                ? fieldErrors.sampleNumber\r\n                : projectID\r\n                ? `Full Sample ID will be: ${projectID}-${\r\n                    form.sampleNumber || \"XXX\"\r\n                  }`\r\n                : \"Loading job details...\"\r\n            }\r\n          />\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                name=\"isFieldBlank\"\r\n                checked={form.isFieldBlank}\r\n                onChange={handleChange}\r\n              />\r\n            }\r\n            label=\"Field Blank\"\r\n          />\r\n          {!form.isFieldBlank && (\r\n            <>\r\n              <FormControl fullWidth required error={!!fieldErrors.type}>\r\n                <InputLabel>Type</InputLabel>\r\n                <Select\r\n                  name=\"type\"\r\n                  value={form.type}\r\n                  onChange={handleChange}\r\n                  label=\"Type\"\r\n                >\r\n                  <MenuItem value=\"Background\">Background</MenuItem>\r\n                  <MenuItem value=\"Clearance\">Clearance</MenuItem>\r\n                  <MenuItem value=\"Exposure\">Exposure</MenuItem>\r\n                </Select>\r\n                {fieldErrors.type && (\r\n                  <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5 }}>\r\n                    {fieldErrors.type}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n              <TextField\r\n                name=\"location\"\r\n                label=\"Location\"\r\n                value={form.location}\r\n                onChange={handleChange}\r\n                required\r\n                fullWidth\r\n                error={!!fieldErrors.location}\r\n                helperText={fieldErrors.location}\r\n              />\r\n            </>\r\n          )}\r\n          {form.isFieldBlank && (\r\n            <TextField\r\n              name=\"location\"\r\n              label=\"Location\"\r\n              value=\"Field blank\"\r\n              disabled\r\n              required\r\n              fullWidth\r\n            />\r\n          )}\r\n          {!form.isFieldBlank && (\r\n            <>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Pump No.</InputLabel>\r\n                <Select\r\n                  name=\"pumpNo\"\r\n                  value={form.pumpNo}\r\n                  onChange={handleChange}\r\n                  label=\"Pump No.\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>Select a pump</em>\r\n                  </MenuItem>\r\n                  {airPumps.map((pump) => (\r\n                    <MenuItem key={pump._id} value={pump.pumpReference}>\r\n                      {pump.pumpReference} - {pump.pumpDetails}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <TextField\r\n                name=\"cowlNo\"\r\n                label=\"Cowl No.\"\r\n                value={form.cowlNo}\r\n                onChange={handleChange}\r\n                required\r\n                fullWidth\r\n              />\r\n              <FormControl fullWidth>\r\n                <InputLabel>Filter Size</InputLabel>\r\n                <Select\r\n                  name=\"filterSize\"\r\n                  value={form.filterSize}\r\n                  onChange={handleChange}\r\n                  label=\"Filter Size\"\r\n                >\r\n                  <MenuItem value=\"25mm\">25mm</MenuItem>\r\n                  <MenuItem value=\"13mm\">13mm</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </>\r\n          )}\r\n          <FormControl fullWidth required error={!!fieldErrors.flowmeter}>\r\n            <InputLabel>Flowmeter</InputLabel>\r\n            <Select\r\n              name=\"flowmeter\"\r\n              value={form.flowmeter}\r\n              onChange={handleChange}\r\n              label=\"Flowmeter\"\r\n              required\r\n            >\r\n              <MenuItem value=\"\">\r\n                <em>Select a flowmeter</em>\r\n              </MenuItem>\r\n              {flowmeters.map((flowmeter) => (\r\n                <MenuItem\r\n                  key={flowmeter._id}\r\n                  value={flowmeter.equipmentReference}\r\n                >\r\n                  {flowmeter.equipmentReference} - {flowmeter.brandModel} (\r\n                  {flowmeter.equipmentType})\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n            {fieldErrors.flowmeter && (\r\n              <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5 }}>\r\n                {fieldErrors.flowmeter}\r\n              </Typography>\r\n            )}\r\n          </FormControl>\r\n          <Box sx={{ display: \"flex\", gap: 1 }}>\r\n            <TextField\r\n              name=\"startTime\"\r\n              label=\"Start Time\"\r\n              type=\"time\"\r\n              value={form.startTime}\r\n              onChange={handleChange}\r\n              required\r\n              fullWidth\r\n              error={!!fieldErrors.startTime}\r\n              helperText={fieldErrors.startTime}\r\n              InputLabelProps={{ shrink: true }}\r\n              inputProps={{ step: 60 }}\r\n            />\r\n            <IconButton\r\n              onClick={() => setCurrentTime(\"startTime\")}\r\n              sx={{ alignSelf: \"flex-end\", mb: 1 }}\r\n            >\r\n              <AccessTimeIcon />\r\n            </IconButton>\r\n          </Box>\r\n          <Box sx={{ display: \"flex\", gap: 1 }}>\r\n            <TextField\r\n              name=\"endTime\"\r\n              label=\"End Time\"\r\n              type=\"time\"\r\n              value={form.endTime}\r\n              onChange={handleChange}\r\n              fullWidth\r\n              InputLabelProps={{ shrink: true }}\r\n              inputProps={{ step: 60 }}\r\n            />\r\n            <IconButton\r\n              onClick={() => setCurrentTime(\"endTime\")}\r\n              sx={{ alignSelf: \"flex-end\", mb: 1 }}\r\n            >\r\n              <AccessTimeIcon />\r\n            </IconButton>\r\n          </Box>\r\n          <TextField\r\n            name=\"initialFlowrate\"\r\n            label=\"Initial Flowrate (L/min)\"\r\n            type=\"number\"\r\n            value={form.initialFlowrate}\r\n            onChange={handleChange}\r\n            required\r\n            fullWidth\r\n            error={!!fieldErrors.initialFlowrate}\r\n            helperText={fieldErrors.initialFlowrate}\r\n            inputProps={{ step: \"0.1\" }}\r\n          />\r\n          <TextField\r\n            name=\"finalFlowrate\"\r\n            label=\"Final Flowrate (L/min)\"\r\n            type=\"number\"\r\n            value={form.finalFlowrate}\r\n            onChange={handleChange}\r\n            fullWidth\r\n            inputProps={{ step: \"0.1\" }}\r\n          />\r\n          <TextField\r\n            name=\"averageFlowrate\"\r\n            label=\"Average Flowrate\"\r\n            value={form.averageFlowrate}\r\n            disabled\r\n            required\r\n            fullWidth\r\n          />\r\n\r\n          <TextField\r\n            name=\"notes\"\r\n            label=\"Notes\"\r\n            value={form.notes}\r\n            onChange={handleChange}\r\n            multiline\r\n            rows={3}\r\n            fullWidth\r\n          />\r\n          <Box sx={{ display: \"flex\", gap: 2, justifyContent: \"flex-end\" }}>\r\n            <Button variant=\"outlined\" onClick={() => navigate(-1)}>\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              sx={{\r\n                backgroundColor: theme.palette.primary.main,\r\n                \"&:hover\": {\r\n                  backgroundColor: theme.palette.primary.dark,\r\n                },\r\n              }}\r\n            >\r\n              Save Changes\r\n            </Button>\r\n          </Box>\r\n        </Stack>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default EditSample;\r\n"],"names":["EditSample","theme","useTheme","shiftId","sampleId","useParams","navigate","useNavigate","currentUser","useAuth","users","setUsers","useState","airPumps","setAirPumps","flowmeters","setFlowmeters","form","setForm","sampler","sampleNumber","type","location","pumpNo","flowmeter","cowlNo","filterSize","startTime","endTime","initialFlowrate","finalFlowrate","averageFlowrate","notes","date","formatDateForInput","Date","isFieldBlank","projectID","setProjectID","job","setJob","error","setError","fieldErrors","setFieldErrors","isSubmitting","setIsSubmitting","isLoading","setIsLoading","useEffect","async","response","userService","getAll","data","console","fetchUsers","airPumpService","filterByStatus","fetchActiveAirPumps","equipmentService","log","allEquipment","equipment","filter","equipmentType","status","fetchActiveFlowmeters","_sampleData$collected","sampleData","sampleService","getById","fullSampleID","split","project","jobResponse","jobService","collectedBy","_id","err","fetchSample","handleChange","e","name","value","checked","target","prev","_objectSpread","undefined","avg","parseFloat","Math","round","toString","setCurrentTime","field","now","hours","getHours","padStart","minutes","getMinutes","timeString","concat","_jsx","Box","sx","p","xs","sm","md","children","Typography","_jsxs","color","Button","startIcon","ArrowBackIcon","onClick","mt","mb","variant","palette","mode","secondary","component","onSubmit","preventDefault","validateForm","errors","Object","keys","length","Error","sampleType","formatTime","time","includes","shift","update","_error$response","_error$response$data","message","noValidate","Stack","spacing","maxWidth","FormControl","fullWidth","required","InputLabel","Select","onChange","label","map","user","MenuItem","firstName","lastName","TextField","helperText","FormControlLabel","control","Checkbox","_Fragment","disabled","pump","pumpReference","pumpDetails","equipmentReference","brandModel","display","gap","InputLabelProps","shrink","inputProps","step","IconButton","alignSelf","AccessTimeIcon","multiline","rows","justifyContent","backgroundColor","primary","main","dark"],"sourceRoot":""}